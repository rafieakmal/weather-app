{"version":3,"file":"quakeml.js","sources":["../../src/quakeml.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport { isObject, isStringArg, isNonEmptyStringArg,\n         isNumArg, checkStringOrDate, stringify} from './util';\nimport * as util from './util.js'; // for util.log\nimport moment from 'moment';\n\nexport const QML_NS = 'http://quakeml.org/xmlns/quakeml/1.2';\nexport const BED_NS = 'http://quakeml.org/xmlns/bed/1.2';\nexport const IRIS_NS = 'http://service.iris.edu/fdsnws/event/1/';\nexport const ANSS_NS = 'http://anss.org/xmlns/event/0.1';\nexport const ANSS_CATALOG_NS = \"http://anss.org/xmlns/catalog/0.1\";\n\nexport const USGS_HOST = \"earthquake.usgs.gov\";\n\nexport const UNKNOWN_MAG_TYPE = 'unknown';\n\n// QuakeML classes\n\n/**\n * Represent a QuakeML Event. Renamed to Quake as Event conflicts with\n * other uses in javascript.\n */\nexport class Quake {\n  eventId: string;\n  publicId: string;\n  _time: moment;\n  latitude: number;\n  longitude: number;\n  depth: number;\n  description: string;\n  magnitude: Magnitude;\n  magnitudeList: Array<Magnitude>;\n  originList: Array<Origin>;\n  pickList: Array<Pick>;\n  preferredOriginId: ?string;\n  preferredOrigin: Origin;\n  preferredMagnitudeId: ?string;\n  preferredMagnitude: Magnitude;\n  constructor() {\n// what is essential???\n  }\n  /**\n   * Parses a QuakeML event xml element into a Quake object. Pass in\n   * host=seisplotjs.fdsnevent.USGS_HOST for xml from the USGS service\n   * in order to parse the eventid, otherwise this can be left out\n   *\n   * @param qml the event xml Element\n   * @param host optional source of the xml, helpful for parsing the eventid\n   * @returns QuakeML Quake(Event) object\n   */\n  static createFromXml(qml: Element, host?: string): Quake {\n    if (qml.localName !== \"event\") {\n      throw new Error(`Cannot extract, not a QuakeML Event: ${qml.localName}`);\n    }\n    let out = new Quake();\n    let s = _grabAttribute(qml, 'publicID');\n    if (! isNonEmptyStringArg(s)) {throw new Error(\"Quake/Event does not have publicID\");}\n    out.publicId = s;\n    const desc = _grabFirstElText(_grabFirstEl(qml, 'description'), 'text');\n    if (isStringArg(desc)) {out.description = desc;}\n    let otimeStr = _grabFirstElText(_grabFirstEl(_grabFirstEl(qml, 'origin'), 'time'),'value');\n    if (isNonEmptyStringArg(otimeStr) ) {\n      out.time = otimeStr;\n    }\n\n    //need picks before can do origins\n    let allPickEls = qml.getElementsByTagNameNS(BED_NS, 'pick');\n    let allPicks = [];\n    for (let pickEl of allPickEls) {\n      allPicks.push(Pick.createFromXml(pickEl));\n    }\n\n    let allOriginEls = qml.getElementsByTagNameNS(BED_NS, \"origin\");\n    let allOrigins = [];\n    for (let originEl of allOriginEls) {\n      allOrigins.push(Origin.createFromXml(originEl, allPicks));\n    }\n    let allMagEls = qml.getElementsByTagNameNS(BED_NS, \"magnitude\");\n    let allMags = [];\n    for (let magEl of allMagEls) {\n      allMags.push(Magnitude.createFromXml(magEl));\n    }\n    out.originList = allOrigins;\n    out.magnitudeList = allMags;\n    out.pickList = allPicks;\n    out.eventId = Quake.extractEventId(qml, host);\n    out.preferredOriginId = _grabFirstElText(qml, 'preferredOriginID');\n    out.preferredMagnitudeId = _grabFirstElText(qml, 'preferredMagnitudeID');\n    if (isNonEmptyStringArg(out.preferredOriginId)) {\n      for (let o of allOrigins) {\n        if (o.publicId === out.preferredOriginId) {\n          out.preferredOrigin = o;\n          out.latitude = o.latitude;\n          out.longitude = o.longitude;\n          out.depth = o.depth;\n          out.time = o.time;\n        } else {\n          util.log(`no preferredOriginId match: ${o.publicId} ${out.preferredOriginId}`);\n        }\n      }\n    } else if (out.originList.length > 1) {\n      const o = out.originList[0];\n      out.latitude = o.latitude;\n      out.longitude = o.longitude;\n      out.depth = o.depth;\n    }\n    if (allMags.length > 0) {out.magnitude = allMags[0];}\n    if (isNonEmptyStringArg(out.preferredMagnitudeId)) {\n      for (let m of allMags) {\n        if (m.publicId === out.preferredMagnitudeId) {\n          out.preferredMagnitude = m;\n          out.magnitude = m;\n        } else {\n          util.log(`no match: ${m.publicId} ${out.preferredMagnitudeId}`);\n        }\n      }\n    }\n    return out;\n  }\n  /**\n   * Extracts the EventId from a QuakeML element, guessing from one of several\n   * incompatible (grumble grumble) formats.\n   *\n   * @param   qml Quake(Event) to extract from\n   * @param   host optional source of the xml to help determine the event id style\n   * @returns     Extracted Id, or \"unknownEventId\" if we can't figure it out\n   */\n  static extractEventId(qml: Element, host?: string): string {\n    let eventId = _grabAttributeNS(qml, ANSS_CATALOG_NS, 'eventid');\n    let catalogEventSource = _grabAttributeNS(qml, ANSS_CATALOG_NS, 'eventsource');\n    if (isNonEmptyStringArg(eventId)) {\n      if (host === USGS_HOST && isNonEmptyStringArg(catalogEventSource)) {\n        // USGS, NCEDC and SCEDC use concat of eventsource and eventId as eventit, sigh...\n        return catalogEventSource+eventId;\n      } else {\n        return eventId;\n      }\n    }\n    let publicid = _grabAttribute(qml, 'publicID');\n    if (isNonEmptyStringArg(publicid)) {\n      let re = /eventid=([\\w\\d]+)/;\n      let parsed = re.exec(publicid);\n      if (parsed) { return parsed[1];}\n      re = /evid=([\\w\\d]+)/;\n      parsed = re.exec(publicid);\n      if (parsed) { return parsed[1];}\n    }\n    return \"unknownEventId\";\n  }\n  get time(): moment {\n    return this._time;\n  }\n  set time(value: moment | string) {\n    this._time = moment.utc(value);\n  }\n  get arrivals(): Array<Arrival> {\n    return this.preferredOrigin.arrivalList;\n  }\n  get picks(): Array<Pick> {\n    return this.pickList;\n  }\n  toString() {\n    return stringify(this.time)\n    +' '+stringify(this.latitude)\n    +\" \"+stringify(this.longitude)\n    +' '+stringify(this.depth)\n    +' '+this.magnitude.toString();\n  }\n}\n/** Represents a QuakeML Origin. */\nexport class Origin {\n  time: moment;\n  latitude: number;\n  longitude: number;\n  depth: number;\n  arrivalList: Array<Arrival>;\n  publicId: string;\n\n  constructor() {\n// what is essential???\n  }\n\n  /**\n   * Parses a QuakeML origin xml element into a Origin object.\n   *\n   * @param qml the origin xml Element\n   * @param allPicks picks already extracted from the xml for linking arrivals with picks\n   * @returns Origin instance\n   */\n  static createFromXml(qml: Element, allPicks: Array<Pick>): Origin {\n    if (qml.localName !== \"origin\") {\n      throw new Error(`Cannot extract, not a QuakeML Origin: ${qml.localName}`);\n    }\n    let out = new Origin();\n    let otimeStr = _grabFirstElText(_grabFirstEl(qml, 'time'),'value');\n    if (isNonEmptyStringArg(otimeStr) ) {\n      out.time = otimeStr;\n    } else {\n      util.log(\"origintime is missing...\");\n    }\n    const lat = _grabFirstElFloat(_grabFirstEl(qml, 'latitude'), 'value');\n    if (isNumArg(lat)) {out.latitude = lat;}\n    const lon = _grabFirstElFloat(_grabFirstEl(qml, 'longitude'), 'value');\n    if (isNumArg(lon)) {out.longitude = lon;}\n    const depth = _grabFirstElFloat(_grabFirstEl(qml, 'depth'), 'value');\n    if (isNumArg(depth)) {out.depth = depth;}\n    const pid = _grabAttribute(qml, 'publicID');\n    if (isNonEmptyStringArg(pid)){out.publicId = pid;}\n\n    let allArrivalEls = qml.getElementsByTagNameNS(BED_NS, 'arrival');\n    let allArrivals = [];\n    for ( let arrivalEl of allArrivalEls) {\n      allArrivals.push(Arrival.createFromXml(arrivalEl, allPicks));\n    }\n    out.arrivalList = allArrivals;\n    return out;\n  }\n  toString() {\n    return stringify(this.time)\n      +' '+stringify(this.latitude)\n      +\" \"+stringify(this.longitude)\n      +' '+stringify(this.depth);\n  }\n  get arrivals(): Array<Arrival> {\n    return this.arrivalList;\n  }\n}\n/** Represents a QuakeML Magnitude.\n */\nexport class Magnitude {\n  mag: number;\n  type: string;\n  publicId: string;\n\n  constructor(mag: number, type: string) {\n    this.mag = mag;\n    this.type = type;\n  }\n  /**\n   * Parses a QuakeML magnitude xml element into a Magnitude object.\n   *\n   * @param qml the magnitude xml Element\n   * @returns Magnitude instance\n   */\n  static createFromXml(qml: Element): Magnitude {\n    if (qml.localName !== \"magnitude\") {\n      throw new Error(`Cannot extract, not a QuakeML Magnitude: ${qml.localName}`);\n    }\n    let mag = _grabFirstElFloat(_grabFirstElNS(qml, BED_NS, 'mag'), 'value');\n    let type = _grabFirstElText(qml, 'type');\n    if (isNumArg(mag)) {\n      // allow type to be undef, but mag needs to be a number\n      if ( ! isNonEmptyStringArg(type) ) {\n        type = UNKNOWN_MAG_TYPE;\n      }\n      let out = new Magnitude(mag, type);\n      const pid = _grabAttribute(qml, 'publicID');\n      if (isNonEmptyStringArg(pid)){out.publicId = pid;}\n      return out;\n    } else {\n      throw new Error(`Did not find mag and type in Element: ${stringify(mag)} ${stringify(type)}`);\n    }\n  }\n  toString() {\n    return stringify(this.mag)+\" \"+stringify(this.type);\n  }\n}\n\n/** Represents a QuakeML Arrival, a combination of a Pick with a phase name.\n */\nexport class Arrival {\n  phase: string;\n  pick: Pick;\n  publicId: string;\n\n  constructor(phase: string, pick: Pick) {\n    this.phase = phase;\n    this.pick = pick;\n  }\n  /**\n   * Parses a QuakeML arrival xml element into a Arrival object.\n   *\n   * @param arrivalQML the arrival xml Element\n   * @param allPicks picks already extracted from the xml for linking arrivals with picks\n   * @returns Arrival instance\n   */\n  static createFromXml(arrivalQML: Element, allPicks: Array<Pick>): Arrival {\n    if (arrivalQML.localName !== \"arrival\") {\n      throw new Error(`Cannot extract, not a QuakeML Arrival: ${arrivalQML.localName}`);\n    }\n    let pickId = _grabFirstElText(arrivalQML, 'pickID');\n    let phase = _grabFirstElText(arrivalQML, 'phase');\n    if (isNonEmptyStringArg(phase) && isNonEmptyStringArg(pickId)) {\n      let myPick = allPicks.find(function(p: Pick) { return p.publicId === pickId;});\n      if ( ! myPick) {\n        throw new Error(\"Can't find pick with Id=\"+pickId+\" for Arrival\");\n      }\n      let out = new Arrival(phase, myPick);\n      const pid = _grabAttribute(arrivalQML, 'publicID');\n      if (isNonEmptyStringArg(pid)){out.publicId = pid;}\n      return out;\n    } else {\n      throw new Error(\"Arrival does not have phase or pickId: \"+stringify(phase)+\" \"+stringify(pickId));\n    }\n  }\n}\n\n/** Represents a QuakeML Pick.\n */\nexport class Pick {\n  time: moment;\n  networkCode: string;\n  stationCode: string;\n  locationCode: string;\n  channelCode: string;\n  publicId: string;\n  constructor(time: moment,\n      networkCode: string,\n      stationCode: string,\n      locationCode: string,\n      channelCode: string) {\n    this.time = checkStringOrDate(time);\n    this.networkCode = networkCode;\n    this.stationCode = stationCode;\n    this.locationCode = locationCode;\n    this.channelCode = channelCode;\n  }\n  /**\n   * Parses a QuakeML pick xml element into a Pick object.\n   *\n   * @param pickQML the pick xml Element\n   * @returns Pick instance\n   */\n  static createFromXml(pickQML: Element): Pick {\n    if (pickQML.localName !== \"pick\") {\n      throw new Error(`Cannot extract, not a QuakeML Pick: ${pickQML.localName}`);\n    }\n    let otimeStr = _grabFirstElText(_grabFirstEl(pickQML, 'time'),'value');\n    let time = checkStringOrDate(otimeStr);\n    let waveformIdEl = _grabFirstEl(pickQML, 'waveformID');\n    let netCode = _grabAttribute(waveformIdEl, \"networkCode\");\n    let stationCode = _grabAttribute(waveformIdEl, \"stationCode\");\n    let locationCode = _grabAttribute(waveformIdEl, \"locationCode\");\n    let channelCode = _grabAttribute(waveformIdEl, \"channelCode\");\n    // handle empty loc code, it can be missing\n    if ( ! isNonEmptyStringArg(locationCode)) { locationCode = '';}\n    if (! isNonEmptyStringArg(netCode) || ! isNonEmptyStringArg(stationCode)\n        || ! isNonEmptyStringArg(channelCode)) {\n      throw new Error(\"missing codes: \"+stringify(netCode)\n                      +\".\"+ stringify(stationCode)\n                      +\".\"+ stringify(locationCode)\n                      +\".\"+ stringify(channelCode));\n    }\n    let out = new Pick(time, netCode, stationCode, locationCode, channelCode);\n    const pid = _grabAttribute(pickQML, 'publicID');\n    if (isNonEmptyStringArg(pid)){out.publicId = pid;}\n    return out;\n  }\n}\n\n\n/**\n * Parses a QuakeML xml document into seisplotjs objects\n *\n *  @param rawXml the xml Document to parse\n *  @param host optional source of the xml, helpful for parsing the eventid\n *  @returns array of Quake objects\n */\nexport function parseQuakeML(rawXml: Document, host?: string): Array<Quake> {\n  let top = rawXml.documentElement;\n  if (! top) {\n    throw new Error(\"Can't get documentElement\");\n  }\n  let eventArray = top.getElementsByTagName(\"event\");\n  let out = [];\n  for (let eventEl of eventArray) {\n    out.push(Quake.createFromXml(eventEl, host));\n  }\n  return out;\n}\n\n// these are similar methods as in seisplotjs.stationxml\n// duplicate here to avoid dependency and diff NS, yes that is dumb...\n\nconst _grabFirstElNS = function(xml: Element | null | void, namespace: string, tagName: string): Element | void {\n  let out = undefined;\n  if ( isObject(xml)) {\n    let elList = xml.getElementsByTagNameNS(namespace, tagName);\n    if (isObject(elList) && elList.length > 0) {\n      const e = elList.item(0);\n      if (e) {\n        out = e;\n      }\n    }\n  }\n  return out;\n};\n\nconst _grabFirstEl = function(xml: Element | null | void, tagName: string): Element | void {\n  let out = undefined;\n  if ( isObject(xml)) {\n    let elList = xml.getElementsByTagName(tagName);\n    if (isObject(elList) && elList.length > 0) {\n      const e = elList.item(0);\n      if (e) {\n        out = e;\n      }\n    }\n  }\n  return out;\n};\n\nconst _grabFirstElText = function(xml: Element | null | void, tagName: string): string | void {\n  let out = undefined;\n  let el = _grabFirstEl(xml, tagName);\n  if (isObject(el)) {\n    out = el.textContent;\n  }\n  return out;\n};\n\nconst _grabFirstElInt = function(xml: Element | null | void, tagName: string): number | void {\n  let out = undefined;\n  let el = _grabFirstElText(xml, tagName);\n  if (isStringArg(el)) {\n    out = parseInt(el);\n  }\n  return out;\n};\n\nconst _grabFirstElFloat = function(xml: Element | null | void, tagName: string): number | void {\n  let out = undefined;\n  let el = _grabFirstElText(xml, tagName);\n  if (isStringArg(el)) {\n    out = parseFloat(el);\n  }\n  return out;\n};\n\nconst _grabAttribute = function(xml: Element | null | void, tagName: string): string | void {\n  let out = undefined;\n  if ( isObject(xml)) {\n    let a = xml.getAttribute(tagName);\n    if (isStringArg(a)) {\n      out = a;\n    }\n  }\n  return out;\n};\n\nconst _grabAttributeNS = function(xml: Element | null | void, namespace: string, tagName: string): string | void {\n  let out = undefined;\n  if ( isObject(xml)) {\n    let a = xml.getAttributeNS(namespace, tagName);\n    if (isStringArg(a)) {\n      out = a;\n    }\n  }\n  return out;\n};\n\nexport const parseUtil = {\n  \"_grabFirstEl\": _grabFirstEl,\n  \"_grabFirstElNS\": _grabFirstElNS,\n  \"_grabFirstElText\": _grabFirstElText,\n  \"_grabFirstElFloat\": _grabFirstElFloat,\n  \"_grabFirstElInt\": _grabFirstElInt,\n  \"_grabAttribute\": _grabAttribute,\n  \"_grabAttributeNS\": _grabAttributeNS\n};\n"],"names":["QML_NS","BED_NS","IRIS_NS","ANSS_NS","ANSS_CATALOG_NS","USGS_HOST","UNKNOWN_MAG_TYPE","Quake","constructor","createFromXml","qml","host","localName","Error","out","s","_grabAttribute","isNonEmptyStringArg","publicId","desc","_grabFirstElText","_grabFirstEl","isStringArg","description","otimeStr","time","allPickEls","getElementsByTagNameNS","allPicks","pickEl","push","Pick","allOriginEls","allOrigins","originEl","Origin","allMagEls","allMags","magEl","Magnitude","originList","magnitudeList","pickList","eventId","extractEventId","preferredOriginId","preferredMagnitudeId","o","preferredOrigin","latitude","longitude","depth","util","length","magnitude","m","preferredMagnitude","_grabAttributeNS","catalogEventSource","publicid","re","parsed","exec","_time","value","moment","utc","arrivals","arrivalList","picks","toString","stringify","lat","_grabFirstElFloat","isNumArg","lon","pid","allArrivalEls","allArrivals","arrivalEl","Arrival","mag","type","_grabFirstElNS","phase","pick","arrivalQML","pickId","myPick","find","p","networkCode","stationCode","locationCode","channelCode","checkStringOrDate","pickQML","waveformIdEl","netCode","parseQuakeML","rawXml","top","documentElement","eventArray","getElementsByTagName","eventEl","xml","namespace","tagName","undefined","isObject","elList","e","item","el","textContent","_grabFirstElInt","parseInt","parseFloat","a","getAttribute","getAttributeNS","parseUtil"],"mappings":";;;AAEA;;;;;MAWaA,MAAM,GAAG;MACTC,MAAM,GAAG;MACTC,OAAO,GAAG;MACVC,OAAO,GAAG;MACVC,eAAe,GAAG;MAElBC,SAAS,GAAG;MAEZC,gBAAgB,GAAG;;AAIhC;;;;;AAIO,MAAMC,KAAN,CAAY;AAgBjBC,EAAAA,WAAW,GAAG;AAEb;AACD;;;;;;;;;;;AASA,SAAOC,aAAP,CAAqBC,GAArB,EAAmCC,IAAnC,EAAyD;AACvD,QAAID,GAAG,CAACE,SAAJ,KAAkB,OAAtB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,gDAAkDH,GAAG,CAACE,SAAtD,EAAN;AACD;;AACD,QAAIE,GAAG,GAAG,IAAIP,KAAJ,EAAV;;AACA,QAAIQ,CAAC,GAAGC,cAAc,CAACN,GAAD,EAAM,UAAN,CAAtB;;AACA,QAAI,CAAEO,mBAAmB,CAACF,CAAD,CAAzB,EAA8B;AAAC,YAAM,IAAIF,KAAJ,CAAU,oCAAV,CAAN;AAAuD;;AACtFC,IAAAA,GAAG,CAACI,QAAJ,GAAeH,CAAf;;AACA,UAAMI,IAAI,GAAGC,gBAAgB,CAACC,YAAY,CAACX,GAAD,EAAM,aAAN,CAAb,EAAmC,MAAnC,CAA7B;;AACA,QAAIY,WAAW,CAACH,IAAD,CAAf,EAAuB;AAACL,MAAAA,GAAG,CAACS,WAAJ,GAAkBJ,IAAlB;AAAwB;;AAChD,QAAIK,QAAQ,GAAGJ,gBAAgB,CAACC,YAAY,CAACA,YAAY,CAACX,GAAD,EAAM,QAAN,CAAb,EAA8B,MAA9B,CAAb,EAAmD,OAAnD,CAA/B;;AACA,QAAIO,mBAAmB,CAACO,QAAD,CAAvB,EAAoC;AAClCV,MAAAA,GAAG,CAACW,IAAJ,GAAWD,QAAX;AACD,KAbsD;;;AAgBvD,QAAIE,UAAU,GAAGhB,GAAG,CAACiB,sBAAJ,CAA2B1B,MAA3B,EAAmC,MAAnC,CAAjB;AACA,QAAI2B,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,MAAT,IAAmBH,UAAnB,EAA+B;AAC7BE,MAAAA,QAAQ,CAACE,IAAT,CAAcC,IAAI,CAACtB,aAAL,CAAmBoB,MAAnB,CAAd;AACD;;AAED,QAAIG,YAAY,GAAGtB,GAAG,CAACiB,sBAAJ,CAA2B1B,MAA3B,EAAmC,QAAnC,CAAnB;AACA,QAAIgC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,QAAT,IAAqBF,YAArB,EAAmC;AACjCC,MAAAA,UAAU,CAACH,IAAX,CAAgBK,MAAM,CAAC1B,aAAP,CAAqByB,QAArB,EAA+BN,QAA/B,CAAhB;AACD;;AACD,QAAIQ,SAAS,GAAG1B,GAAG,CAACiB,sBAAJ,CAA2B1B,MAA3B,EAAmC,WAAnC,CAAhB;AACA,QAAIoC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,KAAT,IAAkBF,SAAlB,EAA6B;AAC3BC,MAAAA,OAAO,CAACP,IAAR,CAAaS,SAAS,CAAC9B,aAAV,CAAwB6B,KAAxB,CAAb;AACD;;AACDxB,IAAAA,GAAG,CAAC0B,UAAJ,GAAiBP,UAAjB;AACAnB,IAAAA,GAAG,CAAC2B,aAAJ,GAAoBJ,OAApB;AACAvB,IAAAA,GAAG,CAAC4B,QAAJ,GAAed,QAAf;AACAd,IAAAA,GAAG,CAAC6B,OAAJ,GAAcpC,KAAK,CAACqC,cAAN,CAAqBlC,GAArB,EAA0BC,IAA1B,CAAd;AACAG,IAAAA,GAAG,CAAC+B,iBAAJ,GAAwBzB,gBAAgB,CAACV,GAAD,EAAM,mBAAN,CAAxC;AACAI,IAAAA,GAAG,CAACgC,oBAAJ,GAA2B1B,gBAAgB,CAACV,GAAD,EAAM,sBAAN,CAA3C;;AACA,QAAIO,mBAAmB,CAACH,GAAG,CAAC+B,iBAAL,CAAvB,EAAgD;AAC9C,WAAK,IAAIE,CAAT,IAAcd,UAAd,EAA0B;AACxB,YAAIc,CAAC,CAAC7B,QAAF,KAAeJ,GAAG,CAAC+B,iBAAvB,EAA0C;AACxC/B,UAAAA,GAAG,CAACkC,eAAJ,GAAsBD,CAAtB;AACAjC,UAAAA,GAAG,CAACmC,QAAJ,GAAeF,CAAC,CAACE,QAAjB;AACAnC,UAAAA,GAAG,CAACoC,SAAJ,GAAgBH,CAAC,CAACG,SAAlB;AACApC,UAAAA,GAAG,CAACqC,KAAJ,GAAYJ,CAAC,CAACI,KAAd;AACArC,UAAAA,GAAG,CAACW,IAAJ,GAAWsB,CAAC,CAACtB,IAAb;AACD,SAND,MAMO;AACL2B,UAAAA,GAAA,uCAAwCL,CAAC,CAAC7B,QAA1C,cAAsDJ,GAAG,CAAC+B,iBAA1D;AACD;AACF;AACF,KAZD,MAYO,IAAI/B,GAAG,CAAC0B,UAAJ,CAAea,MAAf,GAAwB,CAA5B,EAA+B;AACpC,YAAMN,CAAC,GAAGjC,GAAG,CAAC0B,UAAJ,CAAe,CAAf,CAAV;AACA1B,MAAAA,GAAG,CAACmC,QAAJ,GAAeF,CAAC,CAACE,QAAjB;AACAnC,MAAAA,GAAG,CAACoC,SAAJ,GAAgBH,CAAC,CAACG,SAAlB;AACApC,MAAAA,GAAG,CAACqC,KAAJ,GAAYJ,CAAC,CAACI,KAAd;AACD;;AACD,QAAId,OAAO,CAACgB,MAAR,GAAiB,CAArB,EAAwB;AAACvC,MAAAA,GAAG,CAACwC,SAAJ,GAAgBjB,OAAO,CAAC,CAAD,CAAvB;AAA4B;;AACrD,QAAIpB,mBAAmB,CAACH,GAAG,CAACgC,oBAAL,CAAvB,EAAmD;AACjD,WAAK,IAAIS,CAAT,IAAclB,OAAd,EAAuB;AACrB,YAAIkB,CAAC,CAACrC,QAAF,KAAeJ,GAAG,CAACgC,oBAAvB,EAA6C;AAC3ChC,UAAAA,GAAG,CAAC0C,kBAAJ,GAAyBD,CAAzB;AACAzC,UAAAA,GAAG,CAACwC,SAAJ,GAAgBC,CAAhB;AACD,SAHD,MAGO;AACLH,UAAAA,GAAA,qBAAsBG,CAAC,CAACrC,QAAxB,cAAoCJ,GAAG,CAACgC,oBAAxC;AACD;AACF;AACF;;AACD,WAAOhC,GAAP;AACD;AACD;;;;;;;;;;AAQA,SAAO8B,cAAP,CAAsBlC,GAAtB,EAAoCC,IAApC,EAA2D;AACzD,QAAIgC,OAAO,GAAGc,gBAAgB,CAAC/C,GAAD,EAAMN,eAAN,EAAuB,SAAvB,CAA9B;;AACA,QAAIsD,kBAAkB,GAAGD,gBAAgB,CAAC/C,GAAD,EAAMN,eAAN,EAAuB,aAAvB,CAAzC;;AACA,QAAIa,mBAAmB,CAAC0B,OAAD,CAAvB,EAAkC;AAChC,UAAIhC,IAAI,KAAKN,SAAT,IAAsBY,mBAAmB,CAACyC,kBAAD,CAA7C,EAAmE;AACjE;AACA,eAAOA,kBAAkB,GAACf,OAA1B;AACD,OAHD,MAGO;AACL,eAAOA,OAAP;AACD;AACF;;AACD,QAAIgB,QAAQ,GAAG3C,cAAc,CAACN,GAAD,EAAM,UAAN,CAA7B;;AACA,QAAIO,mBAAmB,CAAC0C,QAAD,CAAvB,EAAmC;AACjC,UAAIC,EAAE,GAAG,mBAAT;AACA,UAAIC,MAAM,GAAGD,EAAE,CAACE,IAAH,CAAQH,QAAR,CAAb;;AACA,UAAIE,MAAJ,EAAY;AAAE,eAAOA,MAAM,CAAC,CAAD,CAAb;AAAkB;;AAChCD,MAAAA,EAAE,GAAG,gBAAL;AACAC,MAAAA,MAAM,GAAGD,EAAE,CAACE,IAAH,CAAQH,QAAR,CAAT;;AACA,UAAIE,MAAJ,EAAY;AAAE,eAAOA,MAAM,CAAC,CAAD,CAAb;AAAkB;AACjC;;AACD,WAAO,gBAAP;AACD;;AACD,MAAIpC,IAAJ,GAAmB;AACjB,WAAO,KAAKsC,KAAZ;AACD;;AACD,MAAItC,IAAJ,CAASuC,KAAT,EAAiC;AAC/B,SAAKD,KAAL,GAAaE,QAAM,CAACC,GAAP,CAAWF,KAAX,CAAb;AACD;;AACD,MAAIG,QAAJ,GAA+B;AAC7B,WAAO,KAAKnB,eAAL,CAAqBoB,WAA5B;AACD;;AACD,MAAIC,KAAJ,GAAyB;AACvB,WAAO,KAAK3B,QAAZ;AACD;;AACD4B,EAAAA,QAAQ,GAAG;AACT,WAAOC,SAAS,CAAC,KAAK9C,IAAN,CAAT,GACN,GADM,GACF8C,SAAS,CAAC,KAAKtB,QAAN,CADP,GAEN,GAFM,GAEFsB,SAAS,CAAC,KAAKrB,SAAN,CAFP,GAGN,GAHM,GAGFqB,SAAS,CAAC,KAAKpB,KAAN,CAHP,GAIN,GAJM,GAIF,KAAKG,SAAL,CAAegB,QAAf,EAJL;AAKD;;AAjJgB;AAmJnB;;AACO,MAAMnC,MAAN,CAAa;AAQlB3B,EAAAA,WAAW,GAAG;AAEb;AAED;;;;;;;;;AAOA,SAAOC,aAAP,CAAqBC,GAArB,EAAmCkB,QAAnC,EAAkE;AAChE,QAAIlB,GAAG,CAACE,SAAJ,KAAkB,QAAtB,EAAgC;AAC9B,YAAM,IAAIC,KAAJ,iDAAmDH,GAAG,CAACE,SAAvD,EAAN;AACD;;AACD,QAAIE,GAAG,GAAG,IAAIqB,MAAJ,EAAV;;AACA,QAAIX,QAAQ,GAAGJ,gBAAgB,CAACC,YAAY,CAACX,GAAD,EAAM,MAAN,CAAb,EAA2B,OAA3B,CAA/B;;AACA,QAAIO,mBAAmB,CAACO,QAAD,CAAvB,EAAoC;AAClCV,MAAAA,GAAG,CAACW,IAAJ,GAAWD,QAAX;AACD,KAFD,MAEO;AACL4B,MAAAA,GAAA,CAAS,0BAAT;AACD;;AACD,UAAMoB,GAAG,GAAGC,iBAAiB,CAACpD,YAAY,CAACX,GAAD,EAAM,UAAN,CAAb,EAAgC,OAAhC,CAA7B;;AACA,QAAIgE,QAAQ,CAACF,GAAD,CAAZ,EAAmB;AAAC1D,MAAAA,GAAG,CAACmC,QAAJ,GAAeuB,GAAf;AAAoB;;AACxC,UAAMG,GAAG,GAAGF,iBAAiB,CAACpD,YAAY,CAACX,GAAD,EAAM,WAAN,CAAb,EAAiC,OAAjC,CAA7B;;AACA,QAAIgE,QAAQ,CAACC,GAAD,CAAZ,EAAmB;AAAC7D,MAAAA,GAAG,CAACoC,SAAJ,GAAgByB,GAAhB;AAAqB;;AACzC,UAAMxB,KAAK,GAAGsB,iBAAiB,CAACpD,YAAY,CAACX,GAAD,EAAM,OAAN,CAAb,EAA6B,OAA7B,CAA/B;;AACA,QAAIgE,QAAQ,CAACvB,KAAD,CAAZ,EAAqB;AAACrC,MAAAA,GAAG,CAACqC,KAAJ,GAAYA,KAAZ;AAAmB;;AACzC,UAAMyB,GAAG,GAAG5D,cAAc,CAACN,GAAD,EAAM,UAAN,CAA1B;;AACA,QAAIO,mBAAmB,CAAC2D,GAAD,CAAvB,EAA6B;AAAC9D,MAAAA,GAAG,CAACI,QAAJ,GAAe0D,GAAf;AAAoB;;AAElD,QAAIC,aAAa,GAAGnE,GAAG,CAACiB,sBAAJ,CAA2B1B,MAA3B,EAAmC,SAAnC,CAApB;AACA,QAAI6E,WAAW,GAAG,EAAlB;;AACA,SAAM,IAAIC,SAAV,IAAuBF,aAAvB,EAAsC;AACpCC,MAAAA,WAAW,CAAChD,IAAZ,CAAiBkD,OAAO,CAACvE,aAAR,CAAsBsE,SAAtB,EAAiCnD,QAAjC,CAAjB;AACD;;AACDd,IAAAA,GAAG,CAACsD,WAAJ,GAAkBU,WAAlB;AACA,WAAOhE,GAAP;AACD;;AACDwD,EAAAA,QAAQ,GAAG;AACT,WAAOC,SAAS,CAAC,KAAK9C,IAAN,CAAT,GACJ,GADI,GACA8C,SAAS,CAAC,KAAKtB,QAAN,CADT,GAEJ,GAFI,GAEAsB,SAAS,CAAC,KAAKrB,SAAN,CAFT,GAGJ,GAHI,GAGAqB,SAAS,CAAC,KAAKpB,KAAN,CAHhB;AAID;;AACD,MAAIgB,QAAJ,GAA+B;AAC7B,WAAO,KAAKC,WAAZ;AACD;;AAvDiB;AAyDpB;;;AAEO,MAAM7B,SAAN,CAAgB;AAKrB/B,EAAAA,WAAW,CAACyE,GAAD,EAAcC,IAAd,EAA4B;AACrC,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;AACD;;;;;;;;AAMA,SAAOzE,aAAP,CAAqBC,GAArB,EAA8C;AAC5C,QAAIA,GAAG,CAACE,SAAJ,KAAkB,WAAtB,EAAmC;AACjC,YAAM,IAAIC,KAAJ,oDAAsDH,GAAG,CAACE,SAA1D,EAAN;AACD;;AACD,QAAIqE,GAAG,GAAGR,iBAAiB,CAACU,cAAc,CAACzE,GAAD,EAAMT,MAAN,EAAc,KAAd,CAAf,EAAqC,OAArC,CAA3B;;AACA,QAAIiF,IAAI,GAAG9D,gBAAgB,CAACV,GAAD,EAAM,MAAN,CAA3B;;AACA,QAAIgE,QAAQ,CAACO,GAAD,CAAZ,EAAmB;AACjB;AACA,UAAK,CAAEhE,mBAAmB,CAACiE,IAAD,CAA1B,EAAmC;AACjCA,QAAAA,IAAI,GAAG5E,gBAAP;AACD;;AACD,UAAIQ,GAAG,GAAG,IAAIyB,SAAJ,CAAc0C,GAAd,EAAmBC,IAAnB,CAAV;;AACA,YAAMN,GAAG,GAAG5D,cAAc,CAACN,GAAD,EAAM,UAAN,CAA1B;;AACA,UAAIO,mBAAmB,CAAC2D,GAAD,CAAvB,EAA6B;AAAC9D,QAAAA,GAAG,CAACI,QAAJ,GAAe0D,GAAf;AAAoB;;AAClD,aAAO9D,GAAP;AACD,KATD,MASO;AACL,YAAM,IAAID,KAAJ,iDAAmD0D,SAAS,CAACU,GAAD,CAA5D,cAAqEV,SAAS,CAACW,IAAD,CAA9E,EAAN;AACD;AACF;;AACDZ,EAAAA,QAAQ,GAAG;AACT,WAAOC,SAAS,CAAC,KAAKU,GAAN,CAAT,GAAoB,GAApB,GAAwBV,SAAS,CAAC,KAAKW,IAAN,CAAxC;AACD;;AApCoB;AAuCvB;;;AAEO,MAAMF,OAAN,CAAc;AAKnBxE,EAAAA,WAAW,CAAC4E,KAAD,EAAgBC,IAAhB,EAA4B;AACrC,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;AACD;;;;;;;;;AAOA,SAAO5E,aAAP,CAAqB6E,UAArB,EAA0C1D,QAA1C,EAA0E;AACxE,QAAI0D,UAAU,CAAC1E,SAAX,KAAyB,SAA7B,EAAwC;AACtC,YAAM,IAAIC,KAAJ,kDAAoDyE,UAAU,CAAC1E,SAA/D,EAAN;AACD;;AACD,QAAI2E,MAAM,GAAGnE,gBAAgB,CAACkE,UAAD,EAAa,QAAb,CAA7B;;AACA,QAAIF,KAAK,GAAGhE,gBAAgB,CAACkE,UAAD,EAAa,OAAb,CAA5B;;AACA,QAAIrE,mBAAmB,CAACmE,KAAD,CAAnB,IAA8BnE,mBAAmB,CAACsE,MAAD,CAArD,EAA+D;AAC7D,UAAIC,MAAM,GAAG5D,QAAQ,CAAC6D,IAAT,CAAc,UAASC,CAAT,EAAkB;AAAE,eAAOA,CAAC,CAACxE,QAAF,KAAeqE,MAAtB;AAA8B,OAAhE,CAAb;;AACA,UAAK,CAAEC,MAAP,EAAe;AACb,cAAM,IAAI3E,KAAJ,CAAU,6BAA2B0E,MAA3B,GAAkC,cAA5C,CAAN;AACD;;AACD,UAAIzE,GAAG,GAAG,IAAIkE,OAAJ,CAAYI,KAAZ,EAAmBI,MAAnB,CAAV;;AACA,YAAMZ,GAAG,GAAG5D,cAAc,CAACsE,UAAD,EAAa,UAAb,CAA1B;;AACA,UAAIrE,mBAAmB,CAAC2D,GAAD,CAAvB,EAA6B;AAAC9D,QAAAA,GAAG,CAACI,QAAJ,GAAe0D,GAAf;AAAoB;;AAClD,aAAO9D,GAAP;AACD,KATD,MASO;AACL,YAAM,IAAID,KAAJ,CAAU,4CAA0C0D,SAAS,CAACa,KAAD,CAAnD,GAA2D,GAA3D,GAA+Db,SAAS,CAACgB,MAAD,CAAlF,CAAN;AACD;AACF;;AAlCkB;AAqCrB;;;AAEO,MAAMxD,IAAN,CAAW;AAOhBvB,EAAAA,WAAW,CAACiB,IAAD,EACPkE,WADO,EAEPC,WAFO,EAGPC,YAHO,EAIPC,WAJO,EAIc;AACvB,SAAKrE,IAAL,GAAYsE,iBAAiB,CAACtE,IAAD,CAA7B;AACA,SAAKkE,WAAL,GAAmBA,WAAnB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;AACD;;;;;;;;AAMA,SAAOrF,aAAP,CAAqBuF,OAArB,EAA6C;AAC3C,QAAIA,OAAO,CAACpF,SAAR,KAAsB,MAA1B,EAAkC;AAChC,YAAM,IAAIC,KAAJ,+CAAiDmF,OAAO,CAACpF,SAAzD,EAAN;AACD;;AACD,QAAIY,QAAQ,GAAGJ,gBAAgB,CAACC,YAAY,CAAC2E,OAAD,EAAU,MAAV,CAAb,EAA+B,OAA/B,CAA/B;;AACA,QAAIvE,IAAI,GAAGsE,iBAAiB,CAACvE,QAAD,CAA5B;;AACA,QAAIyE,YAAY,GAAG5E,YAAY,CAAC2E,OAAD,EAAU,YAAV,CAA/B;;AACA,QAAIE,OAAO,GAAGlF,cAAc,CAACiF,YAAD,EAAe,aAAf,CAA5B;;AACA,QAAIL,WAAW,GAAG5E,cAAc,CAACiF,YAAD,EAAe,aAAf,CAAhC;;AACA,QAAIJ,YAAY,GAAG7E,cAAc,CAACiF,YAAD,EAAe,cAAf,CAAjC;;AACA,QAAIH,WAAW,GAAG9E,cAAc,CAACiF,YAAD,EAAe,aAAf,CAAhC,CAV2C;;;AAY3C,QAAK,CAAEhF,mBAAmB,CAAC4E,YAAD,CAA1B,EAA0C;AAAEA,MAAAA,YAAY,GAAG,EAAf;AAAmB;;AAC/D,QAAI,CAAE5E,mBAAmB,CAACiF,OAAD,CAArB,IAAkC,CAAEjF,mBAAmB,CAAC2E,WAAD,CAAvD,IACG,CAAE3E,mBAAmB,CAAC6E,WAAD,CAD5B,EAC2C;AACzC,YAAM,IAAIjF,KAAJ,CAAU,oBAAkB0D,SAAS,CAAC2B,OAAD,CAA3B,GACC,GADD,GACM3B,SAAS,CAACqB,WAAD,CADf,GAEC,GAFD,GAEMrB,SAAS,CAACsB,YAAD,CAFf,GAGC,GAHD,GAGMtB,SAAS,CAACuB,WAAD,CAHzB,CAAN;AAID;;AACD,QAAIhF,GAAG,GAAG,IAAIiB,IAAJ,CAASN,IAAT,EAAeyE,OAAf,EAAwBN,WAAxB,EAAqCC,YAArC,EAAmDC,WAAnD,CAAV;;AACA,UAAMlB,GAAG,GAAG5D,cAAc,CAACgF,OAAD,EAAU,UAAV,CAA1B;;AACA,QAAI/E,mBAAmB,CAAC2D,GAAD,CAAvB,EAA6B;AAAC9D,MAAAA,GAAG,CAACI,QAAJ,GAAe0D,GAAf;AAAoB;;AAClD,WAAO9D,GAAP;AACD;;AAhDe;AAoDlB;;;;;;;;AAOO,SAASqF,YAAT,CAAsBC,MAAtB,EAAwCzF,IAAxC,EAAqE;AAC1E,MAAI0F,GAAG,GAAGD,MAAM,CAACE,eAAjB;;AACA,MAAI,CAAED,GAAN,EAAW;AACT,UAAM,IAAIxF,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,MAAI0F,UAAU,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,OAAzB,CAAjB;AACA,MAAI1F,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI2F,OAAT,IAAoBF,UAApB,EAAgC;AAC9BzF,IAAAA,GAAG,CAACgB,IAAJ,CAASvB,KAAK,CAACE,aAAN,CAAoBgG,OAApB,EAA6B9F,IAA7B,CAAT;AACD;;AACD,SAAOG,GAAP;AACD;AAGD;;AAEA,MAAMqE,cAAc,GAAG,SAAjBA,cAAiB,CAASuB,GAAT,EAAqCC,SAArC,EAAwDC,OAAxD,EAAyF;AAC9G,MAAI9F,GAAG,GAAG+F,SAAV;;AACA,MAAKC,QAAQ,CAACJ,GAAD,CAAb,EAAoB;AAClB,QAAIK,MAAM,GAAGL,GAAG,CAAC/E,sBAAJ,CAA2BgF,SAA3B,EAAsCC,OAAtC,CAAb;;AACA,QAAIE,QAAQ,CAACC,MAAD,CAAR,IAAoBA,MAAM,CAAC1D,MAAP,GAAgB,CAAxC,EAA2C;AACzC,YAAM2D,CAAC,GAAGD,MAAM,CAACE,IAAP,CAAY,CAAZ,CAAV;;AACA,UAAID,CAAJ,EAAO;AACLlG,QAAAA,GAAG,GAAGkG,CAAN;AACD;AACF;AACF;;AACD,SAAOlG,GAAP;AACD,CAZD;;AAcA,MAAMO,YAAY,GAAG,SAAfA,YAAe,CAASqF,GAAT,EAAqCE,OAArC,EAAsE;AACzF,MAAI9F,GAAG,GAAG+F,SAAV;;AACA,MAAKC,QAAQ,CAACJ,GAAD,CAAb,EAAoB;AAClB,QAAIK,MAAM,GAAGL,GAAG,CAACF,oBAAJ,CAAyBI,OAAzB,CAAb;;AACA,QAAIE,QAAQ,CAACC,MAAD,CAAR,IAAoBA,MAAM,CAAC1D,MAAP,GAAgB,CAAxC,EAA2C;AACzC,YAAM2D,CAAC,GAAGD,MAAM,CAACE,IAAP,CAAY,CAAZ,CAAV;;AACA,UAAID,CAAJ,EAAO;AACLlG,QAAAA,GAAG,GAAGkG,CAAN;AACD;AACF;AACF;;AACD,SAAOlG,GAAP;AACD,CAZD;;AAcA,MAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,CAASsF,GAAT,EAAqCE,OAArC,EAAqE;AAC5F,MAAI9F,GAAG,GAAG+F,SAAV;;AACA,MAAIK,EAAE,GAAG7F,YAAY,CAACqF,GAAD,EAAME,OAAN,CAArB;;AACA,MAAIE,QAAQ,CAACI,EAAD,CAAZ,EAAkB;AAChBpG,IAAAA,GAAG,GAAGoG,EAAE,CAACC,WAAT;AACD;;AACD,SAAOrG,GAAP;AACD,CAPD;;AASA,MAAMsG,eAAe,GAAG,SAAlBA,eAAkB,CAASV,GAAT,EAAqCE,OAArC,EAAqE;AAC3F,MAAI9F,GAAG,GAAG+F,SAAV;;AACA,MAAIK,EAAE,GAAG9F,gBAAgB,CAACsF,GAAD,EAAME,OAAN,CAAzB;;AACA,MAAItF,WAAW,CAAC4F,EAAD,CAAf,EAAqB;AACnBpG,IAAAA,GAAG,GAAGuG,QAAQ,CAACH,EAAD,CAAd;AACD;;AACD,SAAOpG,GAAP;AACD,CAPD;;AASA,MAAM2D,iBAAiB,GAAG,SAApBA,iBAAoB,CAASiC,GAAT,EAAqCE,OAArC,EAAqE;AAC7F,MAAI9F,GAAG,GAAG+F,SAAV;;AACA,MAAIK,EAAE,GAAG9F,gBAAgB,CAACsF,GAAD,EAAME,OAAN,CAAzB;;AACA,MAAItF,WAAW,CAAC4F,EAAD,CAAf,EAAqB;AACnBpG,IAAAA,GAAG,GAAGwG,UAAU,CAACJ,EAAD,CAAhB;AACD;;AACD,SAAOpG,GAAP;AACD,CAPD;;AASA,MAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAS0F,GAAT,EAAqCE,OAArC,EAAqE;AAC1F,MAAI9F,GAAG,GAAG+F,SAAV;;AACA,MAAKC,QAAQ,CAACJ,GAAD,CAAb,EAAoB;AAClB,QAAIa,CAAC,GAAGb,GAAG,CAACc,YAAJ,CAAiBZ,OAAjB,CAAR;;AACA,QAAItF,WAAW,CAACiG,CAAD,CAAf,EAAoB;AAClBzG,MAAAA,GAAG,GAAGyG,CAAN;AACD;AACF;;AACD,SAAOzG,GAAP;AACD,CATD;;AAWA,MAAM2C,gBAAgB,GAAG,SAAnBA,gBAAmB,CAASiD,GAAT,EAAqCC,SAArC,EAAwDC,OAAxD,EAAwF;AAC/G,MAAI9F,GAAG,GAAG+F,SAAV;;AACA,MAAKC,QAAQ,CAACJ,GAAD,CAAb,EAAoB;AAClB,QAAIa,CAAC,GAAGb,GAAG,CAACe,cAAJ,CAAmBd,SAAnB,EAA8BC,OAA9B,CAAR;;AACA,QAAItF,WAAW,CAACiG,CAAD,CAAf,EAAoB;AAClBzG,MAAAA,GAAG,GAAGyG,CAAN;AACD;AACF;;AACD,SAAOzG,GAAP;AACD,CATD;;MAWa4G,SAAS,GAAG;AACvB,kBAAgBrG,YADO;AAEvB,oBAAkB8D,cAFK;AAGvB,sBAAoB/D,gBAHG;AAIvB,uBAAqBqD,iBAJE;AAKvB,qBAAmB2C,eALI;AAMvB,oBAAkBpG,cANK;AAOvB,sBAAoByC;AAPG;;;;"}