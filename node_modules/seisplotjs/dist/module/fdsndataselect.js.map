{"version":3,"file":"fdsndataselect.js","sources":["../../src/fdsndataselect.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport moment from 'moment';\nimport RSVP from 'rsvp';\n\nimport * as util from './util.js'; // for util.log\n// special due to flow\nimport {checkProtocol, toIsoWoZ, hasArgs, hasNoArgs, isStringArg,\n        isNonEmptyStringArg,isNumArg, checkStringOrDate} from './util';\n\nimport * as miniseed from './miniseed';\nimport { Seismogram, SeismogramDisplayData } from './seismogram';\nimport { TEXT_MIME, StartEndDuration, makeParam, doFetchWithTimeout, defaultFetchInitObj, isDef} from './util.js';\n\n/** const for miniseed format, mseed */\nexport const FORMAT_MINISEED = 'miniseed';\n\n/**\n * Major version of the FDSN spec supported here.\n * Currently is 1.\n */\nexport const SERVICE_VERSION = 1;\n/**\n * Service name as used in the FDSN DataCenters registry,\n * http://www.fdsn.org/datacenters\n */\nexport const SERVICE_NAME = `fdsnws-dataselect-${SERVICE_VERSION}`;\n\n/** const for the default IRIS web service host, service.iris.edu */\nexport const IRIS_HOST = \"service.iris.edu\";\n\n/**\n * Query to a FDSN Dataselect web service.\n *\n * @see http://www.fdsn.org/webservices/\n *\n * @param host optional host to connect to, defaults to IRIS\n */\nexport class DataSelectQuery {\n  /** @private */\n  _specVersion: number;\n  /** @private */\n  _protocol: string;\n  /** @private */\n  _host: string;\n  /** @private */\n  _nodata: number;\n  /** @private */\n  _port: number;\n  /** @private */\n  _networkCode: string;\n  /** @private */\n  _stationCode: string;\n  /** @private */\n  _locationCode: string;\n  /** @private */\n  _channelCode: string;\n  /** @private */\n  _startTime: moment;\n  /** @private */\n  _endTime: moment;\n  /** @private */\n  _quality: string;\n  /** @private */\n  _minimumLength: number;\n  /** @private */\n  _longestOnly: boolean;\n  /** @private */\n  _repository: string;\n  /** @private */\n  _format: string;\n  /** @private */\n  _timeoutSec: number;\n  constructor(host?: string) {\n    this._specVersion = 1;\n    this._protocol = checkProtocol();\n    if (isNonEmptyStringArg(host)) {\n      this._host = host;\n    } else {\n      this._host = IRIS_HOST;\n    }\n    this._port = 80;\n    this._timeoutSec = 30;\n  }\n  /**\n   * Gets/Sets the version of the fdsnws spec, 1 is currently the only value.\n   *  Setting this is probably a bad idea as the code may not be compatible with\n   *  the web service.\n   *\n   * @param value spec version, usually 1\n   * @returns new value if getting, this if setting\n   */\n  specVersion(value?: number): number | DataSelectQuery {\n    if (hasArgs(value)) {\n      this._specVersion = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._specVersion;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the protocol, http or https. This should match the protocol\n   *  of the page loaded, but is autocalculated and generally need not be set.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  protocol(value?: string): string | DataSelectQuery {\n    if (isStringArg(value)) {\n      this._protocol = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._protocol;\n    } else {\n      throw new Error('value argument is optional or string, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the remote host to connect to.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  host(value?: string): string | DataSelectQuery {\n    if (isStringArg(value)) {\n      this._host = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._host;\n    } else {\n      throw new Error('value argument is optional or string, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the nodata parameter, usually 404 or 204 (default), controlling\n   * the status code when no matching data is found by the service.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  nodata(value?: number): number | DataSelectQuery {\n    if (hasNoArgs(value)) {\n      return this._nodata;\n    } else if (hasArgs(value)) {\n      this._nodata = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the remote port to connect to.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  port(value?: number): number | DataSelectQuery {\n    if (hasNoArgs(value)) {\n      return this._port;\n    } else if (isNumArg(value)) {\n      this._port = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the network query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  networkCode(value?: string): string | DataSelectQuery {\n    if (isStringArg(value)) {\n      this._networkCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._networkCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the station query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  stationCode(value?: string): string | DataSelectQuery {\n    if (isStringArg(value)) {\n      this._stationCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._stationCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the location code query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  locationCode(value?: string): string | DataSelectQuery {\n    if (isStringArg(value)) {\n      this._locationCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._locationCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the channel query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  channelCode(value?: string): string | DataSelectQuery {\n    if (isStringArg(value)) {\n      this._channelCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._channelCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the starttime query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  startTime(value?: moment): moment | DataSelectQuery {\n    if (hasNoArgs(value)) {\n      return this._startTime;\n    } else if (hasArgs(value)) {\n      this._startTime = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /** Get/Set the endtime query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  endTime(value?: moment): moment | DataSelectQuery {\n    if (hasNoArgs(value)) {\n      return this._endTime;\n    } else if (hasArgs(value)) {\n      this._endTime = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /**\n   * Sets startTime and endTime using the given time window\n   *\n   * @param   se time window\n   * @returns     this\n   */\n  timeWindow(se: StartEndDuration) {\n    this.startTime(se.startTime);\n    this.endTime(se.endTime);\n    return this;\n  }\n  /** Get/Set the quality query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  quality(value?: string): string | DataSelectQuery {\n    if (isStringArg(value)) {\n      this._quality = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._quality;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the minimum length query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  minimumLength(value?: number): number | DataSelectQuery {\n    if (hasNoArgs(value)) {\n      return this._minimumLength;\n    } else if (hasArgs(value)) {\n      this._minimumLength = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the longest only query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  longestOnly(value?: boolean): boolean | DataSelectQuery {\n    if (hasNoArgs(value)) {\n      return this._longestOnly;\n    } else if (hasArgs(value)) {\n      this._longestOnly = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or boolean, but was '+typeof value);\n    }\n  }\n\n  /**\n   * set or get the repository paramter. This is an IRIS-specific\n   * parameter that will not work with other dataselect web services.\n   *\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  repository(value?: string): string | DataSelectQuery {\n    if (isStringArg(value)) {\n      this._repository = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._repository;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the format query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  format(value?: string): string | DataSelectQuery {\n    if (isStringArg(value)) {\n      this._format = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._format;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Get/Set the timeout in seconds for the request. Default is 30.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  timeout(value?: number): number | DataSelectQuery {\n    if (hasNoArgs(value)) {\n      return this._timeoutSec;\n    } else if (isNumArg(value)) {\n      this._timeoutSec = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n\n  /**\n   * queries the web service using the configured parameters, parsing the response\n   * into miniseed data records.\n   *\n   * @returns Promise to Array of miniseed.DataRecords\n   */\n  queryDataRecords(): Promise<Array<miniseed.DataRecord>> {\n    const mythis = this;\n    this.format(FORMAT_MINISEED);\n    const url = this.formURL();\n    const fetchInit = defaultFetchInitObj(miniseed.MINISEED_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n      .then(function(response) {\n        if (response.status === 204 || (mythis.nodata() && response.status === mythis.nodata())) {\n          // no data\n          return new ArrayBuffer(0);\n        } else {\n          return response.arrayBuffer();\n        }\n      }).then(function(rawBuffer) {\n        let dataRecords = miniseed.parseDataRecords(rawBuffer);\n        return dataRecords;\n    });\n  }\n\n  /**\n   * queries the web service using the configured parameters, parsing the response\n   * into miniseed data records and then combining the data records into\n   * Seismogram objects.\n   *\n   * @returns Promise to Array of Seismogram objects\n   */\n  querySeismograms(): Promise<Array<Seismogram>> {\n    return this.queryDataRecords().then(dataRecords => {\n      return miniseed.seismogramPerChannel(dataRecords);\n    });\n  }\n\n  postQueryDataRecords(channelTimeList: Array<SeismogramDisplayData>): Promise<Array<miniseed.DataRecord>> {\n    return this.postQueryRaw(channelTimeList)\n    .then( fetchResponse => {\n      if(fetchResponse.ok) {\n        return fetchResponse.arrayBuffer().then(ab => {\n          return miniseed.parseDataRecords(ab);\n        });\n      } else {\n        util.log(\"fetchRespone not ok\");\n        return [];\n      }\n    });\n  }\n  /**\n   * query the dataselect server using post, which allows for multiple\n   * channel-timeranges at once. This assumes that there are not multiple\n   * time ranges for the same channel as the results, encapsulated as\n   * SeismogramDisplayData objects, are returned one seismogram\n   * per channel, which may contain gaps. The original channel and timerange are\n   * also populated with each result.\n   *\n   * @param   channelTimeList array of SeismogramDisplayData objects\n   * that will be filled in with the resulting seismogram\n   * @returns Promise to the input Array of SeismogramDisplayData objects, each with the\n   * seismogram containing the data returned from the server\n   */\n  postQuerySeismograms(channelTimeList: Array<SeismogramDisplayData>): Promise<Array<SeismogramDisplayData>> {\n    return this.postQueryDataRecords(channelTimeList).then(dataRecords => {\n      return miniseed.seismogramPerChannel(dataRecords);\n    }).then(seisArray => {\n      for (let ct of channelTimeList) {\n        if (isDef(ct.channel)) {\n          let channel = ct.channel;\n          let codes = channel.codes();\n          let seis = seisArray.find(s => s.codes() === codes);\n          if (seis) {\n            ct.seismogram = seis;\n          }\n        } else {\n          throw new Error(\"Channel in missing in postQuerySeismograms\");\n        }\n      }\n      return channelTimeList;\n    });\n  }\n  postQueryRaw(channelTimeList: Array<SeismogramDisplayData>): Promise<Response> {\n    if (channelTimeList.length === 0) {\n      // return promise faking an not ok fetch response\n      return RSVP.hash({\n        ok: false\n      });\n    } else {\n      const fetchInit = defaultFetchInitObj(miniseed.MINISEED_MIME);\n      fetchInit.method = \"POST\";\n      fetchInit.body = this.createPostBody(channelTimeList);\n      return doFetchWithTimeout(this.formURL(), fetchInit, this._timeoutSec * 1000 );\n    }\n  }\n\n  createPostBody(channelTimeList: Array<SeismogramDisplayData>): string {\n    let out = \"\";\n    for (let ct of channelTimeList) {\n      if (isDef(ct.channel)) {\n        let channel = ct.channel;\n        let sta = channel.station;\n        let net = sta.network;\n        out += `${net.networkCode} ${sta.stationCode} ${channel.locationCode} ${channel.channelCode} ${ct.startTime.toISOString()} ${ct.endTime.toISOString()}`;\n        out += '\\n';\n      } else {\n        throw new Error(\"Channel in missing in createPostBody\");\n      }\n    }\n    return out;\n  }\n\n  formBaseURL(): string {\n      let colon = \":\";\n      if (this._protocol.endsWith(colon)) {\n        colon = \"\";\n      }\n      return this._protocol+colon+\"//\"+this._host+(this._port===80?\"\":(\":\"+this._port))+\"/fdsnws/dataselect/\"+this._specVersion;\n  }\n\n  formVersionURL(): string {\n    return this.formBaseURL()+\"/version\";\n  }\n  /**\n   * Queries the remote web service to get its version\n   *\n   * @returns Promise to version string\n   */\n  queryVersion(): Promise<string> {\n    let url = this.formVersionURL();\n    const fetchInit = defaultFetchInitObj(TEXT_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n      .then(response => {\n          if (response.status === 200) {\n            return response.text();\n          } else {\n            throw new Error(`Status not 200: ${response.status}`);\n          }\n      });\n  }\n\n  formURL(): string {\n    let url = this.formBaseURL()+\"/query?\";\n    if (this._networkCode) { url = url+makeParam(\"net\", this.networkCode());}\n    if (this._stationCode) { url = url+makeParam(\"sta\", this.stationCode());}\n    if (this._locationCode) { url = url+makeParam(\"loc\", this.locationCode());}\n    if (this._channelCode) { url = url+makeParam(\"cha\", this.channelCode());}\n    if (this._startTime) { url = url+makeParam(\"starttime\", toIsoWoZ(this.startTime()));}\n    if (this._endTime) { url = url+makeParam(\"endtime\", toIsoWoZ(this.endTime()));}\n    if (this._quality) { url = url+makeParam(\"quality\", this.quality());}\n    if (this._minimumLength) { url = url+makeParam(\"minimumlength\", this.minimumLength());}\n    if (this._repository) { url = url+makeParam(\"repository\", this.repository());}\n    if (this._longestOnly) { url = url+makeParam(\"longestonly\", this.longestOnly());}\n    if (this._format) { url = url+makeParam(\"format\", this.format());}\n    if (this._nodata) { url = url+makeParam(\"nodata\", this.nodata());}\n\n    if (url.endsWith('&') || url.endsWith('?')) {\n      url = url.substr(0, url.length-1); // zap last & or ?\n    }\n    return url;\n  }\n}\n\n\nexport function createDataSelectQuery(params: Object): DataSelectQuery {\n  if ( ! params || typeof params !== 'object' ) {\n    throw new Error(\"params null or not an object\");\n  }\n  let out = new DataSelectQuery();\n  if (params.net) { out.networkCode(params.net); }\n  if (params.network) { out.networkCode(params.network); }\n  if (params.networkCode) { out.networkCode(params.networkCode); }\n  if (params.sta) { out.stationCode(params.sta); }\n  if (params.station) { out.stationCode(params.station); }\n  if (params.stationCode) { out.stationCode(params.stationCode); }\n  if (params.loc) { out.locationCode(params.loc); }\n  if (params.location) { out.locationCode(params.location); }\n  if (params.locationCode) { out.locationCode(params.locationCode); }\n  if (params.chan) { out.channelCode(params.chan); }\n  if (params.channel) { out.channelCode(params.channel); }\n  if (params.channelCode) { out.channelCode(params.channelCode); }\n  if (params.start) { out.startTime(params.start); }\n  if (params.starttime) { out.startTime(params.starttime); }\n  if (params.end) { out.endTime(params.end); }\n  if (params.endtime) { out.endTime(params.endtime); }\n  if (params.quality) { out.quality(params.quality); }\n  if (params.minimumlength) { out.minimumLength(params.minimumlength); }\n  if (params.repository) { out.repository(params.repository); }\n  if (params.longestonly) { out.longestOnly(params.longestonly); }\n  if (params.format) { out.format(params.format); }\n  if (params.nodata) { out.nodata(params.nodata); }\n  if (params.host) { out.host(params.host); }\n  if (params.port) { out.port(params.port); }\n  if (params.specVersion) { out.specVersion(params.specVersion); }\n  return out;\n}\n"],"names":["FORMAT_MINISEED","SERVICE_VERSION","SERVICE_NAME","IRIS_HOST","DataSelectQuery","constructor","host","_specVersion","_protocol","checkProtocol","isNonEmptyStringArg","_host","_port","_timeoutSec","specVersion","value","hasArgs","hasNoArgs","Error","protocol","isStringArg","nodata","_nodata","port","isNumArg","networkCode","_networkCode","stationCode","_stationCode","locationCode","_locationCode","channelCode","_channelCode","startTime","_startTime","checkStringOrDate","endTime","_endTime","timeWindow","se","quality","_quality","minimumLength","_minimumLength","longestOnly","_longestOnly","repository","_repository","format","_format","timeout","queryDataRecords","mythis","url","formURL","fetchInit","defaultFetchInitObj","miniseed","doFetchWithTimeout","then","response","status","ArrayBuffer","arrayBuffer","rawBuffer","dataRecords","querySeismograms","postQueryDataRecords","channelTimeList","postQueryRaw","fetchResponse","ok","ab","util","postQuerySeismograms","seisArray","ct","isDef","channel","codes","seis","find","s","seismogram","length","RSVP","hash","method","body","createPostBody","out","sta","station","net","network","toISOString","formBaseURL","colon","endsWith","formVersionURL","queryVersion","TEXT_MIME","text","makeParam","toIsoWoZ","substr","createDataSelectQuery","params","loc","location","chan","start","starttime","end","endtime","minimumlength","longestonly"],"mappings":"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"}