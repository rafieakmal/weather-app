{"version":3,"file":"fdsndatacenters.js","sources":["../../src/fdsndatacenters.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\n// special due to flow\nimport {checkProtocol, makeParam, isDef, hasArgs, hasNoArgs, isStringArg,\n        isNonEmptyStringArg, isNumArg} from './util';\n\nimport { TEXT_MIME, JSON_MIME , doFetchWithTimeout, defaultFetchInitObj} from './util.js';\n\nimport * as fdsnavailability from './fdsnavailability.js';\nimport * as fdsndataselect from './fdsndataselect.js';\nimport * as fdsnevent from './fdsnevent.js';\nimport * as fdsnstation from './fdsnstation.js';\n\n/** const for fdsn web service host, www.fdsn.org */\nexport const FDSN_HOST = \"www.fdsn.org\";\n\n/**\n * Query to a FDSN Data Centers Registry web service.\n *\n * @see http://www.fdsn.org/webservices/\n *\n * @param host optional host to connect to, defaults to FDSN\n */\nexport class DataCentersQuery {\n  /** @private */\n  _specVersion: number;\n  /** @private */\n  _protocol: string;\n  /** @private */\n  _host: string;\n  /** @private */\n  _nodata: number;\n  /** @private */\n  _port: number;\n  /** @private */\n  _name: string;\n  /** @private */\n  _services: string;\n  /** @private */\n  _includedatasets: boolean;\n  /** @private */\n  _timeoutSec: number;\n  constructor(host?: string) {\n    this._specVersion = 1;\n    this._protocol = checkProtocol();\n    if (isNonEmptyStringArg(host)) {\n      this._host = host;\n    } else {\n      this._host = FDSN_HOST;\n    }\n    this._port = 80;\n    this._timeoutSec = 30;\n  }\n  /** Gets/Sets the version of the fdsnws spec, 1 is currently the only value.\n   *  Setting this is probably a bad idea as the code may not be compatible with\n   *  the web service.\n   *\n   * @param value optional new value if setting\n   * @returns the query when setting, the current value os services if no arguments\n   */\n  specVersion(value?: number): number | DataCentersQuery {\n    if (hasArgs(value)) {\n      this._specVersion = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._specVersion;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Gets/Sets the protocol, http or https. This should match the protocol\n   *  of the page loaded, but is autocalculated and generally need not be set.\n   *\n   * @param value optional new value if setting\n   * @returns the query when setting, the current value os services if no arguments\n   */\n  protocol(value?: string): string | DataCentersQuery {\n    if (isStringArg(value)) {\n      this._protocol = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._protocol;\n    } else {\n      throw new Error('value argument is optional or string, but was '+typeof value);\n    }\n  }\n  /** Gets/Sets the remote host to connect to. This defaults to\n   * www.fdsn.org and generally should not be set.\n   *\n   * @param value optional new value if setting\n   * @returns the query when setting, the current value os services if no arguments\n   */\n  host(value?: string): string | DataCentersQuery {\n    if (isStringArg(value)) {\n      this._host = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._host;\n    } else {\n      throw new Error('value argument is optional or string, but was '+typeof value);\n    }\n  }\n  /** Gets/Sets the remote port to connect to. This defaults to\n   * the standard port for the protocol and generally should not be set.\n   *\n   * @param value optional new value if setting\n   * @returns the query when setting, the current value os services if no arguments\n   */\n  port(value?: number): number | DataCentersQuery {\n    if (hasNoArgs(value)) {\n      return this._port;\n    } else if (hasArgs(value)) {\n      this._port = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /**\n   * limits results to the named data center, default is all data centers\n   *\n   * @param   value names to search for\n   * @returns the query when setting, the current value os services if no arguments\n   */\n  name(value?: string): string | DataCentersQuery {\n    if (isStringArg(value)) {\n      this._name = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._name;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * limits results to services that match the glob style pattern\n   *\n   * @param  value glob style pattern to match against\n   * @returns the query when setting, the current value os services if no arguments\n   */\n  services(value?: string): string | DataCentersQuery {\n    if (isStringArg(value)) {\n      this._services = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._services;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * whether the results include detailed information about\n   * the data sets offered by each center, default is false\n   *\n   * @param  value true to include datasets\n   * @returns the query when setting, the current value os services if no arguments\n   */\n  includeDataSets(value?: boolean): boolean | DataCentersQuery {\n    if (hasNoArgs(value)) {\n      return this._includedatasets;\n    } else if (hasArgs(value)) {\n      this._includedatasets = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or boolean, but was '+typeof value);\n    }\n  }\n\n   /** Get/Set the timeout in seconds for the request. Default is 30.\n    *\n    * @param  value timeout seconds\n    * @returns the query when setting, the current value os services if no arguments\n    */\n  timeout(value?: number): number | DataCentersQuery {\n    if (hasNoArgs(value)) {\n      return this._timeoutSec;\n    } else if (isNumArg(value)) {\n      this._timeoutSec = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n\n  /**\n   * queries the fdsn registry web service, returning the result as a parsed json object.\n   *\n   * @returns Promise to the json object.\n   */\n  queryJson(): Promise<RootType> {\n    const url = this.formURL();\n    const fetchInit = defaultFetchInitObj(JSON_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n      .then(function(response) {\n        let contentType = response.headers.get('content-type');\n        if(isNonEmptyStringArg(contentType) && contentType.includes(JSON_MIME)) {\n          return response.json();\n        }\n        // $FlowFixMe\n        throw new TypeError(`Oops, we did not get JSON! ${contentType}`);\n      });\n  }\n\n   /**\n    * queries the registry to find fdsn availability compatible web services within\n    * a datacenter of the given name, optionally within the repository with\n    * the repo name.\n    *\n    * @param   name     datacenter name\n    * @param   repoName optional repository name\n    * @returns           Promise to Array of fdsnavailability.AvailabilityQuery objects\n    */\n  findFdsnAvailability(name: string, repoName?: string): Promise<Array<fdsnavailability.AvailabilityQuery>> {\n    if (name && name.length > 0) {\n      this.name(name);\n    }\n    this.services(fdsnavailability.SERVICE_NAME);\n    return this.queryJson().then(json => {\n      let out = this.extractCompatibleServices(json, fdsnavailability.SERVICE_NAME, repoName);\n      return out.map(service => {\n        let url = new URL(service.url);\n        let q = new fdsnavailability.AvailabilityQuery(url.hostname);\n        if (url.port && url.port.length > 0) {q.port(Number.parseInt(url.port));}\n        return q;\n      });\n    });\n  }\n\n   /**\n    * queries the registry to find fdsn dataselect compatible web services within\n    * a datacenter of the given name, optionally within the repository with\n    * the repo name.\n    *\n    * @param   name     datacenter name\n    * @param   repoName optional repository name\n    * @returns           Promise to Array of fdsndataselect.DataSelectQuery objects\n    */\n  findFdsnDataSelect(name: string, repoName?: string): Promise<Array<fdsndataselect.DataSelectQuery>> {\n    if (name && name.length > 0) {\n      this.name(name);\n    }\n    this.services(fdsndataselect.SERVICE_NAME);\n    return this.queryJson().then(json => {\n      let out = this.extractCompatibleServices(json, fdsndataselect.SERVICE_NAME, repoName);\n      return out.map(service => {\n        let url = new URL(service.url);\n        let q = new fdsndataselect.DataSelectQuery(url.hostname);\n        if (url.port && url.port.length > 0) {q.port(Number.parseInt(url.port));}\n        return q;\n      });\n    });\n  }\n\n  /**\n   * queries the registry to find a fdsn event compatible web services within\n   * a datacenter of the given name, optionally within the repository with\n   * the repo name.\n   *\n   * @param   dcname     datacenter name\n   * @param   repoName optional repository name\n   * @returns           Promise to Array of fdsnevent.EventQuery objects\n   */\n  findFdsnEvent(dcname: string, repoName?: string ): Promise<Array<fdsnevent.EventQuery>> {\n    if (dcname && dcname.length > 0) {\n      this.name(dcname);\n    }\n    this.services(fdsnevent.SERVICE_NAME);\n    return this.queryJson().then(json => {\n      let out = this.extractCompatibleServices(json, fdsnevent.SERVICE_NAME, repoName);\n      return out.map(service => {\n        let url = new URL(service.url);\n        let q = new fdsnevent.EventQuery(url.hostname);\n        if (url.port && url.port.length > 0) {q.port(Number.parseInt(url.port));}\n        return q;\n      });\n    });\n  }\n\n   /**\n    * queries the registry to find a fdsn station compatible web services within\n    * a datacenter of the given name, optionally within the repository with\n    * the repo name.\n    *\n    * @param   dcname     datacenter name\n    * @param   repoName optional repository name\n    * @returns           Promise to Array of fdsnstation.StationQuery objects\n    */\n  findFdsnStation(dcname: string, repoName?: string ): Promise<Array<fdsnstation.StationQuery>> {\n    if (dcname && dcname.length > 0) {\n      this.name(dcname);\n    }\n    this.services(fdsnstation.SERVICE_NAME);\n    return this.queryJson().then(json => {\n      let out = this.extractCompatibleServices(json, fdsnstation.SERVICE_NAME, repoName);\n      return out.map(service => {\n        let url = new URL(service.url);\n        let q = new fdsnstation.StationQuery(url.hostname);\n        if (url.port && url.port.length > 0) {q.port(Number.parseInt(url.port));}\n        return q;\n      });\n    });\n  }\n\n/**\n * Extracts services comaptible with the given service name, optionally within\n * the given repository, from the json.\n *\n * @param   json           json containing services\n * @param   compatibleName service name to be compatible with\n * @param   repoName       optional repository within the json to search\n * @returns                array of services found\n */\n  extractCompatibleServices( json: RootType, compatibleName: string, repoName?: string): Array<any> {\n    let out = [];\n    json.datacenters.forEach( dc => {\n      dc.repositories.forEach( repo => {\n        if ( ! isDef(repoName) || repoName === repo.name) {\n          repo.services.forEach( service => {\n            if (service.name === compatibleName || (\n                isDef(service.compatibleWith) && service.compatibleWith.includes(compatibleName)) ) {\n              out.push(service);\n            }\n          });\n        }\n      });\n    });\n    return out;\n  }\n\n/**\n * Forms the base of the url for accessing the datacenters service.\n *\n * @returns         URL\n */\n  formBaseURL(): string {\n      let colon = \":\";\n      if (this._protocol.endsWith(colon)) {\n        colon = \"\";\n      }\n      return this._protocol+colon+\"//\"+this._host+(this._port===80?\"\":(\":\"+this._port))+\"/ws/datacenters/\"+this._specVersion;\n  }\n\n  /**\n   * Forms version url, not part of spec and so may not be supported.\n   *\n   * @returns         version\n   */\n  formVersionURL(): string {\n    return this.formBaseURL()+\"/version\";\n  }\n\n  /** Queries the remote web service to get its version\n   *\n   * @returns Promise to version string\n   */\n  queryVersion(): Promise<string> {\n    let url = this.formVersionURL();\n    const fetchInit = defaultFetchInitObj(TEXT_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n      .then(response => {\n          if (response.status === 200) {\n            return response.text();\n          } else {\n            throw new Error(`Status not 200: ${response.status}`);\n          }\n      });\n  }\n\n\n  /**\n   * forms a url to the fdsn registry based on the configured parameters.\n   *\n   * @returns the url\n   */\n  formURL(): string {\n    const method = \"query\";\n    let url = this.formBaseURL()+`/${method}?`;\n    if (this._name) { url = url+makeParam(\"name\", this.name());}\n    if (this._services) { url = url+makeParam(\"services\", this.services());}\n    if (this._includedatasets) { url = url+makeParam(\"includedatasets\", this.includeDataSets());}\n\n    if (url.endsWith('&') || url.endsWith('?')) {\n      url = url.substr(0, url.length-1); // zap last & or ?\n    }\n    return url;\n  }\n}\n\n\n\n/* original json schema from\nhttps://github.com/FDSN/datacenter-registry\n\n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"id\": \"http://www.fdsn.org/schemas/FDSN-datacenter-registry-1.0.schema.json\",\n    \"description\": \"Data center registry exchange format\",\n    \"definitions\": {\n        \"services\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"additionalProperties\": false,\n                \"required\": [\"name\"],\n                \"properties\": {\n                    \"name\": {\n                        \"description\": \"Service name (no white space)\",\n                        \"type\": \"string\",\n                        \"pattern\": \"^[-_a-zA-Z0-9]+$\"\n                    },\n                    \"description\": {\n                        \"description\": \"Description of service\",\n                        \"type\": \"string\"\n                    },\n                    \"url\": {\n                        \"description\": \"URL to web service, ideally with documentation\",\n                        \"type\": \"string\",\n                        \"format\": \"uri\"\n                    },\n                    \"compatibleWith\": {\n                        \"description\": \"Description of service compatibility with a standard or alternate service (e.g. fdsnws-dataselect, fdsnws-station, fdsnws-event)\",\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\"version\", \"datacenters\"],\n    \"properties\": {\n        \"version\": {\n            \"description\": \"Data center registry message format version\",\n            \"const\": 1.0\n        },\n        \"datacenters\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"additionalProperties\": false,\n                \"required\": [\n                    \"name\",\n                    \"website\"\n                ],\n                \"properties\": {\n                    \"name\": {\n                        \"description\": \"Data center name (no white space)\",\n                        \"type\": \"string\",\n                        \"pattern\": \"^[-_a-zA-Z0-9]+$\"\n                    },\n                    \"website\": {\n                        \"description\": \"URL to data center website\",\n                        \"type\": \"string\",\n                        \"format\": \"uri\"\n                    },\n                    \"fullName\": {\n                        \"description\": \"Full name of data center\",\n                        \"type\": \"string\"\n                    },\n                    \"summary\": {\n                        \"description\": \"Summary of data center\",\n                        \"type\": \"string\"\n                    },\n                    \"repositories\": {\n                        \"description\": \"Repositories of data center\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": false,\n                            \"required\": [\"name\"],\n                            \"properties\": {\n                                \"name\": {\n                                    \"description\": \"Repository name (no white space)\",\n                                    \"type\": \"string\",\n                                    \"pattern\": \"^[-_a-zA-Z0-9]+$\"\n                                },\n                                \"description\": {\n                                    \"description\": \"Description of repository\",\n                                    \"type\": \"string\"\n                                },\n                                \"website\": {\n                                    \"description\": \"URL to repository website\",\n                                    \"type\": \"string\",\n                                    \"format\": \"uri\"\n                                },\n                                \"services\": {\"$ref\": \"#/definitions/services\"},\n                                \"datasets\": {\n                                    \"description\": \"Data sets offered by the data center\",\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"object\",\n                                        \"additionalProperties\": false,\n                                        \"properties\": {\n                                            \"network\": {\"type\": \"string\"},\n                                            \"station\": {\"type\": \"string\"},\n                                            \"location\": {\"type\": \"string\"},\n                                            \"channel\": {\"type\": \"string\"},\n                                            \"starttime\": {\n                                                \"type\": \"string\",\n                                                \"format\": \"date-time\"\n                                            },\n                                            \"endtime\": {\n                                                \"type\": \"string\",\n                                                \"format\": \"date-time\"\n                                            },\n                                            \"priority\": {\n                                                \"description\": \"Priority of data center for this data set, with 1 being highest\",\n                                                \"type\": \"integer\"\n                                            },\n                                            \"description\": {\n                                                \"description\": \"Description of data set\",\n                                                \"type\": \"string\"\n                                            },\n                                            \"url\": {\n                                                \"description\": \"URL to data set or summary page\",\n                                                \"type\": \"string\",\n                                                \"format\": \"uri\"\n                                            },\n                                            \"services\": {\n                                                \"description\": \"Services for this data set, overriding repository service declarations\",\n                                                \"$ref\": \"#/definitions/services\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n */\n\n/* The below are slighly modified from json schema to flow autogenerator.\n*\n* */\n\n/**\n * Root type of fdsn datacenters json query.\n */\nexport type RootType = {\n  version: Object,\n  datacenters: Array<{\n    name: string,\n    website: string,\n    fullName?: string,\n    summary?: string,\n    repositories: Array<Repository>\n  }>\n} & Object;\nexport type Repository = {\n  name: string,\n  description?: string,\n  website?: string,\n  services: Array<Service>,\n  datasets?: Array<Dataset>\n};\nexport type Dataset = {\n  network?: string,\n  station?: string,\n  location?: string,\n  channel?: string,\n  starttime?: string,\n  endtime?: string,\n  priority?: number,\n  description?: string,\n  url?: string,\n  services?: Array<Service>\n};\nexport type Service = {\n  name: string,\n  description?: string,\n  url?: string,\n  compatibleWith?: string\n};\n"],"names":["FDSN_HOST","DataCentersQuery","constructor","host","_specVersion","_protocol","checkProtocol","isNonEmptyStringArg","_host","_port","_timeoutSec","specVersion","value","hasArgs","hasNoArgs","Error","protocol","isStringArg","port","name","_name","services","_services","includeDataSets","_includedatasets","timeout","isNumArg","queryJson","url","formURL","fetchInit","defaultFetchInitObj","JSON_MIME","doFetchWithTimeout","then","response","contentType","headers","get","includes","json","TypeError","findFdsnAvailability","repoName","length","fdsnavailability","out","extractCompatibleServices","map","service","URL","q","hostname","Number","parseInt","findFdsnDataSelect","fdsndataselect","findFdsnEvent","dcname","fdsnevent","findFdsnStation","fdsnstation","compatibleName","datacenters","forEach","dc","repositories","repo","isDef","compatibleWith","push","formBaseURL","colon","endsWith","formVersionURL","queryVersion","TEXT_MIME","status","text","method","makeParam","substr"],"mappings":"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"}