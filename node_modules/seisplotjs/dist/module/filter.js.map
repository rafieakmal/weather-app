{"version":3,"file":"filter.js","sources":["../../src/filter.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport {Seismogram } from './seismogram.js';\nimport {InstrumentSensitivity} from './stationxml.js';\nimport {OregonDSP} from './oregondsputil.js';\nimport {isDef} from './util.js';\n\n\nconst CenteredHilbertTransform = OregonDSP.filter.fir.equiripple.CenteredHilbertTransform;\n\n\n/**\n * Constant for bandpass OregonDSP filter creation.\n */\nexport const BAND_PASS = OregonDSP.filter.iir.PassbandType.BANDPASS;\n/**\n * Constant for lowpass OregonDSP filter creation.\n */\nexport const LOW_PASS = OregonDSP.filter.iir.PassbandType.LOWPASS;\n/**\n * Constant for highpass OregonDSP filter creation.\n */\nexport const HIGH_PASS = OregonDSP.filter.iir.PassbandType.HIGHPASS;\n\nexport function amplitude(real: number, imag: number) {\n  return Math.hypot(real, imag);\n}\n\n/**\n * Remove the mean from a seismogram. Subtract the mean from each data point.\n *\n * @param   seis input seismogram\n * @returns       seismogram with mean of zero\n */\nexport function rMean(seis: Seismogram): Seismogram {\n  if (seis instanceof Seismogram) {\n    let meanVal = seis.mean();\n    let rmeanSeismogram = new Seismogram(seis.segments.map(s =>{\n        let demeanY = s.y.map(function(d) {\n          return d-meanVal;\n        });\n        let out = s.cloneWithNewData(demeanY);\n        return out;\n      }));\n    return rmeanSeismogram;\n  } else {\n    throw new Error(\"rMean arg not a Seismogram\");\n  }\n}\n\n/**\n * Apply the frequency independent overall gain to a seismogram. This does not\n * do a full transfer using poles and zero, this only applies the scalar conversion\n * factor to convert counts back to original real world units and update the units.\n *\n * @param   seis                  the seismogram to correct\n * @param   instrumentSensitivity overall gain object, usually pulled from stationxml\n * @returns                        new seismogram with original units, like m/s and gain applied.\n */\nexport function gainCorrect(seis: Seismogram, instrumentSensitivity: InstrumentSensitivity): Seismogram {\n  if (seis instanceof Seismogram) {\n    let gain = instrumentSensitivity.sensitivity;\n    let gainSeismogram = new Seismogram(seis.segments.map(s => {\n      let gainY;\n      if ( s.y instanceof Int32Array || s.y instanceof Float32Array) {\n        gainY = Float32Array.from(s.y);\n      } else {\n        gainY = Float64Array.from(s.y);\n      }\n      gainY = gainY.map(function(d) {\n        return d/gain;\n      });\n      let outS = s.cloneWithNewData(gainY);\n      outS.yUnit = instrumentSensitivity.inputUnits;\n      return outS;\n      }));\n    return gainSeismogram;\n  } else {\n      throw new Error(`Expected Seismogram but was ${typeof seis}`);\n  }\n}\n\nexport type MinMaxMean = {\n  min: number;\n  max: number;\n  mean: number;\n};\n\n\n/**\n * Creates a Butterworth IIR filter using the OregonDSP library.\n *\n * @param   numPoles       number of poles\n * @param   passband       type, use constants of BAND_PASS, LOW_PASS, HIGH_PASS\n * @param   lowFreqCorner  low corner frequency\n * @param   highFreqCorner high corner frequency\n * @param   delta          delta, period, of timeseries\n * @returns                 Butterworth IIR filter\n */\nexport function createButterworth(numPoles: number,\n                                  passband: string,\n                                  lowFreqCorner: number,\n                                  highFreqCorner: number,\n                                  delta: number) {\n  return new OregonDSP.filter.iir.Butterworth(numPoles,\n                                     passband,\n                                     lowFreqCorner,\n                                     highFreqCorner,\n                                     delta);\n}\n\n/**\n * Creates a Chebyshev I IIR filter using the OregonDSP library.\n *\n * @param   numPoles       number of poles\n * @param   epsilon        Chebyshev epsilon value\n * @param   passband       type, use constants of BAND_PASS, LOW_PASS, HIGH_PASS\n * @param   lowFreqCorner  low corner frequency\n * @param   highFreqCorner high corner frequency\n * @param   delta          delta, period, of timeseries\n * @returns                 Chebyshev I IIR filter\n */\nexport function createChebyshevI(numPoles: number,\n                                  epsilon: number,\n                                  passband: string,\n                                  lowFreqCorner: number,\n                                  highFreqCorner: number,\n                                  delta: number) {\n  return new OregonDSP.filter.iir.ChebyshevI(numPoles,\n                                    epsilon,\n                                    passband,\n                                    lowFreqCorner,\n                                    highFreqCorner,\n                                    delta);\n}\n\n/**\n * Creates a Chebyshev II IIR filter using the OregonDSP library.\n *\n * @param   numPoles       number of poles\n * @param   epsilon        Chebyshev epsilon value\n * @param   passband       type, use constants of BAND_PASS, LOW_PASS, HIGH_PASS\n * @param   lowFreqCorner  low corner frequency\n * @param   highFreqCorner high corner frequency\n * @param   delta          delta, period, of timeseries\n * @returns                 Chebyshev II IIR filter\n */\nexport function createChebyshevII(numPoles: number,\n                                  epsilon: number,\n                                  passband: string,\n                                  lowFreqCorner: number,\n                                  highFreqCorner: number,\n                                  delta: number) {\n  return new OregonDSP.filter.iir.ChebyshevII(numPoles,\n                                     epsilon,\n                                     passband,\n                                     lowFreqCorner,\n                                     highFreqCorner,\n                                     delta);\n}\n\n/**\n * Applies the filter to the given seismogram.\n *\n * @param   iirFilter filter to apply\n * @param   seis      seismogram to apply filter to\n * @returns            filtered seismogram\n */\nexport function applyFilter(iirFilter: OregonDSP.filter.iir.IIRFilter, seis: Seismogram): Seismogram {\n  let filteredSegments = [];\n  for(let i=0; i<seis.segments.length; i++) {\n    let outData = Float32Array.from(seis.segments[i].y);\n    iirFilter.filterInPlace(outData);\n    filteredSegments.push(seis.segments[i].cloneWithNewData(outData));\n  }\n  return new Seismogram(filteredSegments);\n}\n\n\n/**\n * Calculates the envelope, y_i = sqrt( y_i * y_i + h_i * h_i)\n *  where h is the hilber transform of y. The default configuration\n *  for the hilbet transform is n=100, lowEdge=.05 and highEdge = 0.95\n *\n * @param seis seismogram to apply envelope to\n * @returns seismogram cloned but with data as the envelope\n */\nexport function envelope(seis: Seismogram): Seismogram {\n  if (seis.isContiguous()) {\n    let seisY = seis.y;\n    let s = hilbert(seis);\n    let hilbertY = s.y;\n    let outY;\n    if ( seis.y instanceof Int32Array || seis.y instanceof Float32Array) {\n      outY = new Float32Array(seisY.length);\n    } else {\n      outY = new Float64Array(seisY.length);\n    }\n    for(let n=0; n<seisY.length; n++) {\n      outY[n] = Math.sqrt(hilbertY[n]*hilbertY[n] + seisY[n]*seisY[n]);\n    }\n    return seis.cloneWithNewData(outY);\n  } else {\n    throw new Error(\"Cannot take envelope of non-contiguous seismogram\");\n  }\n}\n\n/**\n * Calculates the hilbert transform using the OregonDSP library\n *  with default number of points, n=10 (to yield a 21 pt FIR transform)\n *  and default low and high edge of 0.05 and 0.95. Low and high edge are\n *  given normalized 0 to 1.\n *\n * @param seis seismogram to calculate from\n * @param n optional number of points in transform, default is 10\n * @param lowEdge low edge of filter, normailized to 0-1, default is 0.05\n * @param highEdge high edge of filter, normailized to 0-1, default is 0.95\n * @returns hilbert transformed data\n *\n */\nexport function hilbert(seis: Seismogram, n?: number, lowEdge?: number, highEdge?: number ): Seismogram {\n  if (seis.isContiguous()) {\n    let seisY = seis.y;\n    if (! isDef(n)) { n = 10;}\n    if (! isDef(lowEdge)) { lowEdge = .05;}\n    if (! isDef(highEdge)) { highEdge = .95;}\n    let hilbert = new CenteredHilbertTransform(n, lowEdge, highEdge);\n    let coeff = hilbert.getCoefficients();\n    for (let c of coeff) {\n      if ( Number.isNaN(c)) {\n        throw new Error(`Hilbert FIR coeff includes NaN: ${coeff.join()}`);\n      }\n    }\n    let hilbertY = hilbert.filter(seisY);\n    let s = seis.cloneWithNewData(hilbertY);\n    return s;\n  } else {\n    throw new Error(\"Cannot take hilbert of non-contiguous seismogram\");\n  }\n}\n"],"names":["CenteredHilbertTransform","OregonDSP","filter","fir","equiripple","BAND_PASS","iir","PassbandType","BANDPASS","LOW_PASS","LOWPASS","HIGH_PASS","HIGHPASS","amplitude","real","imag","Math","hypot","rMean","seis","Seismogram","meanVal","mean","rmeanSeismogram","segments","map","s","demeanY","y","d","out","cloneWithNewData","Error","gainCorrect","instrumentSensitivity","gain","sensitivity","gainSeismogram","gainY","Int32Array","Float32Array","from","Float64Array","outS","yUnit","inputUnits","createButterworth","numPoles","passband","lowFreqCorner","highFreqCorner","delta","Butterworth","createChebyshevI","epsilon","ChebyshevI","createChebyshevII","ChebyshevII","applyFilter","iirFilter","filteredSegments","i","length","outData","filterInPlace","push","envelope","isContiguous","seisY","hilbert","hilbertY","outY","n","sqrt","lowEdge","highEdge","isDef","coeff","getCoefficients","c","Number","isNaN","join"],"mappings":"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"}