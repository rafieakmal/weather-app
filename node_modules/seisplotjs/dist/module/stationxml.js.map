{"version":3,"file":"stationxml.js","sources":["../../src/stationxml.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport { StartEndDuration, isObject, isDef, isStringArg, isNonEmptyStringArg,\n         isNumArg, checkStringOrDate, stringify} from './util';\nimport {Complex, createComplex} from './oregondsputil.js';\n\nimport moment from 'moment';\n\n/** xml namespace for stationxml */\nexport const STAML_NS = 'http://www.fdsn.org/xml/station/1';\n\n\n// StationXML classes\n\nexport class Network {\n  networkCode: string;\n  _startDate: moment;\n  _endDate: moment;\n  restrictedStatus: string;\n  description: string;\n  totalNumberStations: number;\n  stations: Array<Station>;\n  constructor(networkCode: string) {\n    this.networkCode = networkCode;\n    this.stations = [];\n  }\n  get startDate() {\n    return this._startDate;\n  }\n  set startDate(value?: moment | string) {\n    this._startDate = checkStringOrDate(value);\n  }\n  get endDate() {\n    return this._endDate;\n  }\n  set endDate(value?: moment | string) {\n    this._endDate = checkStringOrDate(value);\n  }\n  get timeRange(): StartEndDuration {\n    return new StartEndDuration(this.startDate, this.endDate);\n  }\n  codes(): string {\n    return this.networkCode;\n  }\n  isTempNet(): boolean {\n    const first = this.networkCode.charAt(0);\n    return first === 'X' || first === 'Y' || first === 'Z' || (first >= '0' && first <= '9');\n  }\n}\n\nexport class Station {\n  network: Network;\n  stationCode: string;\n    /** @private */\n  _startDate: moment;\n    /** @private */\n  _endDate: moment;\n  restrictedStatus: string;\n  name: string;\n  latitude: number;\n  longitude: number;\n  elevation: number;\n  channels: Array<Channel>;\n  constructor(network: Network, stationCode: string) {\n    this.network = network;\n    this.stationCode = stationCode;\n    this.channels = [];\n  }\n  get startDate(): moment {\n    return this._startDate;\n  }\n  set startDate(value?: moment | string) {\n    this._startDate = checkStringOrDate(value);\n  }\n  get endDate(): moment {\n    return this._endDate;\n  }\n  set endDate(value?: moment | string) {\n    this._endDate = checkStringOrDate(value);\n  }\n  get timeRange(): StartEndDuration {\n    return new StartEndDuration(this.startDate, this.endDate);\n  }\n  get networkCode(): string {\n    return this.network.networkCode;\n  }\n  codes(): string {\n    return this.network.codes()+\".\"+this.stationCode;\n  }\n}\n\nexport class Channel {\n  station: Station;\n    /** @private */\n  _locationCode: string;\n  channelCode: string;\n    /** @private */\n  _startDate: moment;\n    /** @private */\n  _endDate: moment;\n  restrictedStatus: string;\n  latitude: number;\n  longitude: number;\n  elevation: number;\n  depth: number;\n  azimuth: number;\n  dip: number;\n  sampleRate: number;\n  response: Response;\n  constructor(station: Station, channelCode: string, locationCode: string) {\n    this.station = station;\n    if (channelCode.length !== 3) {\n      throw new Error(`Channel code must be 3 chars: ${channelCode}`);\n    }\n    this.channelCode = channelCode;\n    this.locationCode = locationCode;\n    if (! locationCode) {\n      // make sure \"null\" is encoded as empty string\n      this.locationCode = '';\n    }\n    if ( ! (this.locationCode.length === 2 || this.locationCode.length === 0)) {\n      throw new Error(`locationCode must be 2 chars, or empty: \"${locationCode}\"`);\n    }\n  }\n  get startDate() {\n    return this._startDate;\n  }\n  set startDate(value?: moment | string) {\n    this._startDate = checkStringOrDate(value);\n  }\n  get endDate() {\n    return this._endDate;\n  }\n  set endDate(value?: moment | string) {\n    this._endDate = checkStringOrDate(value);\n  }\n  get timeRange(): StartEndDuration {\n    return new StartEndDuration(this.startDate, this.endDate);\n  }\n  get locationCode() {\n    return this._locationCode;\n  }\n  set locationCode(value: string) {\n    this._locationCode = value;\n    if (! value) {\n      // make sure \"null\" is encoded as empty string\n      this._locationCode = '';\n    }\n  }\n  get stationCode(): string {\n    return this.station.stationCode;\n  }\n  get networkCode(): string {\n    return this.station.networkCode;\n  }\n  /**\n   * Checks if this channel has sensitivity defined, within the response.\n   *\n   * @returns          true if instrumentSensitivity exits\n   */\n  hasInstrumentSensitivity(): boolean {\n    return isDef(this.response) && isDef(this.response.instrumentSensitivity);\n  }\n  set instrumentSensitivity(value: InstrumentSensitivity) {\n    if (typeof this.response === 'undefined') {\n      this.response = new Response(value);\n    } else {\n      this.response.instrumentSensitivity = value;\n    }\n  }\n  get instrumentSensitivity(): InstrumentSensitivity {\n    if (this.response) {\n      return this.response.instrumentSensitivity;\n    } else {\n      throw new Error(\"no Response or InstrumentSensitivity defined\");\n    }\n  }\n\n  codes(): string {\n    return this.station.codes()+\".\"+this.locationCode+\".\"+this.channelCode;\n  }\n}\n\nexport class InstrumentSensitivity {\n  sensitivity: number;\n  frequency: number;\n  inputUnits: string;\n  outputUnits: string;\n  constructor(sensitivity: number, frequency: number, inputUnits: string, outputUnits: string) {\n    this.sensitivity = sensitivity;\n    this.frequency = frequency;\n    this.inputUnits = inputUnits;\n    this.outputUnits = outputUnits;\n  }\n}\n\nexport class Response {\n  instrumentSensitivity: InstrumentSensitivity;\n  stages: Array<Stage>;\n  constructor(instrumentSensitivity?: InstrumentSensitivity, stages?: Array<Stage>) {\n    if (instrumentSensitivity) {\n      this.instrumentSensitivity = instrumentSensitivity;\n    }\n    if (stages) {\n      this.stages = stages;\n    }\n  }\n}\n\nexport class Stage {\n  filter: AbstractFilterType | null;\n  decimation: Decimation | null;\n  gain: Gain;\n  constructor(filter: AbstractFilterType | null, decimation: Decimation | null, gain: Gain) {\n    this.filter = filter;\n    this.decimation = decimation;\n    this.gain = gain;\n  }\n}\n\nexport class AbstractFilterType {\n  inputUnits: string;\n  outputUnits: string;\n  name: string;\n  description: string;\n  constructor(inputUnits: string, outputUnits: string) {\n    this.inputUnits = inputUnits;\n    this.outputUnits = outputUnits;\n  }\n}\nexport class PolesZeros extends AbstractFilterType {\n  pzTransferFunctionType: string;\n  normalizationFactor: number;\n  normalizationFrequency: number;\n  zeros: Array<Complex>;\n  poles: Array<Complex>;\n  constructor(inputUnits: string, outputUnits: string) {\n    super(inputUnits, outputUnits);\n  }\n}\n\nexport class FIR extends AbstractFilterType {\n  symmetry: string;\n  numerator: Array<number>;\n  constructor(inputUnits: string, outputUnits: string) {\n    super(inputUnits, outputUnits);\n  }\n}\n\nexport class CoefficientsFilter extends AbstractFilterType {\n  cfTransferFunction: string;\n  numerator: Array<number>;\n  denominator: Array<number>;\n  constructor(inputUnits: string, outputUnits: string) {\n    super(inputUnits, outputUnits);\n  }\n}\n\nexport class Decimation {\n  inputSampleRate: number;\n  factor: number;\n  offset: ?number;\n  delay: ?number;\n  correction: ?number;\n}\n\nexport class Gain {\n  value: number;\n  frequency: number;\n}\n\n/**\n * Parses the FDSN StationXML returned from a query.\n *\n * @param rawXml parsed xml to extract objects from\n * @returns an Array of Network objects.\n */\nexport function parseStationXml(rawXml: Document): Array<Network> {\n    let top = rawXml.documentElement;\n    if (! top) {throw new Error(\"No documentElement in XML\");}\n    let netArray = top.getElementsByTagNameNS(STAML_NS, \"Network\");\n    let out = [];\n    for (let n of netArray) {\n      out.push(convertToNetwork(n));\n    }\n    return out;\n  }\n\n  /** Parses a FDSNStationXML Network xml element into a Network object.\n   *\n   * @param xml the network xml Element\n   * @returns Network instance\n   */\nexport function convertToNetwork(xml: Element): Network {\n    const netCode = _grabAttribute(xml, \"code\");\n    if (! isNonEmptyStringArg(netCode)) {throw new Error(\"network code missing in network!\");}\n    let out = new Network(netCode);\n    out.startDate = _grabAttribute(xml, \"startDate\");\n    const rs = _grabAttribute(xml, \"restrictedStatus\");\n    if (isNonEmptyStringArg(rs)) { out.restrictedStatus = rs; }\n    const desc = _grabFirstElText(xml, 'Description');\n    if (isNonEmptyStringArg(desc)) {out.description = desc;}\n    if (_grabAttribute(xml, \"endDate\")) {\n      out.endDate = _grabAttribute(xml, \"endDate\");\n    }\n    let totSta = xml.getElementsByTagNameNS(STAML_NS, \"TotalNumberStations\");\n    if (totSta && totSta.length >0) {\n      out.totalNumberStations = parseInt(_grabFirstElText(xml, \"TotalNumberStations\"));\n    }\n    let staArray = xml.getElementsByTagNameNS(STAML_NS, \"Station\");\n    let stations = [];\n    for (let s of staArray) {\n      stations.push(convertToStation(out, s));\n    }\n    out.stations = stations;\n    return out;\n  }\n  /**\n   * Parses a FDSNStationXML Station xml element into a Station object.\n   *\n   * @param network the containing network\n   * @param xml the station xml Element\n   * @returns Station instance\n   */\nexport function convertToStation(network: Network, xml: Element): Station {\n    let staCode = _grabAttribute(xml, \"code\");\n    if (! isNonEmptyStringArg(staCode)) {throw new Error(\"station code missing in station!\");}\n    let out = new Station(network, staCode);\n    out.startDate = _grabAttribute(xml, \"startDate\");\n    const rs = _grabAttribute(xml, \"restrictedStatus\");\n    if (isNonEmptyStringArg(rs)) { out.restrictedStatus = rs; }\n    const lat =  _grabFirstElFloat(xml, 'Latitude');\n    if (isNumArg(lat)) {out.latitude = lat;}\n    const lon = _grabFirstElFloat(xml, 'Longitude');\n    if (isNumArg(lon)) {out.longitude = lon;}\n    const elev = _grabFirstElFloat(xml, 'Elevation');\n    if (isNumArg(elev)) {out.elevation = elev;}\n    const name = _grabFirstElText(_grabFirstEl(xml, 'Site'), 'Name');\n    if (isStringArg(name)) {out.name = name;}\n    const endDate = _grabAttribute(xml, \"endDate\");\n    if (isDef(endDate)) {out.endDate = _grabAttribute(xml, \"endDate\"); }\n    let chanArray = xml.getElementsByTagNameNS(STAML_NS, \"Channel\");\n    let channels = [];\n    for (let c of chanArray) {\n      channels.push(convertToChannel(out, c));\n    }\n    out.channels = channels;\n    return out;\n  }\n  /**\n   * Parses a FDSNStationXML Channel xml element into a Channel object.\n   *\n   * @param station the containing staton\n   * @param xml the channel xml Element\n   * @returns Channel instance\n   */\nexport function convertToChannel(station: Station, xml: Element): Channel {\n    let locCode = _grabAttribute(xml, \"locationCode\");\n    if (! isNonEmptyStringArg(locCode)) {locCode = '';}\n    let chanCode = _grabAttribute(xml, \"code\");\n    if (! isNonEmptyStringArg(chanCode)) {throw new Error(\"channel code missing in channel!\");}\n\n    let out = new Channel(station, chanCode, locCode);\n    out.startDate = _grabAttribute(xml, \"startDate\");\n    const rs = _grabAttribute(xml, \"restrictedStatus\");\n    if (isNonEmptyStringArg(rs)) { out.restrictedStatus = rs; }\n\n    const lat =  _grabFirstElFloat(xml, 'Latitude');\n    if (isNumArg(lat)) {out.latitude = lat;}\n    const lon = _grabFirstElFloat(xml, 'Longitude');\n    if (isNumArg(lon)) {out.longitude = lon;}\n    const elev = _grabFirstElFloat(xml, 'Elevation');\n    if (isNumArg(elev)) {out.elevation = elev;}\n    const depth = _grabFirstElFloat(xml, 'Depth');\n    if (isNumArg(depth)) {out.depth = depth;}\n\n    const azimuth = _grabFirstElFloat(xml, 'Azimuth');\n    if (isNumArg(azimuth)) {out.azimuth = azimuth;}\n    const dip = _grabFirstElFloat(xml, 'Dip');\n    if (isNumArg(dip)) {out.dip = dip;}\n    const sampleRate = _grabFirstElFloat(xml, 'SampleRate');\n    if (isNumArg(sampleRate)) {out.sampleRate = sampleRate;}\n    if (_grabAttribute(xml, \"endDate\")) {\n      out.endDate = _grabAttribute(xml, \"endDate\");\n    }\n    let responseXml = xml.getElementsByTagNameNS(STAML_NS, 'Response');\n    if (responseXml && responseXml.length > 0 ) {\n      const r = responseXml.item(0);\n      if (r) {out.response = convertToResponse(r);}\n    }\n    return out;\n  }\n\n  /** Parses a FDSNStationXML Response xml element into a Response object.\n   *\n   * @param responseXml the response xml Element\n   * @returns Response instance\n   */\nexport function convertToResponse(responseXml: Element): Response {\n    let out;\n    let inst = responseXml.getElementsByTagNameNS(STAML_NS, 'InstrumentSensitivity');\n    if (inst && inst.item(0)) {\n      const i = inst.item(0);\n      if (i) {out = new Response(convertToInstrumentSensitivity(i));}\n    }\n    if (! out) {\n      // DMC returns empty response element when they know nothing (instead\n      // of just leaving it out). Return empty object in this case\n      out = new Response();\n    }\n    let xmlStages = responseXml.getElementsByTagNameNS(STAML_NS, 'Stage');\n    if (xmlStages && xmlStages.length > 0) {\n      let jsStages = Array.from(xmlStages).map(function(stageXml) {\n        return convertToStage(stageXml);\n      });\n      out.stages = jsStages;\n    }\n    return out;\n  }\n\n  /**\n   * Parses a FDSNStationXML InstrumentSensitivity xml element into a InstrumentSensitivity object.\n   *\n   * @param xml the InstrumentSensitivity xml Element\n   * @returns InstrumentSensitivity instance\n   */\nexport function convertToInstrumentSensitivity(xml: Element): InstrumentSensitivity {\n    let sensitivity = _grabFirstElFloat(xml, 'Value');\n    let frequency = _grabFirstElFloat(xml, 'Frequency');\n    let inputUnits = _grabFirstElText(_grabFirstEl(xml, 'InputUnits'), 'Name');\n    let outputUnits = _grabFirstElText(_grabFirstEl(xml, 'OutputUnits'), 'Name');\n    if (! (isDef(sensitivity) && isDef(frequency) && isDef(inputUnits) && isDef(outputUnits))) {\n      // $FlowFixMe\n      throw new Error(`Not all elements of Sensitivity exist: ${sensitivity} ${frequency} ${inputUnits} ${outputUnits}`);\n    }\n    return new InstrumentSensitivity(sensitivity, frequency, inputUnits, outputUnits);\n  }\n\n  /**\n   * Parses a FDSNStationXML Stage xml element into a Stage object.\n   *\n   * @param stageXml the Stage xml Element\n   * @returns Stage instance\n   */\nexport function convertToStage(stageXml: Element): Stage {\n    let subEl = stageXml.firstElementChild;\n    let filter: AbstractFilterType | null = null;\n    if (! subEl) {\n      throw new Error(\"Stage element has no child elements\");\n    } else if (stageXml.childElementCount === 1 && subEl.localName === 'StageGain') {\n      // degenerate case of a gain only stage\n      // fix the lack of units after all stages are converted.\n    } else {\n      // shoudl be a filter of some kind, check for units\n      let inputUnits = _grabFirstElText(_grabFirstEl(stageXml, 'InputUnits'), 'Name');\n      let outputUnits = _grabFirstElText(_grabFirstEl(stageXml, 'OutputUnits'), 'Name');\n      if (! isNonEmptyStringArg(inputUnits)) {\n        throw new Error(\"Stage inputUnits required\");\n      }\n      if (! isNonEmptyStringArg(outputUnits)) {\n        throw new Error(\"Stage outputUnits required\");\n      }\n      // here we assume there must be a filter, and so must have units\n\n      if (subEl.localName === 'PolesZeros') {\n        filter = new PolesZeros(inputUnits, outputUnits);\n        const pzt = _grabFirstElText(stageXml, 'PzTransferFunctionType');\n        if (isNonEmptyStringArg(pzt)) { filter.pzTransferFunctionType = pzt; }\n        const nfa = _grabFirstElFloat(stageXml, 'NormalizationFactor');\n        if (isNumArg(nfa)) { filter.normalizationFactor = nfa;}\n        const nfr = _grabFirstElFloat(stageXml, 'NormalizationFrequency');\n        if (isNumArg(nfr)) {filter.normalizationFrequency = nfr;}\n        let zeros = Array.from(stageXml.getElementsByTagNameNS(STAML_NS, 'Zero'))\n            .map(function(zeroEl) {\n              return extractComplex(zeroEl);\n            });\n        let poles = Array.from(stageXml.getElementsByTagNameNS(STAML_NS, 'Pole'))\n            .map(function(poleEl) {\n              return extractComplex(poleEl);\n            });\n        filter.zeros = zeros;\n        filter.poles = poles;\n      } else if (subEl.localName === 'Coefficients') {\n        let coeffXml = subEl;\n        filter = new CoefficientsFilter(inputUnits, outputUnits);\n        const cft = _grabFirstElText(coeffXml, 'CfTransferFunctionType');\n        if (isNonEmptyStringArg(cft)) {filter.cfTransferFunction = cft;}\n        filter.numerator = Array.from(coeffXml.getElementsByTagNameNS(STAML_NS, 'Numerator'))\n            .map(function(numerEl) {\n              return parseFloat(numerEl.textContent);\n            });\n        filter.denominator = Array.from(coeffXml.getElementsByTagNameNS(STAML_NS, 'Denominator'))\n            .map(function(denomEl) {\n              return parseFloat(denomEl.textContent);\n            });\n      } else if (subEl.localName === 'ResponseList') {\n        throw new Error(\"ResponseList not supported: \");\n      } else if (subEl.localName === 'FIR') {\n        let firXml = subEl;\n        filter = new FIR(inputUnits, outputUnits);\n        const s = _grabFirstElText(firXml, 'Symmetry');\n        if (isNonEmptyStringArg(s)) {filter.symmetry = s;}\n        filter.numerator = Array.from(firXml.getElementsByTagNameNS(STAML_NS, 'NumeratorCoefficient'))\n            .map(function(numerEl) {\n              return parseFloat(numerEl.textContent);\n            });\n      } else if (subEl.localName === 'Polynomial') {\n        throw new Error(\"Polynomial not supported: \");\n      } else if (subEl.localName === 'StageGain') {\n        // gain only stage, pick it up below\n      } else {\n        throw new Error(\"Unknown Stage type: \"+ subEl.localName);\n      }\n\n      if (filter) {\n        // add description and name if it was there\n        let description = _grabFirstElText(subEl, 'Description');\n        if (isNonEmptyStringArg(description)) {\n          filter.description = description;\n        }\n        if (subEl.hasAttribute('name')) {\n          const n = _grabAttribute(subEl, 'name');\n          if (isNonEmptyStringArg(n)) {filter.name = n;}\n        }\n      }\n    }\n    let decimationXml = _grabFirstEl(stageXml, 'Decimation');\n    let decimation: Decimation | null = null;\n    if (decimationXml) {\n      decimation = convertToDecimation(decimationXml);\n    }\n    let gainXml = _grabFirstEl(stageXml, 'StageGain');\n    let gain = null;\n    if (gainXml) {\n      gain = convertToGain(gainXml);\n    } else {\n      throw new Error(\"Did not find Gain in stage number \"+stringify(_grabAttribute(stageXml, \"number\")));\n    }\n    let out = new Stage(filter, decimation, gain);\n\n    return out;\n  }\n\n  /**\n   * Parses a FDSNStationXML Decimation xml element into a Decimation object.\n   *\n   * @param decXml the Decimation xml Element\n   * @returns Decimation instance\n   */\nexport function convertToDecimation(decXml: Element): Decimation {\n    let out = new Decimation();\n    const insr = _grabFirstElFloat(decXml, 'InputSampleRate');\n    if (isNumArg(insr)) {out.inputSampleRate = insr;}\n    const fac = _grabFirstElInt(decXml, 'Factor');\n    if (isNumArg(fac)) {out.factor = fac;}\n    out.offset = _grabFirstElInt(decXml, 'Offset');\n    out.delay = _grabFirstElFloat(decXml, 'Delay');\n    out.correction = _grabFirstElFloat(decXml, 'Correction');\n    return out;\n  }\n\n  /**\n   * Parses a FDSNStationXML Gain xml element into a Gain object.\n   *\n   * @param gainXml the Gain xml Element\n   * @returns Gain instance\n   */\nexport function convertToGain(gainXml: Element): Gain {\n    let out = new Gain();\n    const v = _grabFirstElFloat(gainXml, 'Value');\n    if (isNumArg(v)) {out.value = v;}\n    const f = _grabFirstElFloat(gainXml, 'Frequency');\n    if (isNumArg(f)) {out.frequency = f;}\n    return out;\n  }\n\n  /**\n   * Extracts a complex number from an stationxml element.\n   *\n   * @param   el xml element\n   * @returns     Complex instance\n   */\nexport function extractComplex(el: Element) {\n    const re = _grabFirstElFloat(el, 'Real');\n    const im = _grabFirstElFloat(el, 'Imaginary');\n    if (isNumArg(re) && isNumArg(im)) {\n      return createComplex(re, im);\n    } else {\n      // $FlowFixMe\n      throw new Error(`Both Real and Imaginary required: ${re} ${im}`);\n    }\n  }\n\n/**\n * Generator function to access all stations within all networks in the array.\n *\n * @param      networks array of Networks\n * @yields           generator yeiding stations\n */\nexport function* allStations(networks: Array<Network>): Generator<Station, void, any> {\n  for (let n of networks) {\n    for (let s of n.stations) {\n        yield s;\n    }\n  }\n}\n\n/**\n * Generator function to access all channels within all stations\n * within all networks in the array.\n *\n * @param      networks array of Networks\n * @yields           generator yeiding channels\n */\nexport function* allChannels(networks: Array<Network>): Generator<Channel, void, any> {\n  for (let s of allStations(networks)) {\n    for (let c of s.channels) {\n      yield c;\n    }\n  }\n}\n\n/**\n * Extract all channels from all stations from all networks in the input array.\n *\n * @param   networks Array of networks.\n * @param   netCode network code to match\n * @param   staCode station code to match\n * @param   locCode location code to match\n * @param   chanCode channel code to match\n * @yields           Array of channels.\n */\nexport function* findChannels(networks: Array<Network>, netCode: string, staCode: string, locCode: string, chanCode: string): Generator<Channel, void, any> {\n    for (let n of networks.filter(n => n.networkCode ===  netCode)) {\n      for (let s of n.stations.filter(s => s.stationCode ===  staCode)) {\n        for (let c of s.channels.filter(c => c.locationCode ===  locCode && c.channelCode === chanCode)) {\n          yield c;\n        }\n      }\n    }\n}\n\n// these are similar methods as in seisplotjs.quakeml\n// duplicate here to avoid dependency and diff NS, yes that is dumb...\n\nconst _grabFirstEl = function(xml: Element | null | void, tagName: string): Element | void {\n  let out = undefined;\n  if (isObject(xml)) {\n    let el = xml.getElementsByTagName(tagName);\n    if (isObject(el) && el.length > 0) {\n      const e = el.item(0);\n      if (e) {\n        out = e;\n      }\n    }\n  }\n  return out;\n};\n\nconst _grabFirstElText = function _grabFirstElText(xml: Element | null | void, tagName: string): string | void {\n  let out = undefined;\n  let el = _grabFirstEl(xml, tagName);\n  if (isObject(el)) {\n    out = el.textContent;\n  }\n  return out;\n};\n\nconst _grabFirstElFloat = function _grabFirstElFloat(xml: Element | null | void, tagName: string): number | void {\n  let out = undefined;\n  let elText = _grabFirstElText(xml, tagName);\n  if (isStringArg(elText)) {\n    out = parseFloat(elText);\n  }\n  return out;\n};\n\nconst _grabFirstElInt = function _grabFirstElInt(xml: Element | null | void, tagName: string): number | void {\n  let out = undefined;\n  let elText = _grabFirstElText(xml, tagName);\n  if (isStringArg(elText)) {\n    out = parseInt(elText);\n  }\n  return out;\n};\n\nconst _grabAttribute = function _grabAttribute(xml: Element | null | void, tagName: string): string | void {\n  let out = undefined;\n  if (isObject(xml)) {\n    let a = xml.getAttribute(tagName);\n    if (isStringArg(a)) {\n      out = a;\n    }\n  }\n  return out;\n};\n\nconst _grabAttributeNS = function(xml: Element | null | void, namespace: string, tagName: string): string | void {\n  let out = undefined;\n  if (isObject(xml)) {\n    let a = xml.getAttributeNS(namespace, tagName);\n    if (isStringArg(a)) {\n      out = a;\n    }\n  }\n  return out;\n};\n\n\nexport const parseUtil = {\n  \"_grabFirstEl\": _grabFirstEl,\n  \"_grabFirstElText\": _grabFirstElText,\n  \"_grabFirstElFloat\": _grabFirstElFloat,\n  \"_grabFirstElInt\": _grabFirstElInt,\n  \"_grabAttribute\": _grabAttribute,\n  \"_grabAttributeNS\": _grabAttributeNS\n};\n"],"names":["STAML_NS","Network","constructor","networkCode","stations","startDate","_startDate","value","checkStringOrDate","endDate","_endDate","timeRange","StartEndDuration","codes","isTempNet","first","charAt","Station","network","stationCode","channels","Channel","station","channelCode","locationCode","length","Error","_locationCode","hasInstrumentSensitivity","isDef","response","instrumentSensitivity","Response","InstrumentSensitivity","sensitivity","frequency","inputUnits","outputUnits","stages","Stage","filter","decimation","gain","AbstractFilterType","PolesZeros","FIR","CoefficientsFilter","Decimation","Gain","parseStationXml","rawXml","top","documentElement","netArray","getElementsByTagNameNS","out","n","push","convertToNetwork","xml","netCode","_grabAttribute","isNonEmptyStringArg","rs","restrictedStatus","desc","_grabFirstElText","description","totSta","totalNumberStations","parseInt","staArray","s","convertToStation","staCode","lat","_grabFirstElFloat","isNumArg","latitude","lon","longitude","elev","elevation","name","_grabFirstEl","isStringArg","chanArray","c","convertToChannel","locCode","chanCode","depth","azimuth","dip","sampleRate","responseXml","r","item","convertToResponse","inst","i","convertToInstrumentSensitivity","xmlStages","jsStages","Array","from","map","stageXml","convertToStage","subEl","firstElementChild","childElementCount","localName","pzt","pzTransferFunctionType","nfa","normalizationFactor","nfr","normalizationFrequency","zeros","zeroEl","extractComplex","poles","poleEl","coeffXml","cft","cfTransferFunction","numerator","numerEl","parseFloat","textContent","denominator","denomEl","firXml","symmetry","hasAttribute","decimationXml","convertToDecimation","gainXml","convertToGain","stringify","decXml","insr","inputSampleRate","fac","_grabFirstElInt","factor","offset","delay","correction","v","f","el","re","im","createComplex","allStations","networks","allChannels","findChannels","tagName","undefined","isObject","getElementsByTagName","e","elText","a","getAttribute","_grabAttributeNS","namespace","getAttributeNS","parseUtil"],"mappings":"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"}