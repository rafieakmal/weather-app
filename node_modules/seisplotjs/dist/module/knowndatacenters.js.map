{"version":3,"file":"knowndatacenters.js","sources":["../../src/knowndatacenters.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport moment from 'moment';\nimport { checkProtocol } from './util';\n\n// flow type for json known datacenters type\n//import type { moment as momentType } from 'moment';\n\ntype SupportsType = {\n  type: string,\n  versions: Array<number>,\n  host?: string\n}\ntype DataCenterType = {\n  \"id\": string,\n  \"name\": string,\n  \"website\": string,\n  \"email\": string,\n  \"host\": string,\n  \"region\": string,\n  \"supports\": Array<SupportsType>,\n}\ntype KnownDCS_JSON = {\n  accesstime?: moment,\n  created: moment,\n  datacenters: Array<DataCenterType>\n}\n\nconst DS = \"fdsnws-dataselect\";\nconst EV= \"fdsn-event\";\nconst ST= \"fdsn-station\";\nconst RS= \"ringserver\";\n\nconst BestDCIdMap = new Map();\n\nfunction initBestDCIdMap() {\n  BestDCIdMap.set(knownDataCenters.DS, \"IRIS\");\n  BestDCIdMap.set(ST, \"IRIS\");\n  BestDCIdMap.set(RS, \"IRIS\");\n  BestDCIdMap.set(EV, \"USGS\");\n}\n\nlet knownDCs = null;\n\n/**\n * Lookup system for FDSN web services, predates the new FDSN DataCenters\n * web service, which is now the preferred method, as this may be out of date.\n * \n */\nexport const knownDataCenters = {\n  knownDataCentersJsonURL: checkProtocol()+\"//www.seis.sc.edu/fdsnServiceCheck/fdsnDataCenters.json\",\n\n  DS: DS,\n  EV: EV,\n  ST: ST,\n  RS: RS,\n  allDCTypes: [ DS, EV, ST, RS ],\n\n  getDefaultDC(type: string) {\n    return this.getDataCenter(BestDCIdMap.get(type));\n  },\n\n  /**\n   * Loads all known data centers. JSON top level has:\n   *  created - modification date,\n   *  datacenters - array of objects, each with\n   *  id, name, website, email, host, region and\n   *  and supports that is an array of type and version.\n   *\n   *  @returns a Promise that resolves to the returned json.\n   */\n  getKnownDataCenters(): Promise<KnownDCS_JSON> {\n    if ( ! knownDCs) {\n      knownDCs = fetch(this.knownDataCentersJsonURL)\n        .then(response => {\n          return (response: {json(): any}).json();\n        }).then(function(json: any): KnownDCS_JSON {\n          json.accesstime = moment.utc();\n          return json;\n        });\n    }\n    return knownDCs;\n  },\n\n  /**\n   * Forces a reload of the remote json. In general, because the data\n   *  is updated infrequently, this is unlikely to be needed. However,\n   *  a very long running instance may wish to update this periodically,\n   *  likely at most daily.\n   *\n   *  @returns a Promise to known datacenters.\n   */\n  updateKnownDataCenters(): Promise<KnownDCS_JSON> {\n    knownDCs = null;\n    return this.getKnownDataCenters();\n  },\n\n  /**\n   * Gets the data center associated with the id.\n   *\n   * @param id string id\n   * @returns a Promise to data center\n   */\n  getDataCenter(id: string): DataCenterType {\n    return this.getKnownDataCenters().then(kdcs => {\n      for (const dc of kdcs.datacenters) {\n        if (dc.id === id) {\n          return dc;\n        }\n      }\n      return null;\n    });\n  },\n\n  /**\n   *\n   * @param dc data center\n   * @param type type of service\n   * @returns true is the dc datacenter supports type web service,\n   * false otherwise.\n   */\n  doesSupport(dc: DataCenterType, type: string) {\n    let out = dc.supports.find(function(s) { return s.type === type;});\n    return typeof out !== 'undefined';\n  },\n\n  /**\n   * returns the hostname for type web service. In many cases this\n   *  is the same as the host for the overall datacenter, but sometimes\n   *  not all web services are hosted on the same machine. For example\n   *  all fdsn web services at IRIS are hosted at service.iris.edu\n   *  but the ringserver is hosted at rtserve.iris.edu\n   *\n   * @param dc data center\n   * @param type type of service\n   * @returns host\n   */\n  serviceHost(dc: DataCenterType, type: string): string {\n    let does = this.doesSupport(dc, type);\n    if (does) {\n      return does.host ? does.host : dc.host;\n    }\n    throw new Error(dc.id+\" does not support \"+type);\n  },\n\n  /**\n   * returns the port for type web service. In many cases this\n   *  is 80, but sometimes web services are hosted on alternative\n   *  ports.\n   *\n   * @param dc data center\n   * @param type type of service\n   * @returns port number\n   */\n  servicePort(dc: DataCenterType, type: string): number {\n    let does = this.doesSupport(dc, type);\n    if (does) {\n      return does.port ? does.port : 80;\n    }\n    throw new Error(dc.id+\" does not support \"+type);\n  }\n\n};\n\ninitBestDCIdMap();\n"],"names":["DS","EV","ST","RS","BestDCIdMap","Map","initBestDCIdMap","set","knownDataCenters","knownDCs","knownDataCentersJsonURL","checkProtocol","allDCTypes","getDefaultDC","type","getDataCenter","get","getKnownDataCenters","fetch","then","response","json","accesstime","moment","utc","updateKnownDataCenters","id","kdcs","dc","datacenters","doesSupport","out","supports","find","s","serviceHost","does","host","Error","servicePort","port"],"mappings":"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"}