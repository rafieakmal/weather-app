{"version":3,"file":"fft.js","sources":["../../src/fft.js"],"sourcesContent":["//@flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport {Seismogram } from './seismogram.js';\n\nimport {OregonDSP, Complex, createComplex} from './oregondsputil.js';\n\n/** A higher level function to calculate DFT. Returns a\n * FFTResult for easier access to the result as\n * complex, amp, phase arrays. Calls calcDFT internally.\n * Inverse FFT is available as FFTResult.fftInverse().\n *\n * @param seis seismogram to transform\n * @returns fft of seismogram\n */\nexport function fftForward(seis: Seismogram) {\n  if ( seis.isContiguous()) {\n    let result = FFTResult.createFromPackedFreq(calcDFT(seis.y), seis.numPoints, seis.sampleRate);\n    return result;\n  } else {\n    throw new Error(\"Can only take FFT is seismogram is contiguous.\");\n  }\n}\n\n/**\n * Calculates the discrete fourier transform using the OregonDSP library.\n *\n * @param   timeseries timeseries array\n * @returns           DFT as packed array Float32Array\n */\nexport function calcDFT(timeseries: Int32Array | Float32Array | Float64Array): Float32Array {\n  let log2N = 4;\n  let npts = timeseries.length;\n  let N = 16;\n  while(N < npts) { log2N += 1; N = 2 * N;}\n  let dft = new OregonDSP.fft.RDFT(log2N);\n  let inArray = new Float32Array(N);\n  inArray.fill(0);\n  for(let i=0; i<timeseries.length; i++) {\n    inArray[i] = timeseries[i];\n  }\n\n  let out = new Float32Array(N).fill(0);\n  dft.evaluate(inArray, out);\n  return out;\n}\n\n/**\n * Calculates the inverse discrete fourier transform using the OregonDSP library.\n *\n * @param   packedFreq DFT as packed array Float32Array\n * @param   numPoints     number of points in original timeseries array.\n * @returns           inverse of DFT as a timeseries array\n */\nexport function inverseDFT(packedFreq: Float32Array, numPoints: number): Float32Array {\n  if (numPoints > packedFreq.length) {\n    throw new Error(\"Not enough points in packed freq array for \"+numPoints+\", only \"+packedFreq.length);\n  }\n  let log2N = 4;\n  let N = 16;\n  while(N < packedFreq.length) { log2N += 1; N = 2 * N;}\n  if (N !== packedFreq.length) {\n    throw new Error(\"power of two check fails: \"+N+\" \"+packedFreq.length);\n  }\n  let dft = new OregonDSP.fft.RDFT(log2N);\n  let out = new Float32Array(N).fill(0);\n  dft.evaluateInverse(packedFreq, out);\n  return out.slice(0, numPoints);\n}\n\n/**\n * Results of FFT calculateion. Allows convertion of the packed real/imag array output from calcDFT into\n * amplitude and phase.\n */\nexport class FFTResult {\n/** number of points in the original timeseries, may be less than fft size. */\n  origLength: number;\n  packedFreq: Float32Array;\n  complex: Array<Complex>;\n  amp: Float32Array;\n  phase: Float32Array;\n  /** number of points in the fft, usually power of 2 larger than origLength. */\n  numPoints: number;\n  /** sample rate of the original time series, maybe be null. */\n  sampleRate: number;\n  constructor(origLength: number, sampleRate: number) {\n      this.origLength = origLength;\n      this.sampleRate = sampleRate;\n  }\n  /**\n   * Factory method to create FFTResult from packed array.\n   *\n   * @param   packedFreq real and imag values in packed format\n   * @param   origLength length of the original timeseries before padding.\n   * @param   sampleRate sample rate of original data\n   * @returns            FFTResult\n   */\n  static createFromPackedFreq(packedFreq: Float32Array, origLength: number, sampleRate: number) {\n    let fftResult = new FFTResult(origLength, sampleRate);\n    fftResult.packedFreq = packedFreq;\n    fftResult.recalcFromPackedFreq();\n    return fftResult;\n  }\n  /**\n   * Factory method to create from array of complex numbers.\n   *\n   * @param   complexArray real and imag values as array of Complex objects.\n   * @param   origLength   length of the original timeseries before padding.\n   * @param   sampleRate sample rate of original data\n   * @returns               FFTResult\n   */\n  static createFromComplex(complexArray: Array<Complex>, origLength: number, sampleRate: number) {\n    let fftResult = new FFTResult(origLength, sampleRate);\n    fftResult.complex = complexArray;\n    fftResult.recalcFromComplex();\n    return fftResult;\n  }\n  /**\n   * Factory method to create from amp and phase arrays\n   *\n   * @param   amp        amplitude values\n   * @param   phase      phase values\n   * @param   origLength length of the original timeseries before padding.\n   * @param   sampleRate sample rate of original data\n   * @returns             FFTResult\n   */\n  static createFromAmpPhase(amp: Float32Array, phase: Float32Array, origLength: number, sampleRate: number) {\n    let fftResult = new FFTResult(origLength, sampleRate);\n    if (amp.length !== phase.length) {throw new Error(`amp and phase must be same length: ${amp.length} ${phase.length}`);}\n    fftResult.amp = amp;\n    fftResult.phase = phase;\n    fftResult.recalcFromAmpPhase();\n    return fftResult;\n  }\n  /**\n   * The minimum non-zero frequency in the fft\n   *\n   * @returns fundamental frequency\n   */\n  get fundamentalFrequency() {\n    if (this.sampleRate) {\n      return this.sampleRate/this.numPoints;\n    } else {\n      throw new Error(\"sample rate not set on FFTResult, needed to calc min frequency\");\n    }\n  }\n  recalcFromPackedFreq(): void {\n    this.complex = [];\n    this.amp = new Float32Array(this.packedFreq.length/2+1);\n    this.phase = new Float32Array(this.packedFreq.length/2+1);\n    this.numPoints = this.packedFreq.length;\n\n    let c = createComplex(this.packedFreq[0], 0);\n    this.complex.push(c);\n    this.amp[0] = c.abs();\n    this.phase[0] = c.angle();\n    const L = this.packedFreq.length;\n    for(let i=1; i<this.packedFreq.length/2; i++) {\n      c = createComplex(this.packedFreq[i], this.packedFreq[L-i]);\n      this.complex.push(c);\n      this.amp[i] = c.abs();\n      this.phase[i] = c.angle();\n    }\n    c = createComplex(this.packedFreq[L/2], 0);\n    this.complex.push(c);\n    this.amp[this.packedFreq.length/2] = c.abs();\n    this.phase[this.packedFreq.length/2] = c.angle();\n  }\n  /**\n   * recalculate the packedFreq array after modifications\n   * to the complex array.\n   * */\n  recalcFromComplex() {\n    const N = this.complex.length;\n    let modFreq = new Float32Array(N).fill(0);\n    modFreq[0] = this.complex[0].real;\n    for (let i=1; i< this.complex.length-1; i++) {\n      modFreq[i] = this.complex[i].real;\n      modFreq[N-i] = this.complex[i].imag;\n    }\n    modFreq[N/2] = this.complex[N-1].real;\n    this.packedFreq = modFreq;\n    this.numPoints = this.packedFreq.length;\n  }\n  /**\n   * recalculate the packedFreq array after modifications\n   * to the amp and/or phase arrays.\n   */\n  recalcFromAmpPhase() {\n    let modComplex = new Array(this.amp.length);\n    for (let i=0; i< this.amp.length; i++) {\n      modComplex[i] = OregonDSP.filter.iir.Complex.Companion.ComplexFromPolar(this.amp[i], this.phase[i]);\n    }\n    this.complex = modComplex;\n    this.recalcFromComplex();\n  }\n  /**\n   * calculates the inverse fft of this.packedFreq\n   *\n   * @returns time domain representation\n   */\n  fftInverse() {\n    return inverseDFT(this.packedFreq, this.origLength);\n  }\n  clone() {\n    return FFTResult.createFromPackedFreq(this.packedFreq.slice(), this.origLength, this.sampleRate);\n  }\n}\n"],"names":["fftForward","seis","isContiguous","result","FFTResult","createFromPackedFreq","calcDFT","y","numPoints","sampleRate","Error","timeseries","log2N","npts","length","N","dft","OregonDSP","fft","RDFT","inArray","Float32Array","fill","i","out","evaluate","inverseDFT","packedFreq","evaluateInverse","slice","constructor","origLength","fftResult","recalcFromPackedFreq","createFromComplex","complexArray","complex","recalcFromComplex","createFromAmpPhase","amp","phase","recalcFromAmpPhase","fundamentalFrequency","c","createComplex","push","abs","angle","L","modFreq","real","imag","modComplex","Array","filter","iir","Complex","Companion","ComplexFromPolar","fftInverse","clone"],"mappings":"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"}