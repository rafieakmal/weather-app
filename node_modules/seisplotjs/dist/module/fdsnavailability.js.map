{"version":3,"file":"fdsnavailability.js","sources":["../../src/fdsnavailability.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport moment from 'moment';\nimport RSVP from 'rsvp';\n\n// special due to flow\nimport {checkProtocol, toIsoWoZ, isDef, hasArgs, hasNoArgs, isStringArg,\n        isNonEmptyStringArg, isNumArg, checkStringOrDate, stringify} from './util';\n\nimport {SeismogramDisplayData } from './seismogram.js';\nimport { TEXT_MIME, JSON_MIME, StartEndDuration, makeParam, doFetchWithTimeout, defaultFetchInitObj} from './util.js';\nimport {Network, Station, Channel} from './stationxml.js';\n\n/** const for json format, json */\nexport const FORMAT_JSON = 'json';\n/** const for text format, text */\nexport const FORMAT_TEXT = 'text';\n/** const for geocsv format, geocsv */\nexport const FORMAT_GEOCSV = 'geocsv';\n/** const for request format, request */\nexport const FORMAT_REQUEST = 'request';\n\n/** const of completely empty json, {} */\nexport const EMPTY_JSON = JSON.parse('{}');\n\n/**\n * Major version of the FDSN spec supported here.\n * Currently is 1.\n */\nexport const SERVICE_VERSION = 1;\n/**\n * Service name as used in the FDSN DataCenters registry,\n * http://www.fdsn.org/datacenters\n */\nexport const SERVICE_NAME = `fdsnws-availability-${SERVICE_VERSION}`;\n\nexport const IRIS_HOST = \"service.iris.edu\";\n\n/**\n * Query to a FDSN Availability web service.\n *\n * @see http://www.fdsn.org/webservices/\n *\n * @param host optional host to connect to, defaults to IRIS\n */\nexport class AvailabilityQuery {\n  /** @private */\n  _specVersion: number;\n  /** @private */\n  _protocol: string;\n  /** @private */\n  _host: string;\n  /** @private */\n  _nodata: number;\n  /** @private */\n  _port: number;\n  /** @private */\n  _networkCode: string;\n  /** @private */\n  _stationCode: string;\n  /** @private */\n  _locationCode: string;\n  /** @private */\n  _channelCode: string;\n  /** @private */\n  _startTime: moment;\n  /** @private */\n  _endTime: moment;\n  /** @private */\n  _quality: string;\n  /** @private */\n  _merge: string;\n  /** @private */\n  _show: string;\n  /** @private */\n  _mergeGaps: number;\n  /** @private */\n  _limit: number;\n  /** @private */\n  _orderby: string;\n  /** @private */\n  _includerestricted: boolean;\n  /** @private */\n  _format: string;\n  /** @private */\n  _timeoutSec: number;\n  constructor(host?: string) {\n    this._specVersion = 1;\n    this._protocol = checkProtocol();\n    if (isNonEmptyStringArg(host)) {\n      this._host = host;\n    } else {\n      this._host = IRIS_HOST;\n    }\n    this._port = 80;\n    this._timeoutSec = 30;\n  }\n  /**\n   * Gets/Sets the version of the fdsnws spec, 1 is currently the only value.\n   *  Setting this is probably a bad idea as the code may not be compatible with\n   *  the web service.\n   *\n   * @param value spec version, usually 1\n   * @returns the query when setting, the current value when no argument\n   */\n  specVersion(value?: number): number | AvailabilityQuery {\n    if (hasArgs(value)) {\n      this._specVersion = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._specVersion;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the protocol, http or https. This should match the protocol\n   *  of the page loaded, but is autocalculated and generally need not be set.\n   *\n   * @param value protocol, usually http or https\n   * @returns the query when setting, the current value when no argument\n   */\n  protocol(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._protocol = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._protocol;\n    } else {\n      throw new Error('value argument is optional or string, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the remote host to connect to.\n   *\n   * @param value host\n   * @returns the query when setting, the current value when no argument\n   */\n  host(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._host = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._host;\n    } else {\n      throw new Error('value argument is optional or string, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the nodata parameter, usually 404 or 204 (default), controlling\n   * the status code when no matching data is found by the service.\n   *\n   * @param value number for nodata, usually 404 or 204\n   * @returns the query when setting, the current value when no argument\n   */\n  nodata(value?: number): number | AvailabilityQuery {\n    if (hasNoArgs(value)) {\n      return this._nodata;\n    } else if (hasArgs(value)) {\n      this._nodata = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the port, not usually set unless not on standard http or https ports\n   *\n   * @param value port\n   * @returns the query when setting, the current value when no argument\n   */\n  port(value?: number): number | AvailabilityQuery {\n    if (hasNoArgs(value)) {\n      return this._port;\n    } else if (hasArgs(value)) {\n      this._port = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the network code to check.\n   *\n   * @param value network code like IU\n   * @returns the query when setting, the current value when no argument\n   */\n  networkCode(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._networkCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._networkCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Gets/Sets the station code to check.\n   *\n   * @param value station code like ANMO\n   * @returns the query when setting, the current value when no argument\n   */\n  stationCode(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._stationCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._stationCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Gets/Sets the location code to check.\n   *\n   * @param value location code like 00\n   * @returns the query when setting, the current value when no argument\n   */\n  locationCode(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._locationCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._locationCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Gets/Sets the channel code to check.\n   *\n   * @param value channel code like BHZ\n   * @returns the query when setting, the current value when no argument\n   */\n  channelCode(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._channelCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._channelCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Gets/Sets the start time parameter for the query.\n   *\n   * @param value start time\n   * @returns the query when setting, the current value when no argument\n   */\n  startTime(value?: moment): moment | AvailabilityQuery {\n    if (hasNoArgs(value)) {\n      return this._startTime;\n    } else if (hasArgs(value)) {\n      this._startTime = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the end time parameter for the query.\n   *\n   * @param value end time\n   * @returns the query when setting, the current value when no argument\n   */\n  endTime(value?: moment): moment | AvailabilityQuery {\n    if (hasNoArgs(value)) {\n      return this._endTime;\n    } else if (hasArgs(value)) {\n      this._endTime = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /**\n   * Sets startTime and endTime using the given time window\n   *\n   * @param   se time window\n   * @returns    the query\n   */\n  timeWindow(se: StartEndDuration): AvailabilityQuery {\n    this.startTime(se.startTime);\n    this.endTime(se.endTime);\n    return this;\n  }\n  /**\n   * Gets/Sets the quality parameter for the query.\n   *\n   * @param value quality\n   * @returns the query when setting, the current value when no argument\n   */\n  quality(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._quality = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._quality;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Gets/Sets the merge parameter for the query.\n   *\n   * @param value merge\n   * @returns the query when setting, the current value when no argument\n   */\n  merge(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._merge = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._merge;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Gets/Sets the mergegaps parameter for the query.\n   *\n   * @param value merge gaps\n   * @returns the query when setting, the current value when no argument\n   */\n  mergeGaps(value?: number): number | AvailabilityQuery {\n    if (isNumArg(value)) {\n      this._mergeGaps = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._mergeGaps;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Gets/Sets the show parameter for the query.\n   *\n   * @param value show\n   * @returns the query when setting, the current value when no argument\n   */\n  show(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._show = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._show;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Gets/Sets the limit parameter for the query.\n   *\n   * @param value limit\n   * @returns the query when setting, the current value when no argument\n   */\n  limit(value?: number): number | AvailabilityQuery {\n    if (hasNoArgs(value)) {\n      return this._limit;\n    } else if (hasArgs(value)) {\n      this._limit = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /**\n   * Gets/Sets the order by parameter for the query.\n   *\n   * @param value order by\n   * @returns the query when setting, the current value when no argument\n   */\n  orderby(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._orderby = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._orderby;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /**\n   * Gets/Sets the include restricted data parameter for the query.\n   *\n   * @param value true to include restricted data\n   * @returns the query when setting, the current value when no argument\n   */\n  includeRestricted(value?: boolean): boolean | AvailabilityQuery {\n    if (hasNoArgs(value)) {\n      return this._includerestricted;\n    } else if (hasArgs(value)) {\n      this._includerestricted = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or boolean, but was '+typeof value);\n    }\n  }\n\n  /**\n   * Gets/Sets the format parameter for the query. Usually not needed as is set\n   * by the various query methods.\n   *\n   * @param value format\n   * @returns the query when setting, the current value when no argument\n   */\n  format(value?: string): string | AvailabilityQuery {\n    if (isStringArg(value)) {\n      this._format = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._format;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the timeout in seconds for the request. Default is 30.\n   *\n   * @param value timeout in seconds\n   * @returns the query when setting, the current value when no argument\n   */\n  timeout(value?: number): number | AvailabilityQuery {\n    if (hasNoArgs(value)) {\n      return this._timeoutSec;\n    } else if (isNumArg(value)) {\n      this._timeoutSec = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /**\n   * Calls query on the remote service, using configured parameters. Calls\n   * queryJson internally, then unpacks the result into array of SeismogramDisplayData\n   * objects.\n   *\n   * @returns          promise to array of SeismogramDisplayData, each representing\n   * a channel-time window\n   */\n  query(): Promise<Array<SeismogramDisplayData>> {\n    return this.queryJson().then(function(json) {\n          return this.extractFromJson(json);\n      });\n  }\n  /**\n   * Calls the query function the remote server and parses the returned data as json.\n   *\n   * @returns promise to the result as json\n   */\n  queryJson(): Promise<string> {\n    const mythis = this;\n    this.format(FORMAT_JSON);\n    const url = this.formURL(\"query\");\n    const fetchInit = defaultFetchInitObj(JSON_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n      .then(function(response) {\n        if (response.status === 204 || (mythis.nodata() && response.status === mythis.nodata())) {\n          return EMPTY_JSON;\n        }\n        let contentType = response.headers.get('content-type');\n        if(isNonEmptyStringArg(contentType) && contentType.includes(JSON_MIME)) {\n          return response.json();\n        }\n        // $FlowFixMe\n        throw new TypeError(`Oops, we did not get JSON! ${contentType}`);\n      });\n  }\n\n  /**\n   * Calls extent on the remote service, using configured parameters. Calls\n   * extentJson internally, then unpacks the result into array of SeismogramDisplayData\n   * objects.\n   *\n   * @returns          promise to array of SeismogramDisplayData, each representing\n   * a channel-time window\n   */\n  extent(): Promise<Array<SeismogramDisplayData>> {\n    return this.extentJson().then(function(json) {\n          return this.extractFromJson(json);\n      });\n  }\n  /**\n   * Call the extend function on the remote server and parses the returned data as json.\n   *\n   * @returns promise to the result as json\n   */\n  extentJson() {\n    const mythis = this;\n    this.format(FORMAT_JSON);\n    const url = this.formURL(\"extent\");\n    const fetchInit = defaultFetchInitObj(JSON_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n    .then(function(response) {\n        if (response.status === 204 || (mythis.nodata() && response.status === mythis.nodata())) {\n          return EMPTY_JSON;\n        }\n        let contentType = response.headers.get('content-type');\n        if(isNonEmptyStringArg(contentType) && contentType.includes(JSON_MIME)) {\n          return response.json();\n        }\n        // $FlowFixMe\n        throw new TypeError(`Oops, we did not get JSON! ${contentType}`);\n      });\n  }\n\n  /**\n   * Calls query on the remote service using POST, using configured parameters\n   * and forms the POST body using the channelTimeList. Calls\n   * postQueryJson internally, then unpacks the result into array of SeismogramDisplayData\n   * objects.\n   *\n   * @param channelTimeList array of channel-time windows for the request\n   * @returns          promise to array of SeismogramDisplayData, each representing\n   * a channel-time window\n   */\n  postQuery(channelTimeList: Array<SeismogramDisplayData>): Promise<Array<SeismogramDisplayData>> {\n    return this.postQueryJson(channelTimeList).then(json => {\n      return this.extractFromJson(json);\n    });\n  }\n  postExtent(channelTimeList: Array<SeismogramDisplayData>): Promise<Array<SeismogramDisplayData>> {\n    return this.postExtentJson(channelTimeList).then(json => {\n      return this.extractFromJson(json);\n    });\n  }\n\n  postExtentJson(channelTimeList: Array<SeismogramDisplayData>): Promise<RootType> {\n    return this.postJson(channelTimeList, 'extent');\n  }\n  postQueryJson(channelTimeList: Array<SeismogramDisplayData>): Promise<RootType> {\n    return this.postJson(channelTimeList, 'query');\n  }\n  postJson(channelTimeList: Array<SeismogramDisplayData>, method: string): Promise<RootType> {\n    const mythis = this;\n    this.format(FORMAT_JSON);\n    return this.postRaw(channelTimeList, method).then(function(response) {\n        if (response.status === 204 || (mythis.nodata() && response.status === mythis.nodata())) {\n          return EMPTY_JSON;\n        }\n        let contentType = response.headers.get('content-type');\n        if(isNonEmptyStringArg(contentType) && contentType.includes(JSON_MIME)) {\n          return response.json();\n        }\n        // $FlowFixMe\n        throw new TypeError(`Oops, we did not get JSON! ${contentType}`);\n      });\n  }\n  postRaw(channelTimeList: Array<SeismogramDisplayData>, method: string): Promise<Response> {\n    if (channelTimeList.length === 0) {\n      // return promise faking an not ok fetch response\n      return RSVP.hash({\n        ok: false\n      });\n    } else {\n      const fetchInit = defaultFetchInitObj(JSON_MIME);\n      fetchInit.method = \"POST\";\n      fetchInit.body = this.createPostBody(channelTimeList);\n      return fetch(this.formBaseURL()+`/${method}?`, fetchInit).then(function(response) {\n          if(response.ok) {\n            return response;\n          }\n          throw new Error('Fetch response was not ok.');\n        });\n    }\n  }\n\n  extractFromJson(jsonChanTimes: RootType): Array<SeismogramDisplayData> {\n    let out = [];\n    let knownNets = new Map();\n    if (isDef(jsonChanTimes.datasources)){\n      for (let ds of jsonChanTimes.datasources) {\n        let n = knownNets.get(ds.network);\n        if ( ! n) {\n          n = new Network(ds.network);\n          knownNets.set(ds.network, n);\n        }\n        let s = null;\n        for (let ss of n.stations) {\n          if (ss.stationCode === ds.station) {\n            s = ss;\n          }\n        }\n        if ( ! s) {\n          s = new Station(n, ds.station);\n          n.stations.push(s);\n        }\n        let c = new Channel(s, ds.channel, ds.locationCode);\n        if (isNonEmptyStringArg(ds.earliest) && isNonEmptyStringArg(ds.latest)){\n          out.push( SeismogramDisplayData.fromChannelAndTimes(c, moment.utc(ds.earliest), moment.utc(ds.latest)));\n        } else if (ds.timespans) {\n          for (let ts of ds.timespans) {\n            out.push(SeismogramDisplayData.fromChannelAndTimes(c,  moment.utc(ts[0]), moment.utc(ts[1])));\n          }\n        }\n      }\n    }\n    return out;\n  }\n\n  createPostBody(channelTimeList: Array<SeismogramDisplayData>): string {\n    let out = \"\";\n    if (this._quality) { out += this.makePostParm(\"quality\", this.quality());}\n    if (this._merge) { out += this.makePostParm(\"merge\", this.merge());}\n    if (isNumArg(this._mergeGaps) && (this._format === 'query' || this._format === 'queryauth')) {\n      out += this.makePostParm(\"mergegaps\", this.mergeGaps());\n    }\n    if (this._show && (this._format === 'query' || this._format === 'queryauth')) {\n      out += this.makePostParm(\"show\", this.show());\n    }\n    if (isNumArg(this._limit) && this._limit>0) { out += this.makePostParm(\"limit\", this.limit());}\n    if (this._orderby) { out += this.makePostParm(\"orderby\", this.orderby());}\n    if (this._includerestricted) { out += this.makePostParm(\"includerestricted\", this.includeRestricted());}\n    if (this._format) { out += this.makePostParm(\"format\", this.format());}\n    if (this._nodata) { out += this.makePostParm(\"nodata\", this.nodata());}\n\n    for (let ct of channelTimeList) {\n      if ( isDef(ct.channel)) {\n        let sta = ct.channel.station;\n        let net = sta.network;\n        out += `${net.networkCode} ${sta.stationCode} ${ct.channel.locationCode} ${ct.channel.channelCode} ${ct.startTime.toISOString()} ${ct.endTime.toISOString()}`;\n        out += '\\n';\n      } else {\n        throw new Error(\"Channel in missing in createPostBody\");\n      }\n    }\n    return out;\n  }\n\n  formBaseURL(): string {\n      let colon = \":\";\n      if (this._protocol.endsWith(colon)) {\n        colon = \"\";\n      }\n      return this._protocol+colon+\"//\"+this._host+(this._port===80?\"\":(\":\"+this._port))+\"/fdsnws/availability/\"+this._specVersion;\n  }\n\n  formVersionURL(): string {\n    return this.formBaseURL()+\"/version\";\n  }\n  /**\n   * Queries the remote web service to get its version\n   *\n   * @returns Promise to version string\n   */\n  queryVersion(): Promise<string> {\n    let url = this.formVersionURL();\n    const fetchInit = defaultFetchInitObj(TEXT_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n      .then(response => {\n          if (response.status === 200) {\n            return response.text();\n          } else {\n            throw new Error(`Status not 200: ${response.status}`);\n          }\n      });\n  }\n\n  makePostParm(name: string, val: mixed): string {\n    return name+\"=\"+stringify(val)+\"\\n\";\n  }\n\n  formURL(method: string): string {\n    if (hasNoArgs(method)) {\n      method = \"query\";\n    }\n    let url = this.formBaseURL()+`/${method}?`;\n    if (this._networkCode) { url = url+makeParam(\"net\", this.networkCode());}\n    if (this._stationCode) { url = url+makeParam(\"sta\", this.stationCode());}\n    if (this._locationCode) { url = url+makeParam(\"loc\", this.locationCode());}\n    if (this._channelCode) { url = url+makeParam(\"cha\", this.channelCode());}\n    if (this._startTime) { url = url+makeParam(\"starttime\", toIsoWoZ(this.startTime()));}\n    if (this._endTime) { url = url+makeParam(\"endtime\", toIsoWoZ(this.endTime()));}\n    if (this._quality) { url = url+makeParam(\"quality\", this.quality());}\n    if (this._merge) { url = url+makeParam(\"merge\", this.merge());}\n    if (this._mergeGaps) { url = url+makeParam(\"mergegaps\", this.mergeGaps());}\n    if (this._show) { url = url+makeParam(\"show\", this.show());}\n    if (isNumArg(this._limit) && this._limit>0) { url = url+makeParam(\"limit\", this.limit());}\n    if (this._orderby) { url = url+makeParam(\"orderby\", this.orderby());}\n    if (this._includerestricted) { url = url+makeParam(\"includerestricted\", this.includeRestricted());}\n    if (this._format) { url = url+makeParam(\"format\", this.format());}\n    if (this._nodata) { url = url+makeParam(\"nodata\", this.nodata());}\n\n    if (url.endsWith('&') || url.endsWith('?')) {\n      url = url.substr(0, url.length-1); // zap last & or ?\n    }\n    return url;\n  }\n}\n\n/* The below are slighly modified from json schema to flow autogenerator.\n*\n* */\n\n/**\n * Root type of availablility json query.\n */\nexport type RootType = {\n  created?: FdsnDateTime,\n  version: Object,\n  datasources: Array<Datasource>\n} & Object;\nexport type FdsnDateTime = string;\nexport type Datasource = ({\n  network: string,\n  station: string,\n  location: string,\n  channel: string,\n  quality?: string,\n  samplerate?: number,\n  timespans?: Array<Array<FdsnDateTime>>,\n  earliest?: FdsnDateTime,\n  latest?: FdsnDateTime,\n  updated?: FdsnDateTime,\n  timespanCount?: number,\n  restriction?: string\n} & Object) &\n  (({ timespans: any } & Object) | ({ earliest: any, latest: any } & Object));\n"],"names":["FORMAT_JSON","FORMAT_TEXT","FORMAT_GEOCSV","FORMAT_REQUEST","EMPTY_JSON","JSON","parse","SERVICE_VERSION","SERVICE_NAME","IRIS_HOST","AvailabilityQuery","constructor","host","_specVersion","_protocol","checkProtocol","isNonEmptyStringArg","_host","_port","_timeoutSec","specVersion","value","hasArgs","hasNoArgs","Error","protocol","isStringArg","nodata","_nodata","port","networkCode","_networkCode","stationCode","_stationCode","locationCode","_locationCode","channelCode","_channelCode","startTime","_startTime","checkStringOrDate","endTime","_endTime","timeWindow","se","quality","_quality","merge","_merge","mergeGaps","isNumArg","_mergeGaps","show","_show","limit","_limit","orderby","_orderby","includeRestricted","_includerestricted","format","_format","timeout","query","queryJson","then","json","extractFromJson","mythis","url","formURL","fetchInit","defaultFetchInitObj","JSON_MIME","doFetchWithTimeout","response","status","contentType","headers","get","includes","TypeError","extent","extentJson","postQuery","channelTimeList","postQueryJson","postExtent","postExtentJson","postJson","method","postRaw","length","RSVP","hash","ok","body","createPostBody","fetch","formBaseURL","jsonChanTimes","out","knownNets","Map","isDef","datasources","ds","n","network","Network","set","s","ss","stations","station","Station","push","c","Channel","channel","earliest","latest","SeismogramDisplayData","fromChannelAndTimes","moment","utc","timespans","ts","makePostParm","ct","sta","net","toISOString","colon","endsWith","formVersionURL","queryVersion","TEXT_MIME","text","name","val","stringify","makeParam","toIsoWoZ","substr"],"mappings":";;;;;;AAEA;;;;;AAiBA;;MACaA,WAAW,GAAG;AAC3B;;MACaC,WAAW,GAAG;AAC3B;;MACaC,aAAa,GAAG;AAC7B;;MACaC,cAAc,GAAG;AAE9B;;MACaC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAX;AAE1B;;;;;MAIaC,eAAe,GAAG;AAC/B;;;;;MAIaC,YAAY,iCAA0BD,eAA1B;MAEZE,SAAS,GAAG;AAEzB;;;;;;;;AAOO,MAAMC,iBAAN,CAAwB;AAC7B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AAEAC,EAAAA,WAAW,CAACC,IAAD,EAAgB;AACzB,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,SAAL,GAAiBC,aAAa,EAA9B;;AACA,QAAIC,mBAAmB,CAACJ,IAAD,CAAvB,EAA+B;AAC7B,WAAKK,KAAL,GAAaL,IAAb;AACD,KAFD,MAEO;AACL,WAAKK,KAAL,GAAaR,SAAb;AACD;;AACD,SAAKS,KAAL,GAAa,EAAb;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACD;AACD;;;;;;;;;;AAQAC,EAAAA,WAAW,CAACC,KAAD,EAA6C;AACtD,QAAIC,OAAO,CAACD,KAAD,CAAX,EAAoB;AAClB,WAAKR,YAAL,GAAoBQ,KAApB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKR,YAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIW,KAAJ,CAAU,mDAAiD,OAAOH,KAAlE,CAAN;AACD;AACF;AACD;;;;;;;;;AAOAI,EAAAA,QAAQ,CAACJ,KAAD,EAA6C;AACnD,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKP,SAAL,GAAiBO,KAAjB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKP,SAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIU,KAAJ,CAAU,mDAAiD,OAAOH,KAAlE,CAAN;AACD;AACF;AACD;;;;;;;;AAMAT,EAAAA,IAAI,CAACS,KAAD,EAA6C;AAC/C,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKJ,KAAL,GAAaI,KAAb;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKJ,KAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIO,KAAJ,CAAU,mDAAiD,OAAOH,KAAlE,CAAN;AACD;AACF;AACD;;;;;;;;;AAOAM,EAAAA,MAAM,CAACN,KAAD,EAA6C;AACjD,QAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AACpB,aAAO,KAAKO,OAAZ;AACD,KAFD,MAEO,IAAIN,OAAO,CAACD,KAAD,CAAX,EAAoB;AACzB,WAAKO,OAAL,GAAeP,KAAf;AACA,aAAO,IAAP;AACD,KAHM,MAGA;AACL,YAAM,IAAIG,KAAJ,CAAU,mDAAiD,OAAOH,KAAlE,CAAN;AACD;AACF;AACD;;;;;;;;AAMAQ,EAAAA,IAAI,CAACR,KAAD,EAA6C;AAC/C,QAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AACpB,aAAO,KAAKH,KAAZ;AACD,KAFD,MAEO,IAAII,OAAO,CAACD,KAAD,CAAX,EAAoB;AACzB,WAAKH,KAAL,GAAaG,KAAb;AACA,aAAO,IAAP;AACD,KAHM,MAGA;AACL,YAAM,IAAIG,KAAJ,CAAU,mDAAiD,OAAOH,KAAlE,CAAN;AACD;AACF;AACD;;;;;;;;AAMAS,EAAAA,WAAW,CAACT,KAAD,EAA6C;AACtD,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKU,YAAL,GAAoBV,KAApB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKU,YAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIP,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;;AAMAW,EAAAA,WAAW,CAACX,KAAD,EAA6C;AACtD,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKY,YAAL,GAAoBZ,KAApB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKY,YAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIT,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;;AAMAa,EAAAA,YAAY,CAACb,KAAD,EAA6C;AACvD,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKc,aAAL,GAAqBd,KAArB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKc,aAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIX,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;;AAMAe,EAAAA,WAAW,CAACf,KAAD,EAA6C;AACtD,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKgB,YAAL,GAAoBhB,KAApB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKgB,YAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIb,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;;AAMAiB,EAAAA,SAAS,CAACjB,KAAD,EAA6C;AACpD,QAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AACpB,aAAO,KAAKkB,UAAZ;AACD,KAFD,MAEO,IAAIjB,OAAO,CAACD,KAAD,CAAX,EAAoB;AACzB,WAAKkB,UAAL,GAAkBC,iBAAiB,CAACnB,KAAD,CAAnC;AACA,aAAO,IAAP;AACD,KAHM,MAGA;AACL,YAAM,IAAIG,KAAJ,CAAU,6DAA2D,OAAOH,KAA5E,CAAN;AACD;AACF;AACD;;;;;;;;AAMAoB,EAAAA,OAAO,CAACpB,KAAD,EAA6C;AAClD,QAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AACpB,aAAO,KAAKqB,QAAZ;AACD,KAFD,MAEO,IAAIpB,OAAO,CAACD,KAAD,CAAX,EAAoB;AACzB,WAAKqB,QAAL,GAAgBF,iBAAiB,CAACnB,KAAD,CAAjC;AACA,aAAO,IAAP;AACD,KAHM,MAGA;AACL,YAAM,IAAIG,KAAJ,CAAU,6DAA2D,OAAOH,KAA5E,CAAN;AACD;AACF;AACD;;;;;;;;AAMAsB,EAAAA,UAAU,CAACC,EAAD,EAA0C;AAClD,SAAKN,SAAL,CAAeM,EAAE,CAACN,SAAlB;AACA,SAAKG,OAAL,CAAaG,EAAE,CAACH,OAAhB;AACA,WAAO,IAAP;AACD;AACD;;;;;;;;AAMAI,EAAAA,OAAO,CAACxB,KAAD,EAA6C;AAClD,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKyB,QAAL,GAAgBzB,KAAhB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKyB,QAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAItB,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;;AAMA0B,EAAAA,KAAK,CAAC1B,KAAD,EAA6C;AAChD,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAK2B,MAAL,GAAc3B,KAAd;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAK2B,MAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIxB,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;;AAMA4B,EAAAA,SAAS,CAAC5B,KAAD,EAA6C;AACpD,QAAI6B,QAAQ,CAAC7B,KAAD,CAAZ,EAAqB;AACnB,WAAK8B,UAAL,GAAkB9B,KAAlB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAK8B,UAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAI3B,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;;AAMA+B,EAAAA,IAAI,CAAC/B,KAAD,EAA6C;AAC/C,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKgC,KAAL,GAAahC,KAAb;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKgC,KAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAI7B,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;;AAMAiC,EAAAA,KAAK,CAACjC,KAAD,EAA6C;AAChD,QAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AACpB,aAAO,KAAKkC,MAAZ;AACD,KAFD,MAEO,IAAIjC,OAAO,CAACD,KAAD,CAAX,EAAoB;AACzB,WAAKkC,MAAL,GAAclC,KAAd;AACA,aAAO,IAAP;AACD,KAHM,MAGA;AACL,YAAM,IAAIG,KAAJ,CAAU,mDAAiD,OAAOH,KAAlE,CAAN;AACD;AACF;AACD;;;;;;;;AAMAmC,EAAAA,OAAO,CAACnC,KAAD,EAA6C;AAClD,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKoC,QAAL,GAAgBpC,KAAhB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKoC,QAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIjC,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;;AAMAqC,EAAAA,iBAAiB,CAACrC,KAAD,EAA+C;AAC9D,QAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AACpB,aAAO,KAAKsC,kBAAZ;AACD,KAFD,MAEO,IAAIrC,OAAO,CAACD,KAAD,CAAX,EAAoB;AACzB,WAAKsC,kBAAL,GAA0BtC,KAA1B;AACA,aAAO,IAAP;AACD,KAHM,MAGA;AACL,YAAM,IAAIG,KAAJ,CAAU,oDAAkD,OAAOH,KAAnE,CAAN;AACD;AACF;AAED;;;;;;;;;AAOAuC,EAAAA,MAAM,CAACvC,KAAD,EAA6C;AACjD,QAAIK,WAAW,CAACL,KAAD,CAAf,EAAwB;AACtB,WAAKwC,OAAL,GAAexC,KAAf;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AAC3B,aAAO,KAAKwC,OAAZ;AACD,KAFM,MAEA;AACL,YAAM,IAAIrC,KAAJ,CAAU,mDAAiDH,KAA3D,CAAN;AACD;AACF;AACD;;;;;;;AAKAyC,EAAAA,OAAO,CAACzC,KAAD,EAA6C;AAClD,QAAIE,SAAS,CAACF,KAAD,CAAb,EAAsB;AACpB,aAAO,KAAKF,WAAZ;AACD,KAFD,MAEO,IAAI+B,QAAQ,CAAC7B,KAAD,CAAZ,EAAqB;AAC1B,WAAKF,WAAL,GAAmBE,KAAnB;AACA,aAAO,IAAP;AACD,KAHM,MAGA;AACL,YAAM,IAAIG,KAAJ,CAAU,mDAAiD,OAAOH,KAAlE,CAAN;AACD;AACF;AACD;;;;;;;;;;AAQA0C,EAAAA,KAAK,GAA0C;AAC7C,WAAO,KAAKC,SAAL,GAAiBC,IAAjB,CAAsB,UAASC,IAAT,EAAe;AACtC,aAAO,KAAKC,eAAL,CAAqBD,IAArB,CAAP;AACH,KAFI,CAAP;AAGD;AACD;;;;;;;AAKAF,EAAAA,SAAS,GAAoB;AAC3B,UAAMI,MAAM,GAAG,IAAf;AACA,SAAKR,MAAL,CAAY5D,WAAZ;AACA,UAAMqE,GAAG,GAAG,KAAKC,OAAL,CAAa,OAAb,CAAZ;AACA,UAAMC,SAAS,GAAGC,mBAAmB,CAACC,SAAD,CAArC;AACA,WAAOC,kBAAkB,CAACL,GAAD,EAAME,SAAN,EAAiB,KAAKpD,WAAL,GAAmB,IAApC,CAAlB,CACJ8C,IADI,CACC,UAASU,QAAT,EAAmB;AACvB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA4BR,MAAM,CAACzC,MAAP,MAAmBgD,QAAQ,CAACC,MAAT,KAAoBR,MAAM,CAACzC,MAAP,EAAvE,EAAyF;AACvF,eAAOvB,UAAP;AACD;;AACD,UAAIyE,WAAW,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAlB;;AACA,UAAG/D,mBAAmB,CAAC6D,WAAD,CAAnB,IAAoCA,WAAW,CAACG,QAAZ,CAAqBP,SAArB,CAAvC,EAAwE;AACtE,eAAOE,QAAQ,CAACT,IAAT,EAAP;AACD,OAPsB;;;AASvB,YAAM,IAAIe,SAAJ,sCAA4CJ,WAA5C,EAAN;AACD,KAXI,CAAP;AAYD;AAED;;;;;;;;;;AAQAK,EAAAA,MAAM,GAA0C;AAC9C,WAAO,KAAKC,UAAL,GAAkBlB,IAAlB,CAAuB,UAASC,IAAT,EAAe;AACvC,aAAO,KAAKC,eAAL,CAAqBD,IAArB,CAAP;AACH,KAFI,CAAP;AAGD;AACD;;;;;;;AAKAiB,EAAAA,UAAU,GAAG;AACX,UAAMf,MAAM,GAAG,IAAf;AACA,SAAKR,MAAL,CAAY5D,WAAZ;AACA,UAAMqE,GAAG,GAAG,KAAKC,OAAL,CAAa,QAAb,CAAZ;AACA,UAAMC,SAAS,GAAGC,mBAAmB,CAACC,SAAD,CAArC;AACA,WAAOC,kBAAkB,CAACL,GAAD,EAAME,SAAN,EAAiB,KAAKpD,WAAL,GAAmB,IAApC,CAAlB,CACN8C,IADM,CACD,UAASU,QAAT,EAAmB;AACrB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA4BR,MAAM,CAACzC,MAAP,MAAmBgD,QAAQ,CAACC,MAAT,KAAoBR,MAAM,CAACzC,MAAP,EAAvE,EAAyF;AACvF,eAAOvB,UAAP;AACD;;AACD,UAAIyE,WAAW,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAlB;;AACA,UAAG/D,mBAAmB,CAAC6D,WAAD,CAAnB,IAAoCA,WAAW,CAACG,QAAZ,CAAqBP,SAArB,CAAvC,EAAwE;AACtE,eAAOE,QAAQ,CAACT,IAAT,EAAP;AACD,OAPoB;;;AASrB,YAAM,IAAIe,SAAJ,sCAA4CJ,WAA5C,EAAN;AACD,KAXI,CAAP;AAYD;AAED;;;;;;;;;;;;AAUAO,EAAAA,SAAS,CAACC,eAAD,EAAuF;AAC9F,WAAO,KAAKC,aAAL,CAAmBD,eAAnB,EAAoCpB,IAApC,CAAyCC,IAAI,IAAI;AACtD,aAAO,KAAKC,eAAL,CAAqBD,IAArB,CAAP;AACD,KAFM,CAAP;AAGD;;AACDqB,EAAAA,UAAU,CAACF,eAAD,EAAuF;AAC/F,WAAO,KAAKG,cAAL,CAAoBH,eAApB,EAAqCpB,IAArC,CAA0CC,IAAI,IAAI;AACvD,aAAO,KAAKC,eAAL,CAAqBD,IAArB,CAAP;AACD,KAFM,CAAP;AAGD;;AAEDsB,EAAAA,cAAc,CAACH,eAAD,EAAmE;AAC/E,WAAO,KAAKI,QAAL,CAAcJ,eAAd,EAA+B,QAA/B,CAAP;AACD;;AACDC,EAAAA,aAAa,CAACD,eAAD,EAAmE;AAC9E,WAAO,KAAKI,QAAL,CAAcJ,eAAd,EAA+B,OAA/B,CAAP;AACD;;AACDI,EAAAA,QAAQ,CAACJ,eAAD,EAAgDK,MAAhD,EAAmF;AACzF,UAAMtB,MAAM,GAAG,IAAf;AACA,SAAKR,MAAL,CAAY5D,WAAZ;AACA,WAAO,KAAK2F,OAAL,CAAaN,eAAb,EAA8BK,MAA9B,EAAsCzB,IAAtC,CAA2C,UAASU,QAAT,EAAmB;AACjE,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA4BR,MAAM,CAACzC,MAAP,MAAmBgD,QAAQ,CAACC,MAAT,KAAoBR,MAAM,CAACzC,MAAP,EAAvE,EAAyF;AACvF,eAAOvB,UAAP;AACD;;AACD,UAAIyE,WAAW,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAlB;;AACA,UAAG/D,mBAAmB,CAAC6D,WAAD,CAAnB,IAAoCA,WAAW,CAACG,QAAZ,CAAqBP,SAArB,CAAvC,EAAwE;AACtE,eAAOE,QAAQ,CAACT,IAAT,EAAP;AACD,OAPgE;;;AASjE,YAAM,IAAIe,SAAJ,sCAA4CJ,WAA5C,EAAN;AACD,KAVI,CAAP;AAWD;;AACDc,EAAAA,OAAO,CAACN,eAAD,EAAgDK,MAAhD,EAAmF;AACxF,QAAIL,eAAe,CAACO,MAAhB,KAA2B,CAA/B,EAAkC;AAChC;AACA,aAAOC,aAAI,CAACC,IAAL,CAAU;AACfC,QAAAA,EAAE,EAAE;AADW,OAAV,CAAP;AAGD,KALD,MAKO;AACL,YAAMxB,SAAS,GAAGC,mBAAmB,CAACC,SAAD,CAArC;AACAF,MAAAA,SAAS,CAACmB,MAAV,GAAmB,MAAnB;AACAnB,MAAAA,SAAS,CAACyB,IAAV,GAAiB,KAAKC,cAAL,CAAoBZ,eAApB,CAAjB;AACA,aAAOa,KAAK,CAAC,KAAKC,WAAL,gBAAuBT,MAAvB,MAAD,EAAmCnB,SAAnC,CAAL,CAAmDN,IAAnD,CAAwD,UAASU,QAAT,EAAmB;AAC9E,YAAGA,QAAQ,CAACoB,EAAZ,EAAgB;AACd,iBAAOpB,QAAP;AACD;;AACD,cAAM,IAAInD,KAAJ,CAAU,4BAAV,CAAN;AACD,OALI,CAAP;AAMD;AACF;;AAED2C,EAAAA,eAAe,CAACiC,aAAD,EAAwD;AACrE,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIC,SAAS,GAAG,IAAIC,GAAJ,EAAhB;;AACA,QAAIC,KAAK,CAACJ,aAAa,CAACK,WAAf,CAAT,EAAqC;AACnC,WAAK,IAAIC,EAAT,IAAeN,aAAa,CAACK,WAA7B,EAA0C;AACxC,YAAIE,CAAC,GAAGL,SAAS,CAACvB,GAAV,CAAc2B,EAAE,CAACE,OAAjB,CAAR;;AACA,YAAK,CAAED,CAAP,EAAU;AACRA,UAAAA,CAAC,GAAG,IAAIE,OAAJ,CAAYH,EAAE,CAACE,OAAf,CAAJ;AACAN,UAAAA,SAAS,CAACQ,GAAV,CAAcJ,EAAE,CAACE,OAAjB,EAA0BD,CAA1B;AACD;;AACD,YAAII,CAAC,GAAG,IAAR;;AACA,aAAK,IAAIC,EAAT,IAAeL,CAAC,CAACM,QAAjB,EAA2B;AACzB,cAAID,EAAE,CAAChF,WAAH,KAAmB0E,EAAE,CAACQ,OAA1B,EAAmC;AACjCH,YAAAA,CAAC,GAAGC,EAAJ;AACD;AACF;;AACD,YAAK,CAAED,CAAP,EAAU;AACRA,UAAAA,CAAC,GAAG,IAAII,OAAJ,CAAYR,CAAZ,EAAeD,EAAE,CAACQ,OAAlB,CAAJ;AACAP,UAAAA,CAAC,CAACM,QAAF,CAAWG,IAAX,CAAgBL,CAAhB;AACD;;AACD,YAAIM,CAAC,GAAG,IAAIC,OAAJ,CAAYP,CAAZ,EAAeL,EAAE,CAACa,OAAlB,EAA2Bb,EAAE,CAACxE,YAA9B,CAAR;;AACA,YAAIlB,mBAAmB,CAAC0F,EAAE,CAACc,QAAJ,CAAnB,IAAoCxG,mBAAmB,CAAC0F,EAAE,CAACe,MAAJ,CAA3D,EAAuE;AACrEpB,UAAAA,GAAG,CAACe,IAAJ,CAAUM,qBAAqB,CAACC,mBAAtB,CAA0CN,CAA1C,EAA6CO,QAAM,CAACC,GAAP,CAAWnB,EAAE,CAACc,QAAd,CAA7C,EAAsEI,QAAM,CAACC,GAAP,CAAWnB,EAAE,CAACe,MAAd,CAAtE,CAAV;AACD,SAFD,MAEO,IAAIf,EAAE,CAACoB,SAAP,EAAkB;AACvB,eAAK,IAAIC,EAAT,IAAerB,EAAE,CAACoB,SAAlB,EAA6B;AAC3BzB,YAAAA,GAAG,CAACe,IAAJ,CAASM,qBAAqB,CAACC,mBAAtB,CAA0CN,CAA1C,EAA8CO,QAAM,CAACC,GAAP,CAAWE,EAAE,CAAC,CAAD,CAAb,CAA9C,EAAiEH,QAAM,CAACC,GAAP,CAAWE,EAAE,CAAC,CAAD,CAAb,CAAjE,CAAT;AACD;AACF;AACF;AACF;;AACD,WAAO1B,GAAP;AACD;;AAEDJ,EAAAA,cAAc,CAACZ,eAAD,EAAwD;AACpE,QAAIgB,GAAG,GAAG,EAAV;;AACA,QAAI,KAAKvD,QAAT,EAAmB;AAAEuD,MAAAA,GAAG,IAAI,KAAK2B,YAAL,CAAkB,SAAlB,EAA6B,KAAKnF,OAAL,EAA7B,CAAP;AAAqD;;AAC1E,QAAI,KAAKG,MAAT,EAAiB;AAAEqD,MAAAA,GAAG,IAAI,KAAK2B,YAAL,CAAkB,OAAlB,EAA2B,KAAKjF,KAAL,EAA3B,CAAP;AAAiD;;AACpE,QAAIG,QAAQ,CAAC,KAAKC,UAAN,CAAR,KAA8B,KAAKU,OAAL,KAAiB,OAAjB,IAA4B,KAAKA,OAAL,KAAiB,WAA3E,CAAJ,EAA6F;AAC3FwC,MAAAA,GAAG,IAAI,KAAK2B,YAAL,CAAkB,WAAlB,EAA+B,KAAK/E,SAAL,EAA/B,CAAP;AACD;;AACD,QAAI,KAAKI,KAAL,KAAe,KAAKQ,OAAL,KAAiB,OAAjB,IAA4B,KAAKA,OAAL,KAAiB,WAA5D,CAAJ,EAA8E;AAC5EwC,MAAAA,GAAG,IAAI,KAAK2B,YAAL,CAAkB,MAAlB,EAA0B,KAAK5E,IAAL,EAA1B,CAAP;AACD;;AACD,QAAIF,QAAQ,CAAC,KAAKK,MAAN,CAAR,IAAyB,KAAKA,MAAL,GAAY,CAAzC,EAA4C;AAAE8C,MAAAA,GAAG,IAAI,KAAK2B,YAAL,CAAkB,OAAlB,EAA2B,KAAK1E,KAAL,EAA3B,CAAP;AAAiD;;AAC/F,QAAI,KAAKG,QAAT,EAAmB;AAAE4C,MAAAA,GAAG,IAAI,KAAK2B,YAAL,CAAkB,SAAlB,EAA6B,KAAKxE,OAAL,EAA7B,CAAP;AAAqD;;AAC1E,QAAI,KAAKG,kBAAT,EAA6B;AAAE0C,MAAAA,GAAG,IAAI,KAAK2B,YAAL,CAAkB,mBAAlB,EAAuC,KAAKtE,iBAAL,EAAvC,CAAP;AAAyE;;AACxG,QAAI,KAAKG,OAAT,EAAkB;AAAEwC,MAAAA,GAAG,IAAI,KAAK2B,YAAL,CAAkB,QAAlB,EAA4B,KAAKpE,MAAL,EAA5B,CAAP;AAAmD;;AACvE,QAAI,KAAKhC,OAAT,EAAkB;AAAEyE,MAAAA,GAAG,IAAI,KAAK2B,YAAL,CAAkB,QAAlB,EAA4B,KAAKrG,MAAL,EAA5B,CAAP;AAAmD;;AAEvE,SAAK,IAAIsG,EAAT,IAAe5C,eAAf,EAAgC;AAC9B,UAAKmB,KAAK,CAACyB,EAAE,CAACV,OAAJ,CAAV,EAAwB;AACtB,YAAIW,GAAG,GAAGD,EAAE,CAACV,OAAH,CAAWL,OAArB;AACA,YAAIiB,GAAG,GAAGD,GAAG,CAACtB,OAAd;AACAP,QAAAA,GAAG,cAAO8B,GAAG,CAACrG,WAAX,cAA0BoG,GAAG,CAAClG,WAA9B,cAA6CiG,EAAE,CAACV,OAAH,CAAWrF,YAAxD,cAAwE+F,EAAE,CAACV,OAAH,CAAWnF,WAAnF,cAAkG6F,EAAE,CAAC3F,SAAH,CAAa8F,WAAb,EAAlG,cAAgIH,EAAE,CAACxF,OAAH,CAAW2F,WAAX,EAAhI,CAAH;AACA/B,QAAAA,GAAG,IAAI,IAAP;AACD,OALD,MAKO;AACL,cAAM,IAAI7E,KAAJ,CAAU,sCAAV,CAAN;AACD;AACF;;AACD,WAAO6E,GAAP;AACD;;AAEDF,EAAAA,WAAW,GAAW;AAClB,QAAIkC,KAAK,GAAG,GAAZ;;AACA,QAAI,KAAKvH,SAAL,CAAewH,QAAf,CAAwBD,KAAxB,CAAJ,EAAoC;AAClCA,MAAAA,KAAK,GAAG,EAAR;AACD;;AACD,WAAO,KAAKvH,SAAL,GAAeuH,KAAf,GAAqB,IAArB,GAA0B,KAAKpH,KAA/B,IAAsC,KAAKC,KAAL,KAAa,EAAb,GAAgB,EAAhB,GAAoB,MAAI,KAAKA,KAAnE,IAA2E,uBAA3E,GAAmG,KAAKL,YAA/G;AACH;;AAED0H,EAAAA,cAAc,GAAW;AACvB,WAAO,KAAKpC,WAAL,KAAmB,UAA1B;AACD;AACD;;;;;;;AAKAqC,EAAAA,YAAY,GAAoB;AAC9B,QAAInE,GAAG,GAAG,KAAKkE,cAAL,EAAV;AACA,UAAMhE,SAAS,GAAGC,mBAAmB,CAACiE,SAAD,CAArC;AACA,WAAO/D,kBAAkB,CAACL,GAAD,EAAME,SAAN,EAAiB,KAAKpD,WAAL,GAAmB,IAApC,CAAlB,CACJ8C,IADI,CACCU,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,eAAOD,QAAQ,CAAC+D,IAAT,EAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIlH,KAAJ,2BAA6BmD,QAAQ,CAACC,MAAtC,EAAN;AACD;AACJ,KAPI,CAAP;AAQD;;AAEDoD,EAAAA,YAAY,CAACW,IAAD,EAAeC,GAAf,EAAmC;AAC7C,WAAOD,IAAI,GAAC,GAAL,GAASE,SAAS,CAACD,GAAD,CAAlB,GAAwB,IAA/B;AACD;;AAEDtE,EAAAA,OAAO,CAACoB,MAAD,EAAyB;AAC9B,QAAInE,SAAS,CAACmE,MAAD,CAAb,EAAuB;AACrBA,MAAAA,MAAM,GAAG,OAAT;AACD;;AACD,QAAIrB,GAAG,GAAG,KAAK8B,WAAL,gBAAuBT,MAAvB,MAAV;;AACA,QAAI,KAAK3D,YAAT,EAAuB;AAAEsC,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,KAAD,EAAQ,KAAKhH,WAAL,EAAR,CAAnB;AAAgD;;AACzE,QAAI,KAAKG,YAAT,EAAuB;AAAEoC,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,KAAD,EAAQ,KAAK9G,WAAL,EAAR,CAAnB;AAAgD;;AACzE,QAAI,KAAKG,aAAT,EAAwB;AAAEkC,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,KAAD,EAAQ,KAAK5G,YAAL,EAAR,CAAnB;AAAiD;;AAC3E,QAAI,KAAKG,YAAT,EAAuB;AAAEgC,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,KAAD,EAAQ,KAAK1G,WAAL,EAAR,CAAnB;AAAgD;;AACzE,QAAI,KAAKG,UAAT,EAAqB;AAAE8B,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,WAAD,EAAcC,QAAQ,CAAC,KAAKzG,SAAL,EAAD,CAAtB,CAAnB;AAA8D;;AACrF,QAAI,KAAKI,QAAT,EAAmB;AAAE2B,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,SAAD,EAAYC,QAAQ,CAAC,KAAKtG,OAAL,EAAD,CAApB,CAAnB;AAA0D;;AAC/E,QAAI,KAAKK,QAAT,EAAmB;AAAEuB,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,SAAD,EAAY,KAAKjG,OAAL,EAAZ,CAAnB;AAAgD;;AACrE,QAAI,KAAKG,MAAT,EAAiB;AAAEqB,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,OAAD,EAAU,KAAK/F,KAAL,EAAV,CAAnB;AAA4C;;AAC/D,QAAI,KAAKI,UAAT,EAAqB;AAAEkB,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,WAAD,EAAc,KAAK7F,SAAL,EAAd,CAAnB;AAAoD;;AAC3E,QAAI,KAAKI,KAAT,EAAgB;AAAEgB,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,MAAD,EAAS,KAAK1F,IAAL,EAAT,CAAnB;AAA0C;;AAC5D,QAAIF,QAAQ,CAAC,KAAKK,MAAN,CAAR,IAAyB,KAAKA,MAAL,GAAY,CAAzC,EAA4C;AAAEc,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,OAAD,EAAU,KAAKxF,KAAL,EAAV,CAAnB;AAA4C;;AAC1F,QAAI,KAAKG,QAAT,EAAmB;AAAEY,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,SAAD,EAAY,KAAKtF,OAAL,EAAZ,CAAnB;AAAgD;;AACrE,QAAI,KAAKG,kBAAT,EAA6B;AAAEU,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,mBAAD,EAAsB,KAAKpF,iBAAL,EAAtB,CAAnB;AAAoE;;AACnG,QAAI,KAAKG,OAAT,EAAkB;AAAEQ,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,QAAD,EAAW,KAAKlF,MAAL,EAAX,CAAnB;AAA8C;;AAClE,QAAI,KAAKhC,OAAT,EAAkB;AAAEyC,MAAAA,GAAG,GAAGA,GAAG,GAACyE,SAAS,CAAC,QAAD,EAAW,KAAKnH,MAAL,EAAX,CAAnB;AAA8C;;AAElE,QAAI0C,GAAG,CAACiE,QAAJ,CAAa,GAAb,KAAqBjE,GAAG,CAACiE,QAAJ,CAAa,GAAb,CAAzB,EAA4C;AAC1CjE,MAAAA,GAAG,GAAGA,GAAG,CAAC2E,MAAJ,CAAW,CAAX,EAAc3E,GAAG,CAACuB,MAAJ,GAAW,CAAzB,CAAN,CAD0C;AAE3C;;AACD,WAAOvB,GAAP;AACD;;AAnoB4B;AAsoB/B;;;;AAIA;;;;;;"}