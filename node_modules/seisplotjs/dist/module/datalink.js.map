{"version":3,"file":"datalink.js","sources":["../../src/datalink.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport * as util from './util.js'; // for util.log\nimport {dataViewToString, stringify, isDef, isNonEmptyStringArg} from './util';\nimport * as miniseed from './miniseed';\nimport * as RSVP from 'rsvp';\nimport moment from 'moment';\n\n/** const for datalink protocol for web sockets, DataLink1.0 */\nexport const DATALINK_PROTOCOL = \"DataLink1.0\";\n/** const for query mode, QUERY */\nexport const QUERY_MODE = \"QUERY\";\n/** const for streaming mode, STREAM */\nexport const STREAM_MODE = \"STREAM\";\n/** const for maximum process number to create fake number for datalink id, 2^16-2 */\nexport const MAX_PROC_NUM = Math.pow(2, 16)-2;\n/** const for fake user name for datalink id, browser */\nexport const USER_BROWSER = \"browser\";\n/** const for fake program name for datalink id, seisplotjs */\nexport const DEFAULT_PROGRAM = \"seisplotjs\";\n/** const for fake architecture for datalink id, javascript */\nexport const DEFAULT_ARCH = \"javascript\";\n\n/** const for error response, ERROR */\nexport const ERROR = \"ERROR\";\nexport const PACKET = \"PACKET\";\nexport const STREAM = \"STREAM\";\nexport const ENDSTREAM = \"ENDSTREAM\";\nexport const MSEED_TYPE = \"/MSEED\";\n\nexport const IRIS_RINGSERVER_URL = \"ws://rtserve.iris.washington.edu/datalink\";\n\nlet defaultHandleResponse = function(message) {\n  util.log(\"Unhandled datalink response: \"+message);\n};\n\n/**\n * A websocket based Datalink connection to a ringserver.\n * Currently only the IRIS\n * ringserver, https://github.com/iris-edu/ringserver,\n * supports websockets, but it may be possible to use thrid party\n * tools to proxy the websocket to a TCP datalink socket.\n * The datalink protocol is documented here\n *  https://raw.githubusercontent.com/iris-edu/libdali/master/doc/DataLink.protocol\n *\n * @param url websocket url to the ringserver\n * @param packetHandler callback for packets as they arrive\n * @param errorHandler callback for errors\n */\nexport class DataLinkConnection {\n  url: string;\n  /** @private */\n  _mode: string | null;\n  packetHandler: (packet: DataLinkPacket) => void;\n  errorHandler: (error: Error) => void;\n  closeHandler: null | (close: CloseEvent) => void;\n  serverId: string | null;\n  clientIdNum: number;\n  programname: string;\n  username: string;\n  architecture: string;\n  _responseResolve: null | (response: DataLinkResponse) => void;\n  _responseReject: null | (error: Error) => void;\n  webSocket: WebSocket | null;\n  constructor(url: string, packetHandler: (packet: DataLinkPacket) => void, errorHandler: (error: Error) => void) {\n    this.url = url;\n    this._mode = QUERY_MODE;\n    this.packetHandler = packetHandler;\n    this.errorHandler = errorHandler;\n    this.closeHandler = null;\n    this.serverId = null;\n    // meant to be processId, so use 1 <= num <= 2^15 to be safe\n    this.clientIdNum = Math.floor(Math.random() * MAX_PROC_NUM)+1;\n    this.programname = DEFAULT_PROGRAM;\n    this.username = USER_BROWSER;\n    this.architecture = DEFAULT_ARCH;\n    this._responseResolve = null;\n    this._responseReject = null;\n  }\n\n  /**\n   * Set a callback function called when the connection is closed.\n   *\n   * @param  closeHandler callback function\n   */\n  setOnClose(closeHandler: (close: CloseEvent) => void) {\n    this.closeHandler = closeHandler;\n  }\n\n  /**\n   * creates the websocket connection and sends the client ID.\n   *\n   *  @returns a Promise that resolves to the server's ID.\n   */\n  connect() {\n    const that = this;\n    return new RSVP.Promise(function(resolve, reject) {\n      const webSocket = new WebSocket(that.url, DATALINK_PROTOCOL);\n      that.webSocket = webSocket;\n      webSocket.binaryType = 'arraybuffer';\n      webSocket.onmessage = function(event) {\n        that.handle(event);\n      };\n      webSocket.onerror = function(event) {\n        that.handleError(new Error(\"\"+stringify(event)));\n        reject(event);\n      };\n      webSocket.onclose = function(closeEvent) {\n        that.webSocket = null; // clean up\n        that._mode = QUERY_MODE;\n        if (that.closeHandler) {\n          that.closeHandler(closeEvent);\n        }\n      };\n      webSocket.onopen = function() {\n        resolve(that);\n      };\n    }).then(datalink => {\n      return datalink.sendId();\n    }).then( idmsg => {\n      that.serverId = idmsg;\n      return idmsg;\n    });\n  }\n\n/**\n * @returns true if the websocket is connected (non-null)\n */\n  isConnected(): boolean {\n    return this.webSocket !== null;\n  }\n  /**\n   * @returns the current mode, QUERY_MODE or STREAM_MODE\n   *\n   */\n  get mode() { return this._mode;}\n\n  /**\n   * Switches to streaming mode to receive data packets from the ringserver.\n   */\n  stream(): void {\n    if (this._mode === STREAM_MODE) {return;}\n    this._mode = STREAM_MODE;\n    this.sendDLCommand(STREAM, \"\");\n  }\n\n  /**\n   * Switches back to query mode to enable commands to be sent to the ringserver.\n   */\n  endStream(): void {\n    if (this.webSocket === null || this._mode === null || this._mode === QUERY_MODE) {return;}\n    this._mode = QUERY_MODE;\n    this.sendDLCommand(ENDSTREAM, \"\");\n  }\n\n  /**\n   * Closes the connection and the underlying websocket. No communication\n   * is possible until connect() is called again.\n   */\n  close(): void {\n    if (this.webSocket) {\n      this.endStream(); // end streaming just in case\n      if (this.webSocket) {this.webSocket.close();}\n      this.webSocket = null;\n      this._mode = null;\n    }\n  }\n\n  /**\n   * Send a ID Command. Command is a string.\n   *\n   * @returns a Promise that resolves to the response from the ringserver.\n   */\n  sendId(): Promise<string> {\n    const that = this;\n    return this.id(this.programname, this.username, stringify(this.clientIdNum), this.architecture)\n    .then(this.ensureDataLinkResponse)\n    .then(dlResponse => {\n      if (dlResponse.type === 'ID') {\n        that.serverId = ''+dlResponse.message;\n        return that.serverId;\n      } else {\n        throw new Error(\"not ID response: \"+stringify(dlResponse.type));\n      }\n    });\n  }\n\n  /**\n   * encodes as a Datalink packet, header with optional data section as\n   * binary Uint8Array. Size of the binary data is appended\n   * to the header if present.\n   *\n   * @param header the command/header string\n   * @param data optional data portion\n   * @returns datalink packet as an ArrayBuffer\n   */\n  encodeDL(header: string, data?: Uint8Array): ArrayBuffer {\n    let cmdLen = header.length;\n    let len = 3+header.length;\n    let lenStr = \"\";\n    if (data && data.length > 0) {\n      lenStr = String(data.length);\n      len+=lenStr.length+1;\n      cmdLen += lenStr.length+1;\n      len+=data.length;\n\n    }\n    let rawPacket = new ArrayBuffer(len);\n    const binaryPacket = new Uint8Array(rawPacket);\n    let packet = new DataView(rawPacket);\n    packet.setUint8(0, 68); // ascii D\n    packet.setUint8(1, 76); // ascii L\n    packet.setUint8(2, cmdLen);\n    let i = 3;\n    for (const c of header) {\n      packet.setUint8(i, c.charCodeAt(0));\n      i++;\n    }\n    const SPACE = ' ';\n    if (data && data.length > 0) {\n      packet.setUint8(i, SPACE.charCodeAt(0)); // ascii space\n      i++;\n      for (const c of lenStr) {\n        packet.setUint8(i, c.charCodeAt(0));\n        i++;\n      }\n      binaryPacket.set(data, i);\n    }\n    return rawPacket;\n  }\n\n  /** sends the header with optional binary data\n   * as the data section. Size of the data is appended\n   * to the header before sending if present.\n   *\n   * @param header header to send\n   * @param data optional data to send\n   */\n  sendDLBinary(header: string, data?: Uint8Array): void {\n    const rawPacket = this.encodeDL(header, data);\n    if (this.webSocket) {\n      this.webSocket.send(rawPacket);\n    } else {\n      throw new Error(\"WebSocket has been closed.\");\n    }\n  }\n\n  /** sends the command as header with optional dataString\n   * as the data section. Size of the dataString is appended\n   * to the header before sending.\n   *\n   * @param command the command/header string\n   * @param dataString optional data portion of packet\n   */\n  sendDLCommand(command: string, dataString?: string): void {\n    this.sendDLBinary(command, stringToUint8Array(dataString));\n  }\n\n  /**\n   * Send a DataLink Command and await the response. Command is a string.\n   *\n   * @param header packet header\n   * @param data optional data portion of packet\n   * @returns a Promise that resolves with the webSocket MessageEvent.\n   */\n  awaitDLBinary(header: string, data?: Uint8Array): Promise<DataLinkResponse> |  Promise<DataLinkPacket> {\n    let that = this;\n    let promise = new RSVP.Promise(function(resolve, reject) {\n      that._responseResolve = resolve;\n      that._responseReject = reject;\n      that.sendDLBinary(header, data);\n    }).then(response => {\n      that._responseResolve = null;\n      that._responseReject = null;\n      return response;\n    }).catch(error => {\n      that._responseResolve = null;\n      that._responseReject = null;\n      throw error;\n    });\n    return promise;\n  }\n\n\n  /**\n   * Send a DataLink Command and await the response. Command is a string.\n   * Returns a Promise that resolves with the webSocket MessageEvent.\n   *\n   * @param command the command/header string\n   * @param dataString optional data portion of packet\n   * @returns promise to server's response\n   */\n  awaitDLCommand(command: string, dataString?: string): Promise<DataLinkResponse> |  Promise<DataLinkPacket> {\n    return this.awaitDLBinary(command, stringToUint8Array(dataString));\n  }\n\n  /**\n   * Writes data to the ringserver and awaits a acknowledgement.\n   *\n   * @param   streamid    stream id for packet header\n   * @param   hpdatastart start of timewindow the packet covers\n   * @param   hpdataend   end of timewindow the packet covers\n   * @param   data        optional data to send\n   * @returns             promise to server's response\n   */\n  writeAck(streamid: string, hpdatastart: number, hpdataend: number, data?: Uint8Array): Promise<DataLinkResponse> |  Promise<DataLinkPacket>  {\n    let header = `WRITE ${streamid} ${momentToHPTime(hpdatastart)} ${momentToHPTime(hpdataend)} A`;\n    return this.awaitDLBinary(header, data);\n  }\n\n  /**\n   * Makes sure a response actually is a DataLinkResponse\n   *\n   * @param   dl datalink packet/response\n   * @returns DataLinkResponse after checking instanceof\n   * @throws Error if not a DataLinkResponse\n   */\n  ensureDataLinkResponse(dl: DataLinkResponse | DataLinkPacket): DataLinkResponse {\n    if (dl instanceof DataLinkResponse) {\n      return dl;\n    }\n    throw new Error(`Expected DataLinkResponse but got ${dl.header}`);\n  }\n\n  /**\n   * Makes sure a response actually is a DataLinkPacket\n   *\n   * @param   dl datalink packet/response\n   * @returns DataLinkPacket after checking instanceof\n   * @throws Error if not a DataLinkPacket\n   */\n  ensureDataLinkPacket(dl: DataLinkResponse | DataLinkPacket): DataLinkPacket {\n    if (dl instanceof DataLinkPacket) {\n      return dl;\n    }\n    throw new Error(`Expected DataLinkPacket but got ${dl.type}`);\n  }\n\n  /**\n   * Send id and await server's response. All of these are can more or less\n   * be filled with dummy values. They are mostly used for logging and debugging\n   * on the server side.\n   *\n   * @param programname name of program, ex seisplotjs\n   * @param username name of user, ex browser\n   * @param processid process number, used to differentiate between multiple running instances\n   * @param architecture cpu architecture, ex javascript\n   * @returns promise to servers response\n   */\n  id(programname: string, username: string, processid: string, architecture: string): Promise<DataLinkResponse> {\n    let command = `ID ${programname}:${username}:${processid}:${architecture}`;\n    return this.awaitDLCommand(command).then(this.ensureDataLinkResponse);\n  }\n\n  /**\n   * Send info command for infoType.\n   *\n   * @param infoType type to get info for\n   * @returns promise to server's response\n   */\n  info(infoType: string): Promise<DataLinkResponse> {\n    let command = `INFO ${infoType}`;\n    return this.awaitDLCommand(command).then(this.ensureDataLinkResponse);\n  }\n\n  /**\n   * Send position after command.\n   *\n   * @param time time to position after\n   * @returns promise to server's response\n   */\n  positionAfter(time: moment): Promise<DataLinkResponse> {\n    return this.positionAfterHPTime(momentToHPTime(time)).then(this.ensureDataLinkResponse);\n  }\n\n  /**\n   * Send position after command.\n   *\n   * @param hpTime time to position after\n   * @returns promise to server's response\n   */\n  positionAfterHPTime(hpTime: number): Promise<DataLinkResponse> {\n    let command = `POSITION AFTER ${hpTime}`;\n    return this.awaitDLCommand(command).then(this.ensureDataLinkResponse);\n  }\n\n  /**\n   * Send match command.\n   *\n   * @param pattern regular expression to match streams\n   * @returns promise to server's response\n   */\n  match(pattern: string): Promise<DataLinkResponse> {\n    let command = `MATCH`;\n    return this.awaitDLCommand(command, pattern).then(this.ensureDataLinkResponse);\n  }\n\n  /**\n   * Send reject command.\n   *\n   * @param pattern regular expression to reject streams\n   * @returns promise to server's response\n   */\n  reject(pattern: string): Promise<DataLinkResponse> {\n    let command = `REJECT ${pattern}`;\n    return this.awaitDLCommand(command).then(this.ensureDataLinkResponse);\n  }\n\n  /**\n   * Read a single packet for the given id.\n   *\n   * @param packetId id of the packet of interest\n   * @returns promise to server's response\n   */\n  read(packetId: string): Promise<DataLinkPacket> {\n    let command = `READ ${packetId}`;\n    return this.awaitDLBinary(command).then(this.ensureDataLinkPacket);\n  }\n\n  /**\n   * Handles a web socket message from the data link connection.\n   *\n   * @private\n   * @param wsEvent web socket event to handle\n   */\n  handle(wsEvent: MessageEvent ): void {\n    const rawData: ArrayBuffer = ((wsEvent.data: any): ArrayBuffer);\n    let dlPreHeader = new DataView(rawData, 0, 3);\n    if ('D' === String.fromCharCode(dlPreHeader.getUint8(0))\n        && 'L' === String.fromCharCode(dlPreHeader.getUint8(1))) {\n      const headerLen = dlPreHeader.getUint8(2);\n      const header = dataViewToString(new DataView(rawData, 3, headerLen));\n      if (header.startsWith(PACKET)) {\n        let packet = new DataLinkPacket(header,\n                new DataView(rawData, 3+headerLen));\n        if (this.packetHandler) {\n          try {\n            this.packetHandler(packet);\n          } catch (e) {\n            this.errorHandler(e);\n          }\n        } else {\n          this.errorHandler(new Error(\"packetHandler not defined\"));\n        }\n      } else {\n        let dv;\n        if (rawData.byteLength > 3+headerLen) {\n          dv = new DataView(rawData, 3+headerLen);\n        }\n        const dlResponse = DataLinkResponse.parse(header, dv);\n        if (dlResponse.type === 'ERROR') {\n          this.handleError(new Error(`value=${dlResponse.value} ${dlResponse.message}`));\n        } else {\n          if (this._responseResolve) {\n            this._responseResolve(dlResponse);\n          } else {\n            defaultHandleResponse(header);\n          }\n        }\n      }\n    } else {\n      throw new Error(\"DataLink Packet did not start with DL\");\n    }\n  }\n\n  /**\n   * handle errors that arise\n   *\n   * @private\n   * @param   error the error\n   */\n  handleError(error: Error): void {\n    if (this._responseReject) {\n      this._responseReject(error);\n    }\n    if (this.errorHandler) {\n      this.errorHandler(error);\n    } else {\n      util.log(\"datalink handleError: \"+error.message);\n    }\n  }\n}\n\n/**\n * Datalink response, used for ID, INFO, OK and ERROR responses.\n */\nexport class DataLinkResponse {\n  type: string;\n  value: string;\n  message: string;\n  constructor(type: string, value: string, message: string) {\n    this.type = type;\n    this.value = value;\n    this.message = message;\n  }\n  toString(): string {\n    return `${this.type} ${this.value} | ${this.message}`;\n  }\n  static parse(header: string, data?: DataView): DataLinkResponse {\n    let value = \"\";\n    let s = header.split(' ');\n    let type = s[0];\n    let message = '';\n    if (type === 'ID') {\n      message = ''+header.substring(3);\n    } else if (type === 'INFO' || type === 'OK' || type === 'ERROR') {\n      value = s[1];\n      if (data) {\n        message = dataViewToString(new DataView(data.buffer, 3+header.length));\n      }\n    } else {\n      util.log(`unknown DataLink response type: ${type}  ${header}`);\n      message = header.substring(type.length+1);\n    }\n    return new DataLinkResponse(type, value, message);\n  }\n}\n\n/**\n * Represents a Datalink packet from the ringserver.\n * Note this cannot connect directly to a native TCP socket, instead it\n * sends the datalink protocol over a websocket. Currently only the IRIS\n * ringserver supports websockets, but it may be possible to use thrid party\n * tools to proxy the websocket to a TCP datalink socket.\n *\n */\nexport class DataLinkPacket {\n  header: string;\n  data: DataView;\n  streamId: string;\n  pktid: string;\n  hppackettime: string;\n  hppacketstart: string;\n  hppacketend: string;\n  dataSize: number;\n  _miniseed: null | miniseed.DataRecord;\n  constructor(header: string, dataview: DataView) {\n    this._miniseed = null;\n    this.header = header;\n    this.data = dataview;\n    let split = this.header.split(' ');\n    this.streamId = split[1];\n    this.pktid = split[2];\n    this.hppackettime = split[3];\n    this.hppacketstart = split[4];\n    this.hppacketend = split[5];\n    this.dataSize = Number.parseInt(split[6]);\n    if (dataview.byteLength < this.dataSize) {\n      throw new Error(\"not enough bytes in dataview for packet: \"+this.dataSize);\n    }\n  }\n  /**\n   * Packet start time as a moment.\n   *\n   * @returns start time\n   */\n  get packetStart(): moment {\n    return hpTimeToMoment(parseInt(this.hppacketstart));\n  }\n  /**\n   * Packet end time as a moment.\n   *\n   * @returns end time\n   */\n  get packetEnd(): moment {\n    return hpTimeToMoment(parseInt(this.hppacketend));\n  }\n  /**\n   * Packet time as a moment.\n   *\n   * @returns packet time\n   */\n  get packetTime(): moment {\n    return hpTimeToMoment(parseInt(this.hppackettime));\n  }\n  /**\n   * is this packet a miniseed packet\n   *\n   * @returns          true if it is miniseed\n   */\n  isMiniseed(): boolean {\n    return isDef(this._miniseed) || this.streamId.endsWith(MSEED_TYPE);\n  }\n  /**\n   * Parsed payload as a miniseed data record, if the streamid\n   * ends with '/MSEED', null otherwise.\n   *\n   * @returns miniseed DataRecord or null\n   */\n  get miniseed() {\n    if ( ! isDef(this._miniseed) ) {\n      if (this.streamId.endsWith(MSEED_TYPE)) {\n        this._miniseed = miniseed.parseSingleDataRecord(this.data);\n      } else {\n        this._miniseed = null;\n      }\n    }\n    return this._miniseed;\n  }\n}\n\n/**\n * Convert moment to a HPTime number.\n *\n * @param   m moment to convert\n * @returns  microseconds since epoch\n */\n  export function momentToHPTime(m: moment): number {\n    return m.valueOf()*1000;\n  }\n  /**\n   * Convert hptime number to a moment.\n   *\n   * @param   hptime hptime to convert\n   * @returns  moment in utc for the hptime\n   */\n  export function hpTimeToMoment(hptime: number): moment {\n    return moment.utc(hptime/1000);\n  }\n\n  /**\n   * Encode string into a Uint8Array.\n   *\n   * @param   dataString String to encode.\n   * @returns             String as bytes in Uint8Array.\n   */\n  export function stringToUint8Array(dataString?: string): Uint8Array | void {\n    let binaryData = undefined;\n    if (isNonEmptyStringArg(dataString)) {\n      binaryData = new Uint8Array(dataString.length);\n      for (let i=0; i<dataString.length;i++) {\n        binaryData[i] = dataString.charCodeAt(i);\n      }\n    }\n    return binaryData;\n  }\n"],"names":["DATALINK_PROTOCOL","QUERY_MODE","STREAM_MODE","MAX_PROC_NUM","Math","pow","USER_BROWSER","DEFAULT_PROGRAM","DEFAULT_ARCH","ERROR","PACKET","STREAM","ENDSTREAM","MSEED_TYPE","IRIS_RINGSERVER_URL","defaultHandleResponse","message","util","DataLinkConnection","constructor","url","packetHandler","errorHandler","_mode","closeHandler","serverId","clientIdNum","floor","random","programname","username","architecture","_responseResolve","_responseReject","setOnClose","connect","that","RSVP","resolve","reject","webSocket","WebSocket","binaryType","onmessage","event","handle","onerror","handleError","Error","stringify","onclose","closeEvent","onopen","then","datalink","sendId","idmsg","isConnected","mode","stream","sendDLCommand","endStream","close","id","ensureDataLinkResponse","dlResponse","type","encodeDL","header","data","cmdLen","length","len","lenStr","String","rawPacket","ArrayBuffer","binaryPacket","Uint8Array","packet","DataView","setUint8","i","c","charCodeAt","SPACE","set","sendDLBinary","send","command","dataString","stringToUint8Array","awaitDLBinary","promise","response","catch","error","awaitDLCommand","writeAck","streamid","hpdatastart","hpdataend","momentToHPTime","dl","DataLinkResponse","ensureDataLinkPacket","DataLinkPacket","processid","info","infoType","positionAfter","time","positionAfterHPTime","hpTime","match","pattern","read","packetId","wsEvent","rawData","dlPreHeader","fromCharCode","getUint8","headerLen","dataViewToString","startsWith","e","dv","byteLength","parse","value","toString","s","split","substring","buffer","dataview","_miniseed","streamId","pktid","hppackettime","hppacketstart","hppacketend","dataSize","Number","parseInt","packetStart","hpTimeToMoment","packetEnd","packetTime","isMiniseed","isDef","endsWith","miniseed","m","valueOf","hptime","moment","utc","binaryData","undefined","isNonEmptyStringArg"],"mappings":"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"}