{"version":3,"file":"vector.js","sources":["../../src/vector.js"],"sourcesContent":["//@flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport {SeismogramSegment, Seismogram } from './seismogram.js';\n\n/**\n * const for degrees to radians, pi/180\n */\nexport const DtoR = Math.PI / 180;\n\n/**\n * Result of rotation for 2 seismograms.\n */\nexport class RotatedSeismograms {\n  radial: Seismogram;\n  transverse: Seismogram;\n  azimuthRadial: number;\n  azimuthTransverse: number;\n  rotation: number;\n  constructor(radial: Seismogram,\n              azimuthRadial: number,\n              transverse: Seismogram,\n              azimuthTransverse: number,\n              rotation: number) {\n    this.radial = radial;\n    this.azimuthRadial = azimuthRadial;\n    this.transverse = transverse;\n    this.azimuthTransverse = azimuthTransverse;\n    this.rotation = rotation;\n  }\n}\n\n/**\n * Rotates the given seismograms from their given azimuths so the output radial\n * is along the new azimuth and the output transverse is perpendicular to it.\n *\n * @param   seisA    first seismogram\n * @param   azimuthA azimuth of first seismogram\n * @param   seisB    second seismogram\n * @param   azimuthB azimuth of second seismogram\n * @param   azimuth  output radial azimuth to rotate to\n * @returns radial and transverse seismograms\n */\nexport function rotate(seisA: Seismogram, azimuthA: number, seisB: Seismogram, azimuthB: number, azimuth: number): RotatedSeismograms {\n  if (seisA.segments.length !== seisB.segments.length) {\n    throw new Error(\"Seismograms do not have same number of segments: \"+seisA.segments.length+\" !== \"+seisB.segments.length);\n  }\n  let rotOutRad = [];\n  let rotOutTrans = [];\n  for( let i=0; i< seisA.segments.length; i++) {\n    let result = rotateSeismogramSegment(seisA.segments[i], azimuthA,\n                                         seisB.segments[i], azimuthB, azimuth);\n    rotOutRad.push(result.radial);\n    rotOutTrans.push(result.transverse);\n  }\n  let out = new RotatedSeismograms(new Seismogram(rotOutRad),\n                                   azimuth % 360,\n                                   new Seismogram(rotOutTrans),\n                                   (azimuth + 90) % 360,\n                                   azimuth - azimuthA);\n  return out;\n}\n\n/**\n * Rotates two seismogram segments, checking for same length and time alignment.\n *\n * @param   seisA    first seismogram\n * @param   azimuthA azimuth of first\n * @param   seisB    second seismogram\n * @param   azimuthB azimuth of second\n * @param   azimuth  azimuth to rotate to as radial, transverse will be +90 deg\n * @returns           rotated seismogram segments along with their aziumths\n */\nfunction rotateSeismogramSegment(seisA: SeismogramSegment, azimuthA: number, seisB: SeismogramSegment, azimuthB: number, azimuth: number) {\n  if (seisA.y.length !== seisB.y.length) {\n    throw new Error(\"seisA and seisB should be of same lenght but was \"\n    +seisA.y.length+\" \"+seisB.y.length);\n  }\n  if ( ! seisA.startTime.isSame(seisB.startTime)) {\n    throw new Error(\"Expect startTime to be same, but was \"+seisA.startTime.toISOString()+\" \"+seisB.startTime.toISOString());\n  }\n  if (seisA.sampleRate !== seisB.sampleRate) {\n    throw new Error(\"Expect sampleRate to be same, but was \"+seisA.sampleRate+\" \"+seisB.sampleRate);\n  }\n  if ((azimuthA + 90) % 360 !== azimuthB % 360) {\n    throw new Error(\"Expect azimuthB to be azimuthA + 90, but was \"+azimuthA+\" \"+azimuthB);\n  }\n//  [   cos(theta)    -sin(theta)    0   ]\n//  [   sin(theta)     cos(theta)    0   ]\n//  [       0              0         1   ]\n// seisB => x\n// seisA => y\n// sense of rotation is opposite for aziumth vs math\n  const rotRadian = 1 * DtoR * (azimuth - azimuthA);\n  const cosTheta = Math.cos(rotRadian);\n  const sinTheta = Math.sin(rotRadian);\n  let x = new Float32Array(seisA.y.length);\n  let y = new Float32Array(seisA.y.length);\n  for (let i = 0; i < seisA.y.length; i++) {\n    x[i] = cosTheta * seisB.yAtIndex(i) - sinTheta * seisA.yAtIndex(i);\n    y[i] = sinTheta * seisB.yAtIndex(i) + cosTheta * seisA.yAtIndex(i);\n  }\n  let outSeisRad = seisA.cloneWithNewData(y);\n  outSeisRad.channelCode = seisA.chanCode.slice(0,2)+\"R\";\n  let outSeisTan = seisA.cloneWithNewData(x);\n  outSeisTan.channelCode = seisA.chanCode.slice(0,2)+\"T\";\n  let out = {\n    \"radial\": outSeisRad,\n    \"transverse\": outSeisTan,\n    \"azimuthRadial\": azimuth % 360,\n    \"azimuthTransverse\": (azimuth + 90) % 360\n  };\n  return out;\n}\n\n/**\n * creates a new Seismogram where the value at each sample is the\n * vector magnitude of the 3 corresponding data points from each seismogram.\n * Each of the 3 seismograms are assumed to be mutually perpendicular so\n * that each set of samples gives a vector in 3-dimensional space. In particular\n * all three seismograms must have the same number of samples and sample rate.\n * It is assumed, but not checked, that they will be the three components of\n * motion at a station (ie matching network, station and location codes)\n * and have the same start time.\n *\n * @param   seisA first seismogram\n * @param   seisB second seismogram\n * @param   seisC third seismogram\n * @returns Seismogram of vector magnitudes\n */\nexport function vectorMagnitude(seisA: Seismogram, seisB: Seismogram, seisC: Seismogram) {\n  if (seisA.segments.length !== seisB.segments.length) {\n    throw new Error(\"Seismograms do not have same number of segments: \"+seisA.segments.length+\" !== \"+seisB.segments.length+\" !== \"+seisC.segments.length);\n  }\n  if (seisA.segments.length !== seisC.segments.length) {\n    throw new Error(\"Seismograms do not have same number of segments: \"+seisA.segments.length+\" !== \"+seisB.segments.length+\" !== \"+seisC.segments.length);\n  }\n  let outSeis = [];\n  for( let i=0; i< seisA.segments.length; i++) {\n    let result = vectorMagnitudeSegment(seisA.segments[i],\n                                        seisB.segments[i],\n                                        seisC.segments[i]);\n    outSeis.push(result);\n  }\n  return new Seismogram(outSeis);\n}\n\n/**\n * Calculates the vector magnitude of three components of motion. Each of the three\n * should be mutually perpendicular.\n *\n * @param   seisA first seismogram\n * @param   seisB second perpendicular seismogram\n * @param   seisC thrid perpendicular seismogram\n * @returns         seismogram representing the vector magnitude, sqrt(x*x+y*y+z*z)\n */\nfunction vectorMagnitudeSegment(seisA: SeismogramSegment, seisB: SeismogramSegment, seisC: SeismogramSegment) {\n  if (seisA.y.length !== seisB.y.length) {\n    throw new Error(\"seisA and seisB should be of same lenght but was \"\n    +seisA.y.length+\" \"+seisB.y.length);\n  }\n  if (seisA.sampleRate !== seisB.sampleRate) {\n    throw new Error(\"Expect sampleRate to be same, but was \"+seisA.sampleRate+\" \"+seisB.sampleRate);\n  }\n  if (seisA.y.length !== seisC.y.length) {\n    throw new Error(\"seisA and seisC should be of same lenght but was \"\n    +seisA.y.length+\" \"+seisC.y.length);\n  }\n  if (seisA.sampleRate !== seisC.sampleRate) {\n    throw new Error(\"Expect sampleRate to be same, but was \"+seisA.sampleRate+\" \"+seisC.sampleRate);\n  }\n  let y;\n  if (seisA.y instanceof Float64Array) {\n    y = new Float64Array(seisA.y.length);\n  } else {\n    y = new Float32Array(seisA.y.length);\n  }\n  for (let i = 0; i < seisA.y.length; i++) {\n    y[i] = Math.sqrt(seisA.y[i] * seisA.y[i]\n      + seisB.y[i] * seisB.y[i]\n      + seisC.y[i] * seisC.y[i]);\n  }\n  let outSeis = seisA.cloneWithNewData(y);\n  outSeis.channelCode = seisA.chanCode.slice(0,2)+\"M\";\n  return outSeis;\n}\n"],"names":["DtoR","Math","PI","RotatedSeismograms","constructor","radial","azimuthRadial","transverse","azimuthTransverse","rotation","rotate","seisA","azimuthA","seisB","azimuthB","azimuth","segments","length","Error","rotOutRad","rotOutTrans","i","result","rotateSeismogramSegment","push","out","Seismogram","y","startTime","isSame","toISOString","sampleRate","rotRadian","cosTheta","cos","sinTheta","sin","x","Float32Array","yAtIndex","outSeisRad","cloneWithNewData","channelCode","chanCode","slice","outSeisTan","vectorMagnitude","seisC","outSeis","vectorMagnitudeSegment","Float64Array","sqrt"],"mappings":"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"}