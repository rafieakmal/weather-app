{"version":3,"file":"fdsnstation.js","sources":["../../src/fdsnstation.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport moment from 'moment';\nimport {parseStationXml, Network} from './stationxml';\nimport {XML_MIME, TEXT_MIME, StartEndDuration, makeParam, doFetchWithTimeout, defaultFetchInitObj} from './util.js';\n\n// special due to flow\nimport {checkProtocol, toIsoWoZ, isDef, hasArgs, hasNoArgs, isObject, isStringArg,\n        isNonEmptyStringArg, isNumArg, checkStringOrDate} from './util';\n\nexport const LEVEL_NETWORK = 'network';\nexport const LEVEL_STATION = 'station';\nexport const LEVEL_CHANNEL = 'channel';\nexport const LEVEL_RESPONSE = 'response';\n\nexport const LEVELS = [ LEVEL_NETWORK, LEVEL_STATION, LEVEL_CHANNEL, LEVEL_RESPONSE];\n\n/**\n * Major version of the FDSN spec supported here.\n * Currently is 1.\n */\nexport const SERVICE_VERSION = 1;\n/**\n * Service name as used in the FDSN DataCenters registry,\n * http://www.fdsn.org/datacenters\n */\nexport const SERVICE_NAME = `fdsnws-station-${SERVICE_VERSION}`;\n\nexport const IRIS_HOST = \"service.iris.edu\";\n\n/** a fake, completely empty stationxml document in case of no data. */\nexport const FAKE_EMPTY_XML = '<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <FDSNStationXML xmlns=\"http://www.fdsn.org/xml/station/1\" schemaVersion=\"1.0\" xsi:schemaLocation=\"http://www.fdsn.org/xml/station/1 http://www.fdsn.org/xml/station/fdsn-station-1.0.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:iris=\"http://www.fdsn.org/xml/station/1/iris\"> </FDSNStationXML>';\n\n\n/**\n * Query to a FDSN Station web service.\n *\n * @see http://www.fdsn.org/webservices/\n *\n * @param host optional host to connect to, defaults to IRIS\n */\nexport class StationQuery {\n  /** @private */\n  _specVersion: number;\n  /** @private */\n  _protocol: string;\n  /** @private */\n  _host: string;\n  /** @private */\n  _port: number;\n  /** @private */\n  _nodata: number;\n  /** @private */\n  _networkCode: string;\n  /** @private */\n  _stationCode: string;\n  /** @private */\n  _locationCode: string;\n  /** @private */\n  _channelCode: string;\n  /** @private */\n  _startTime: moment;\n  /** @private */\n  _endTime: moment;\n  /** @private */\n  _startBefore: moment;\n  /** @private */\n  _endBefore: moment;\n  /** @private */\n  _startAfter: moment;\n  /** @private */\n  _endAfter: moment;\n  /** @private */\n  _minLat: number;\n  /** @private */\n  _maxLat: number;\n  /** @private */\n  _minLon: number;\n  /** @private */\n  _maxLon: number;\n  /** @private */\n  _latitude: number;\n  /** @private */\n  _longitude: number;\n  /** @private */\n  _minRadius: number;\n  /** @private */\n  _maxRadius: number;\n  /** @private */\n  _includeRestricted: boolean;\n  /** @private */\n  _includeAvailability: boolean;\n  /** @private */\n  _format: string;\n  /** @private */\n  _updatedAfter: moment;\n  /** @private */\n  _matchTimeseries: boolean;\n  /** @private */\n  _timeoutSec: number;\n  /** Construct a query\n   *\n   * @param host the host to connect to , defaults to service.iris.edu\n   */\n  constructor(host?: string) {\n    this._specVersion = 1;\n    this._protocol = checkProtocol();\n    this.host(host);\n    if (! isNonEmptyStringArg(host)) {\n      this._host = IRIS_HOST;\n    }\n    this._port = 80;\n    this._timeoutSec = 30;\n  }\n  /** Gets/Sets the version of the fdsnws spec, 1 is currently the only value.\n   *  Setting this is probably a bad idea as the code may not be compatible with\n   *  the web service.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  specVersion(value?: number): number | StationQuery {\n    if (hasArgs(value)) {\n      this._specVersion = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._specVersion;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Gets/Sets the protocol, http or https. This should match the protocol\n   *  of the page loaded, but is autocalculated and generally need not be set.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  protocol(value?: string): string | StationQuery {\n    if (isStringArg(value)) {\n      this._protocol = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._protocol;\n    } else {\n      throw new Error('value argument is optional or string, but was '+typeof value);\n    }\n  }\n  /** Gets/Sets the remote host to connect to.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  host(value?: string): string | StationQuery {\n    if (isStringArg(value)) {\n      this._host = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._host;\n    } else {\n      throw new Error('value argument is optional or string, but was '+typeof value);\n    }\n  }\n  /** Gets/Sets the remote port to connect to.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  port(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._port;\n    } else if (isNumArg(value)) {\n      this._port = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Gets/Sets the nodata parameter, usually 404 or 204 (default), controlling\n   * the status code when no matching data is found by the service.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  nodata(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._nodata;\n    } else if (hasArgs(value)) {\n      this._nodata = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the network query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  networkCode(value?: string): string | StationQuery {\n    if (isStringArg(value)) {\n      this._networkCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._networkCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the station query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  stationCode(value?: string): string | StationQuery {\n    if (isStringArg(value)) {\n      this._stationCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._stationCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the location code query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  locationCode(value?: string): string | StationQuery {\n    if (isStringArg(value)) {\n      this._locationCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._locationCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the channel query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  channelCode(value?: string): string | StationQuery {\n    if (isStringArg(value)) {\n      this._channelCode = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._channelCode;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the starttime query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  startTime(value?: moment): moment | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._startTime;\n    } else if (hasArgs(value)) {\n      this._startTime = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /** Get/Set the endtime query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  endTime(value?: moment): moment | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._endTime;\n    } else if (hasArgs(value)) {\n      this._endTime = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /**\n   * Sets startTime and endTime using the given time window\n   *\n   * @param   se time window\n   * @returns     this\n   */\n  timeWindow(se: StartEndDuration) {\n    this.startTime(se.startTime);\n    this.endTime(se.endTime);\n    return this;\n  }\n  /** Get/Set the startbefore query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  startBefore(value?: moment): moment | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._startBefore;\n    } else if (hasArgs(value)) {\n      this._startBefore = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /** Get/Set the endbefore query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  endBefore(value?: moment): moment | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._endBefore;\n    } else if (hasArgs(value)) {\n      this._endBefore = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /** Get/Set the startafter query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  startAfter(value?: moment): moment | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._startAfter;\n    } else if (hasArgs(value)) {\n      this._startAfter = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /** Get/Set the endafter query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  endAfter(value?: moment): moment | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._endAfter;\n    } else if (hasArgs(value)) {\n      this._endAfter = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /** Get/Set the minlat query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  minLat(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._minLat;\n    } else if (isNumArg(value)) {\n      this._minLat = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the maxlon query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  maxLat(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._maxLat;\n    } else if (isNumArg(value)) {\n      this._maxLat = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the minlon query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  minLon(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._minLon;\n    } else if (isNumArg(value)) {\n      this._minLon = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the maxlon query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  maxLon(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._maxLon;\n    } else if (isNumArg(value)) {\n      this._maxLon = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the latitude query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  latitude(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._latitude;\n    } else if (isNumArg(value)) {\n      this._latitude = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the longitude query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  longitude(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._longitude;\n    } else if (isNumArg(value)) {\n      this._longitude = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the minradius query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  minRadius(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._minRadius;\n    } else if (isNumArg(value)) {\n      this._minRadius = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the maxradius query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  maxRadius(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._maxRadius;\n    } else if (isNumArg(value)) {\n      this._maxRadius = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n  /** Get/Set the includerestricted query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  includeRestricted(value?: boolean): boolean | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._includeRestricted;\n    } else if (hasArgs(value)) {\n      this._includeRestricted = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or boolean, but was '+typeof value);\n    }\n  }\n  /** Get/Set the includeavailability query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  includeAvailability(value?: boolean): boolean | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._includeAvailability;\n    } else if (hasArgs(value)) {\n      this._includeAvailability = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or boolean, but was '+typeof value);\n    }\n  }\n  /** Get/Set the format query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  format(value?: string): string | StationQuery {\n    if (isStringArg(value)) {\n      this._format = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._format;\n    } else {\n      throw new Error('value argument is optional or string, but was '+value);\n    }\n  }\n  /** Get/Set the updatedafter query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  updatedAfter(value?: moment): moment | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._updatedAfter;\n    } else if (hasArgs(value)) {\n      this._updatedAfter = checkStringOrDate(value);\n      return this;\n    } else {\n      throw new Error('value argument is optional or moment or string, but was '+typeof value);\n    }\n  }\n  /** Get/Set the matchtimeseries query parameter.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  matchTimeseries(value?: boolean): boolean | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._matchTimeseries;\n    } else if (hasArgs(value)) {\n      this._matchTimeseries = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or boolean, but was '+typeof value);\n    }\n  }\n  /** Get/Set the timeout in seconds for the request. Default is 30.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  timeout(value?: number): number | StationQuery {\n    if (hasNoArgs(value)) {\n      return this._timeoutSec;\n    } else if (isNumArg(value)) {\n      this._timeoutSec = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n\n  /** Checks to see if any parameter that would limit the data\n   * returned is set. This is a crude, coarse check to make sure\n   * the client doesn't ask for EVERYTHING the server has.\n   *\n   * @returns true if some parameter set\n   * */\n  isSomeParameterSet(): boolean {\n    return isDef(this._networkCode) ||\n    isDef(this._stationCode) ||\n    isDef(this._locationCode) ||\n    isDef(this._channelCode) ||\n    isDef(this._startTime) ||\n    isDef(this._endTime) ||\n    isDef(this._startBefore) ||\n    isDef(this._endBefore) ||\n    isDef(this._startAfter) ||\n    isDef(this._endAfter) ||\n    isDef(this._minLat) ||\n    isDef(this._maxLat) ||\n    isDef(this._minLon) ||\n    isDef(this._maxLon) ||\n    isDef(this._latitude) ||\n    isDef(this._longitude) ||\n    isDef(this._minRadius) ||\n    isDef(this._maxRadius) ||\n    isDef(this._updatedAfter);\n  }\n\n  /**\n   * Queries the remote web service for networks.\n   *\n   * @returns a Promise to an Array of Network objects.\n   */\n  queryNetworks(): Promise<Array<Network>> {\n    return this.query(LEVEL_NETWORK);\n  }\n  /**\n   * Queries the remote web service for stations. The stations\n   * are contained within their respective Networks.\n   *\n   * @returns a Promise to an Array of Network objects.\n   */\n  queryStations(): Promise<Array<Network>> {\n    return this.query(LEVEL_STATION);\n  }\n  /**\n   * Queries the remote web service for channels. The Channels\n   * are contained within their respective Stations which are in Networks.\n   *\n   * @returns a Promise to an Array of Network objects.\n   */\n  queryChannels(): Promise<Array<Network>> {\n    return this.query(LEVEL_CHANNEL);\n  }\n  /**\n   * Queries the remote web service for responses. The Responses\n   * are contained within their respective Channels,\n   * which are in Stations which are in Networks.\n   *\n   * @returns a Promise to an Array of Network objects.\n   */\n  queryResponses(): Promise<Array<Network>> {\n    return this.query(LEVEL_RESPONSE);\n  }\n\n  /**\n   * Queries the remote web service at the given level.\n   *\n   * @param level the level to query at, networ, station, channel or response.\n   * @returns a Promise to an Array of Network objects.\n   */\n  query(level: string): Promise<Array<Network>> {\n    if (! LEVELS.includes(level)) {throw new Error(\"Unknown level: '\"+level+\"'\");}\n    return this.queryRawXml(level).then(function(rawXml) {\n        return parseStationXml(rawXml);\n    });\n  }\n\n  /**\n   * Queries the remote web service at the given level for raw xml.\n   *\n   * @param level the level to query at, network, station, channel or response.\n   * @returns a Promise to an xml Document.\n   */\n  queryRawXml(level: string): Promise<Document> {\n    const mythis = this;\n    const url = this.formURL(level);\n    const fetchInit = defaultFetchInitObj(XML_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n      .then(response => {\n          if (response.status === 200) {\n            return response.text();\n          } else if (response.status === 204 || (mythis.nodata() && response.status === mythis.nodata())) {\n            // 204 is nodata, so successful but empty\n            return FAKE_EMPTY_XML;\n          } else {\n            throw new Error(`Status not successful: ${response.status}`);\n          }\n      }).then(function(rawXmlText) {\n        return new DOMParser().parseFromString(rawXmlText, \"text/xml\");\n      });\n  }\n\n  /**\n   * Forms the URL to get version from the web service, without any query paramters\n   *\n   * @returns the url\n   */\n  formVersionURL() {\n      return this.formBaseURL()+\"/version\";\n  }\n\n\n  /**\n   * Queries the remote web service to get its version\n   *\n   * @returns Promise to version string\n   */\n  queryVersion(): Promise<string> {\n    let url = this.formVersionURL();\n    const fetchInit = defaultFetchInitObj(TEXT_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n      .then(response => {\n          if (response.status === 200) {\n            return response.text();\n          } else {\n            throw new Error(`Status not 200: ${response.status}`);\n          }\n      });\n  }\n  /**\n   * Forms the basic URL to contact the web service, without any query paramters\n   *\n   * @returns the url\n   */\n  formBaseURL() {\n    let colon = \":\";\n    if (this._protocol.endsWith(colon)) {\n      colon = \"\";\n    }\n    return this._protocol+colon+\"//\"+this._host+(this._port===80?\"\":(\":\"+this._port))+\"/fdsnws/station/\"+this._specVersion;\n  }\n  /**\n   * Form URL to query the remote web service, encoding the query parameters.\n   *\n   * @param level network, station, channel or response\n   * @returns url\n   */\n  formURL(level: string) {\n    let url = this.formBaseURL()+\"/query?\";\n    if (! isStringArg(level)) {throw new Error(\"level not specified, should be one of network, station, channel, response.\");}\n    url = url+makeParam(\"level\", level);\n    if (isStringArg(this._networkCode)) { url = url+makeParam(\"net\", this.networkCode());}\n    if (isStringArg(this._stationCode)) { url = url+makeParam(\"sta\", this.stationCode());}\n    if (isStringArg(this._locationCode)) { url = url+makeParam(\"loc\", this.locationCode());}\n    if (isStringArg(this._channelCode)) { url = url+makeParam(\"cha\", this.channelCode());}\n    if (isObject(this._startTime)) { url = url+makeParam(\"starttime\", toIsoWoZ(this.startTime()));}\n    if (isObject(this._endTime)) { url = url+makeParam(\"endtime\", toIsoWoZ(this.endTime()));}\n    if (isObject(this._startBefore)) { url = url+makeParam(\"startbefore\", toIsoWoZ(this.startBefore()));}\n    if (isObject(this._startAfter)) { url = url+makeParam(\"startafter\", toIsoWoZ(this.startAfter()));}\n    if (isObject(this._endBefore)) { url = url+makeParam(\"endbefore\", toIsoWoZ(this.endBefore()));}\n    if (isObject(this._endAfter)) { url = url+makeParam(\"endafter\", toIsoWoZ(this.endAfter()));}\n    if (isNumArg(this._minLat)) { url = url+makeParam(\"minlat\", this.minLat());}\n    if (isNumArg(this._maxLat)) { url = url+makeParam(\"maxlat\", this.maxLat());}\n    if (isNumArg(this._minLon)) { url = url+makeParam(\"minlon\", this.minLon());}\n    if (isNumArg(this._maxLon)) { url = url+makeParam(\"maxlon\", this.maxLon());}\n    if (isNumArg(this._latitude)) { url = url+makeParam(\"lat\", this.latitude());}\n    if (isNumArg(this._longitude)) { url = url+makeParam(\"lon\", this.longitude());}\n    if (isNumArg(this._minRadius)) { url = url+makeParam(\"minradius\", this.minRadius());}\n    if (isNumArg(this._maxRadius)) { url = url+makeParam(\"maxradius\", this.maxRadius());}\n    if (isDef(this._includeRestricted)) { url = url+makeParam(\"includerestricted\", this.includeRestricted());}\n    if (isDef(this._includeAvailability)) { url = url+makeParam(\"includeavailability\", this.includeAvailability());}\n    if (isObject(this._updatedAfter)) { url = url+makeParam(\"updatedafter\", toIsoWoZ(this.updatedAfter()));}\n    if (isDef(this._matchTimeseries)) { url = url+makeParam(\"matchtimeseries\", this.matchTimeseries());}\n    if (isStringArg(this._format)) { url = url+makeParam(\"format\", this.format());}\n    if (isNumArg(this._nodata)) { url = url+makeParam(\"nodata\", this.nodata());}\n    if (url.endsWith('&') || url.endsWith('?')) {\n      url = url.substr(0, url.length-1); // zap last & or ?\n    }\n    return url;\n  }\n\n}\n"],"names":["LEVEL_NETWORK","LEVEL_STATION","LEVEL_CHANNEL","LEVEL_RESPONSE","LEVELS","SERVICE_VERSION","SERVICE_NAME","IRIS_HOST","FAKE_EMPTY_XML","StationQuery","constructor","host","_specVersion","_protocol","checkProtocol","isNonEmptyStringArg","_host","_port","_timeoutSec","specVersion","value","hasArgs","hasNoArgs","Error","protocol","isStringArg","port","isNumArg","nodata","_nodata","networkCode","_networkCode","stationCode","_stationCode","locationCode","_locationCode","channelCode","_channelCode","startTime","_startTime","checkStringOrDate","endTime","_endTime","timeWindow","se","startBefore","_startBefore","endBefore","_endBefore","startAfter","_startAfter","endAfter","_endAfter","minLat","_minLat","maxLat","_maxLat","minLon","_minLon","maxLon","_maxLon","latitude","_latitude","longitude","_longitude","minRadius","_minRadius","maxRadius","_maxRadius","includeRestricted","_includeRestricted","includeAvailability","_includeAvailability","format","_format","updatedAfter","_updatedAfter","matchTimeseries","_matchTimeseries","timeout","isSomeParameterSet","isDef","queryNetworks","query","queryStations","queryChannels","queryResponses","level","includes","queryRawXml","then","rawXml","parseStationXml","mythis","url","formURL","fetchInit","defaultFetchInitObj","XML_MIME","doFetchWithTimeout","response","status","text","rawXmlText","DOMParser","parseFromString","formVersionURL","formBaseURL","queryVersion","TEXT_MIME","colon","endsWith","makeParam","isObject","toIsoWoZ","substr","length"],"mappings":"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"}