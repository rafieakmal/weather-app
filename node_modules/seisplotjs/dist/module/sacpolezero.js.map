{"version":3,"file":"sacpolezero.js","sources":["../../src/sacpolezero.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\n import { Complex, createComplex} from './oregondsputil.js';\n import { isNumArg } from './util.js';\n\n/**\n * SAC style response file. This contains poles and zeros to represent the\n * analog stage, plus a constant for the overall gain. See\n * seisplotjs.transfer.convertToSacPoleZero() for conversion from a\n * StationXML response to SacPoleZero.\n */\nexport class SacPoleZero {\n  /**\n   * Complex poles\n   */\n  poles: Array<Complex>;\n  /**\n   * Complex zeros\n   */\n  zeros: Array<Complex>;\n  /**\n   * Scalar overall gain\n   */\n  constant: number;\n  /** number of zeros added to convert to displacement, for debugging */\n  gamma: number;\n  /** hertz/radian factor, for debugging */\n  mulFactor: number;\n  /** sensitivity accounting for gamma, for debugging */\n  sd: number;\n  /** normalization factor for poles and zeros accounting for gamma, for debugging */\n  A0: number;\n  constructor(poles: Array<Complex>, zeros: Array<Complex>, constant: number) {\n    this.poles = poles;\n    this.zeros = zeros;\n    this.constant = constant;\n  }\n  toString(): string {\n    let s = [\"sacPoleZero:\"];\n    s.push(\"ZEROS \"+this.zeros.length);\n    for(let i=0; i<this.zeros.length; i++ ) {\n      s.push(\"    \"+this.zeros[i].real()+\" \"+this.zeros[i].imag());\n    }\n    s.push(\"POLES \"+this.poles.length);\n    for(let i=0; i<this.poles.length; i++ ) {\n      s.push(\"    \"+this.poles[i].real()+\" \"+this.poles[i].imag());\n    }\n    s.push(\"CONSTANT \"+this.constant);\n    if (isNumArg(this.gamma) && isNumArg(this.mulFactor) && isNumArg(this.sd) && isNumArg(this.A0)) {\n      s.push(\"*    gamma: \"+this.gamma);\n      s.push(\"*    mulFactor: \"+this.mulFactor);\n      s.push(\"*    sd: \"+this.sd);\n      s.push(\"*    A0: \"+this.A0);\n    }\n    return s.join('\\n');\n  }\n  toText(): string {\n    let s = [];\n    s.push(\"ZEROS \"+this.zeros.length);\n    for(let i=0; i<this.zeros.length; i++ ) {\n      s.push(\"    \"+this.zeros[i].real()+\" \"+this.zeros[i].imag());\n    }\n    s.push(\"POLES \"+this.poles.length);\n    for(let i=0; i<this.poles.length; i++ ) {\n      s.push(\"    \"+this.poles[i].real()+\" \"+this.poles[i].imag());\n    }\n    s.push(\"CONSTANT \"+this.constant);\n    return s.join('\\n');\n  }\n  /**\n   * Parses a string in sac polezero format into a SacPoleZero.\n   *\n   * @param data string to parse\n   * @returns SacPoleZero instance\n   */\n  static parse(data: string) {\n      let pz = {\n        zeros: [],\n        poles: [],\n        constant: 1\n      };\n      let lines = data.split('\\n');\n      let numZeros = 0;\n      let numPoles = 0;\n      let i=0;\n      while (i < lines.length) {\n        let l = lines[i];\n        let items = l.trim().split(/ +/);\n        if (items[0] === 'ZEROS') {\n          numZeros = parseInt(items[1]);\n          i++;\n          l = lines[i];\n          items = l.trim().split(/ +/);\n          while (i < lines.length && pz.zeros.length < numZeros) {\n            if (items[0] === 'POLES') {\n              // no more zeros, fill array with 0\n              for(let z = pz.zeros.length; z < numZeros; z++) {\n                pz.zeros.push(createComplex(0,0));\n              }\n              break;\n            } else {\n              let real = parseFloat(items[0]);\n              let imag = parseFloat(items[1]);\n              pz.zeros.push(createComplex(real, imag));\n            }\n            i++;\n            l = lines[i];\n            items = l.trim().split(/ +/);\n          }\n        }\n        if (items[0] === 'POLES') {\n          numPoles = parseInt(items[1]);\n          i++;\n          l = lines[i];\n          items = l.trim().split(/ +/);\n          while (i < lines.length && pz.poles.length < numPoles) {\n            if (items[0] === 'CONSTANT') {\n              // no more poles, fill array with 0\n              for(let z = pz.poles.length; z < numPoles; z++) {\n                pz.poles.push(createComplex(0,0));\n              }\n              break;\n            } else {\n              let real = parseFloat(items[0]);\n              let imag = parseFloat(items[1]);\n              pz.poles.push(createComplex(real, imag));\n            }\n            i++;\n            l = lines[i];\n            items = l.trim().split(/ +/);\n          }\n        }\n        if (items[0] === 'CONSTANT') {\n          pz.constant = parseFloat(items[1]);\n        }\n        i++;\n      }\n      return new SacPoleZero(pz.poles, pz.zeros, pz.constant);\n  }\n}\n"],"names":["SacPoleZero","constructor","poles","zeros","constant","toString","s","push","length","i","real","imag","isNumArg","gamma","mulFactor","sd","A0","join","toText","parse","data","pz","lines","split","numZeros","numPoles","l","items","trim","parseInt","z","createComplex","parseFloat"],"mappings":"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"}