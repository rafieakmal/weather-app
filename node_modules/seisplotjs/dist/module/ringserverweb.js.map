{"version":3,"file":"ringserverweb.js","sources":["../../src/ringserverweb.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport moment from 'moment';\n\nimport * as util from './util.js'; // for util.log\nimport { checkProtocol, hasNoArgs, isStringArg, isNonEmptyStringArg, isNumArg,\n         isDef, TEXT_MIME, doFetchWithTimeout, defaultFetchInitObj} from './util.js';\n\n\nexport type RingserverVersion = {\n  'ringserverVersion': string,\n  'serverId': string\n};\n\nexport type StreamsResult = {\n  accessTime: moment,\n  streams: Array<StreamStat>\n};\n\nexport const IRIS_HOST = 'rtserve.iris.washington.edu';\n\nconst ORG = 'Organization: ';\n/**\n * Web connection to a Ringserver.\n *\n *\n * @param host optional host to connect to, defaults to IRIS\n * @param port optional host to connect to, defaults to 80\n */\nexport class RingserverConnection {\n  /** @private */\n  _host: string;\n  /** @private */\n  _port: number;\n  /** @private */\n  _timeoutSec: number;\n  constructor(host?: string, port?: number) {\n    this._host = (isNonEmptyStringArg(host) ? host : IRIS_HOST);\n    this._port = (isDef(port) ? port : 80);\n    this._timeoutSec = 30;\n  }\n\n  /**\n   * Gets/Sets the remote host to connect to.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  host(value?: string): string | RingserverConnection {\n    if (isStringArg(value)) {\n      this._host = value;\n      return this;\n    } else if (hasNoArgs(value)) {\n      return this._host;\n    } else {\n      throw new Error('value argument is optional or string, but was '+typeof value);\n    }\n  }\n\n  /**\n   * Gets/Sets the remote port to connect to.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  port(value?: number): number | RingserverConnection {\n    if (hasNoArgs(value)) {\n      return this._port;\n    } else if (isNumArg(value)) {\n      this._port = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n\n  /**\n   * Get/Set the timeout in seconds for the request. Default is 30.\n   *\n   * @param value optional new value if setting\n   * @returns new value if getting, this if setting\n   */\n  timeout(value?: number): number | RingserverConnection {\n    if (hasNoArgs(value)) {\n      return this._timeoutSec;\n    } else if (isNumArg(value)) {\n      this._timeoutSec = value;\n      return this;\n    } else {\n      throw new Error('value argument is optional or number, but was '+typeof value);\n    }\n  }\n\n\n  /**\n   * Pulls id result from ringserver /id parsed into an object with\n   * 'ringserverVersion' and 'serverId' fields.\n   *\n   * @returns Result as an RSVP Promise.\n   */\n  pullId(): Promise<RingserverVersion> {\n    return this.pullRaw(this.formIdURL()).then(raw => {\n      let lines = raw.split('\\n');\n      let organization = lines[1];\n      if (organization.startsWith(ORG)) {\n        organization = organization.substring(ORG.length);\n      }\n      return {\n        'ringserverVersion': lines[0],\n        'serverId': organization\n      };\n    });\n  }\n\n  /**\n   *  Use numeric level (1-6) to pull just IDs from ringserver.\n   *  In a default ringserver,\n   *  level=1 would return all networks like\n   *  CO\n   *  and level=2 would return all stations like\n   *  CO_JSC\n   *  If level is falsy/missing, level=6 is used.\n   *  The optional matchPattern is a regular expression, so for example\n   *  '.+_JSC_00_HH.' would get all HH? channels from any station name JSC.\n   *\n   * @param level 1-6\n   * @param matchPattern regular expression to match\n   * @returns Result as an RSVP Promise.\n   */\n  pullStreamIds(level: number, matchPattern: string): Promise<Array<string>> {\n    let queryParams = 'level=6';\n    if (isNumArg(level) && level > 0) { queryParams = 'level='+level; }\n    if (matchPattern) { queryParams = queryParams+'&match='+matchPattern; }\n    const url = this.formStreamIdsURL(queryParams);\n    return this.pullRaw(url).then(raw => {\n      return raw.split('\\n').filter( line => line.length > 0);\n    });\n  }\n\n  /**\n   * Pull streams, including start and end times, from the ringserver.\n   * The optional matchPattern is a regular expression, so for example\n   * '.+_JSC_00_HH.' would get all HH? channels from any station name JSC.\n   * Result returned is an RSVP Promise.\n   *\n   * @param matchPattern regular expression to match\n   * @returns promise to object with 'accessTime' as a moment\n   * and 'streams' as an array of StreamStat objects.\n   */\n  pullStreams(matchPattern: string ): Promise<StreamsResult> {\n    let queryParams = \"\";\n    if (matchPattern) { queryParams = 'match='+matchPattern; }\n    const url = this.formStreamsURL(queryParams);\n    return this.pullRaw(url).then(raw => {\n      let lines = raw.split('\\n');\n      let out = {};\n      out.accessTime = moment.utc();\n      out.streams = [];\n      for(let line of lines) {\n        if(line.length === 0 ) {continue;}\n        let vals = line.split(/\\s+/);\n        if (vals.length === 0) {\n          // blank line, skip\n          continue;\n        } else if (vals.length >= 2) {\n          out.streams.push(new StreamStat(vals[0], vals[1], vals[2]));\n        } else {\n          util.log(\"Bad /streams line, skipping: '\"+line+\"'\");\n        }\n      }\n      return out;\n    });\n  }\n\n  /**\n   * Utility method to pull raw result from ringserver url.\n   * Result returned is an RSVP Promise.\n   *\n   * @param url the url\n   * @returns promise to string result\n   */\n  pullRaw(url: string): Promise<string>{\n    const fetchInit = defaultFetchInitObj(TEXT_MIME);\n    return doFetchWithTimeout(url, fetchInit, this._timeoutSec * 1000 )\n      .then(response => {\n          if (response.status === 200) {\n            return response.text();\n          } else {\n            throw new Error(`Status not 200: ${response.status}`);\n          }\n      });\n  }\n\n  /**\n   * Forms base url from protocol, host and port.\n   *\n   * @returns the string url\n   */\n  formBaseURL(): string {\n    return checkProtocol()+'//'+this._host+(this._port===80 ? '' : (':'+this._port));\n  }\n\n  /**\n   * Forms the ringserver id url.\n   *\n   * @returns the id url\n   */\n  formIdURL(): string {\n    return this.formBaseURL()+'/id';\n  }\n\n  /**\n   * Forms the ringserver streams url using the query parameters.\n   *\n   * @param queryParams optional string of query parameters\n   * @returns the streams url\n   */\n  formStreamsURL(queryParams?: string): string {\n    return this.formBaseURL()+'/streams'+((isNonEmptyStringArg(queryParams) && queryParams.length > 0) ? '?'+queryParams : '');\n  }\n\n  /**\n   * Forms the ringserver stream ids url using the query parameters.\n   *\n   * @param queryParams optional string of query parameters\n   * @returns the stream ids url\n   */\n  formStreamIdsURL(queryParams: string): string {\n    return this.formBaseURL()+'/streamids'+((queryParams && queryParams.length > 0) ? '?'+queryParams : '');\n  }\n\n}\n\n/**\n * Extract one StreamStat per station from an array of channel level\n * StreamStats. The start and end times are the min and max times for all\n * the channels within the station. Can be used to get most time of most\n * recent packet from the stations to give an idea of current latency.\n *\n * @param   streams array of channel level StreamStats\n * @returns array of station level StreamStats\n */\nexport function stationsFromStreams(streams: Array<StreamStat>): Array<StreamStat> {\n  let out: Map<string, StreamStat> = new Map();\n  for (const s of streams) {\n    const nslc = nslcSplit(s.key);\n    const staKey = nslc.networkCode+\".\"+nslc.stationCode;\n    let stat = out.get(staKey);\n    if (! isDef(stat)) {\n      stat = new StreamStat(staKey, s.startRaw, s.endRaw);\n      out.set(staKey, stat);\n    } else {\n      if (stat.start.isAfter(s.start)) {\n        stat.start = s.start;\n        stat.startRaw = s.startRaw;\n      }\n      if (stat.end.isBefore(s.end)) {\n        stat.end = s.end;\n        stat.endRaw = s.endRaw;\n      }\n    }\n  }\n  return Array.from(out.values());\n}\n\nexport type NSLCType = {\n  type: string,\n  networkCode: string,\n  stationCode: string,\n  locationCode: string,\n  channelCode: string\n};\n\n/**\n * Split type, networkCode, stationCode, locationCode and channelCode\n * from a ringserver id formatted like net_sta_loc_chan/type\n *\n * @param   id id string to split\n * @returns  object with the split fields\n */\nexport function nslcSplit(id: string): NSLCType {\n  let split = id.split('/');\n  let out = {};\n  out.type = split[1];\n  let nslc = split[0].split('_');\n  if (nslc.length === 4) {\n    // assume net, station, loc, chan\n    out.networkCode = nslc[0];\n    out.stationCode = nslc[1];\n    out.locationCode = nslc[2];\n    out.channelCode = nslc[3];\n  } else {\n    throw new Error(\"tried to split, did not find 4 elements in array: \"+id);\n  }\n  return out;\n}\n\n/**\n * Object to hold start and end times for a key, usually channel or station.\n *\n * @param key id, usually station or channel\n * @param start start time\n * @param end end time\n */\nexport class StreamStat {\n  key: string;\n  startRaw: string;\n  endRaw: string;\n  start: moment;\n  end: moment;\n  constructor(key: string, start: moment, end: moment) {\n    this.key = key;\n    this.startRaw = start;\n    this.endRaw = end;\n    if (this.startRaw.indexOf('.') !== -1 && this.startRaw.indexOf('.') < this.startRaw.length-4) {\n      this.startRaw = this.startRaw.substring(0, this.startRaw.indexOf('.')+4);\n    }\n    if (this.startRaw.charAt(this.startRaw.length-1) !== 'Z') {\n      this.startRaw = this.startRaw+'Z';\n    }\n    if (this.endRaw.indexOf('.') !== -1 && this.endRaw.indexOf('.') < this.endRaw.length-4) {\n      this.endRaw = this.endRaw.substring(0, this.endRaw.indexOf('.')+4);\n    }\n    if (this.endRaw.charAt(this.endRaw.length-1) !== 'Z') {\n      this.endRaw = this.endRaw+'Z';\n    }\n    this.start = moment.utc(this.startRaw);\n    this.end = moment.utc(this.endRaw);\n    this.startRaw = start; // reset to unchanged strings\n    this.endRaw = end;\n  }\n  /**\n   * Calculates latency time difference between last packet and current time.\n   *\n   * @param accessTime time latency is calculated relative to\n   * @returns latency\n   */\n  calcLatency(accessTime: moment): moment.duration {\n    return this.end.from(accessTime);\n  }\n}\n"],"names":["IRIS_HOST","ORG","RingserverConnection","constructor","host","port","_host","isNonEmptyStringArg","_port","isDef","_timeoutSec","value","isStringArg","hasNoArgs","Error","isNumArg","timeout","pullId","pullRaw","formIdURL","then","raw","lines","split","organization","startsWith","substring","length","pullStreamIds","level","matchPattern","queryParams","url","formStreamIdsURL","filter","line","pullStreams","formStreamsURL","out","accessTime","moment","utc","streams","vals","push","StreamStat","util","fetchInit","defaultFetchInitObj","TEXT_MIME","doFetchWithTimeout","response","status","text","formBaseURL","checkProtocol","stationsFromStreams","Map","s","nslc","nslcSplit","key","staKey","networkCode","stationCode","stat","get","startRaw","endRaw","set","start","isAfter","end","isBefore","Array","from","values","id","type","locationCode","channelCode","indexOf","charAt","calcLatency"],"mappings":"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"}