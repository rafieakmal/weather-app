{"version":3,"file":"taper.js","sources":["../../src/taper.js"],"sourcesContent":["// @flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport {Seismogram } from './seismogram.js';\n\n/**\n * Applies a time domain taper of the given type.\n *\n * @param   seis      Seismogram to taper\n * @param   width     width as a fraction of seismogram length, default is 0.05\n * @param   taperType taper type, default is HANNING, others are HAMMING and COSINE\n * @returns            copy of seismogram with taper applied.\n */\nexport function taper(seis: Seismogram, width: number = 0.05, taperType: string = HANNING): Seismogram {\n  if (width > 0.5) {\n    throw new Error(\"Taper width cannot be larger than 0.5, width=\"+width);\n  }\n  if (seis.isContiguous()) {\n    let data = seis.y;\n    let outData = Float32Array.from(data);\n    let w = Math.floor(data.length * width);\n    let coeff = getCoefficients(taperType, w);\n    const omega = coeff[0];\n    const f0 = coeff[1];\n    const f1 = coeff[2];\n    for(let i = 0; i < w; i++) {\n      const taperFactor = (f0 - f1 * Math.cos(omega * i));\n      outData[i] = outData[i] * taperFactor;\n      outData[outData.length - i - 1] = outData[outData.length - i - 1] * taperFactor;\n    }\n    return seis.cloneWithNewData(outData);\n  } else {\n    throw new Error(\"Cannot take taper of non-contiguous seismogram\");\n  }\n}\n\n\n/**\n * Calculates the coefficients for tapering, [omega, f0, f1]\n *\n * @param type HANNING, HAMMING or COSINE\n * @param length number of data points\n * @returns tapering coefficients as an array of length 3\n */\nexport function getCoefficients(type: string, length: number ): Array<number> {\n  let omega, f0, f1;\n  if(type === HANNING) {\n      omega = Math.PI / length;\n      f0 = .5;\n      f1 = .5;\n  } else if(type === HAMMING) {\n      omega = Math.PI / length;\n      f0 = .54;\n      f1 = .46;\n  } else {\n      // cosine\n      omega = Math.PI / 2 / length;\n      f0 = 1;\n      f1 = 1;\n  }\n  return [ omega, f0, f1 ];\n}\n\nexport const HANNING = \"HANNING\";\nexport const HAMMING = \"HAMMING\";\nexport const COSINE = \"COSINE\";\n"],"names":["taper","seis","width","taperType","HANNING","Error","isContiguous","data","y","outData","Float32Array","from","w","Math","floor","length","coeff","getCoefficients","omega","f0","f1","i","taperFactor","cos","cloneWithNewData","type","PI","HAMMING","COSINE"],"mappings":";;;;AAEA;;;;;AAQA;;;;;;;;;AAQO,SAASA,KAAT,CAAeC,IAAf,EAAiCC,KAAa,GAAG,IAAjD,EAAuDC,SAAiB,GAAGC,OAA3E,EAAgG;AACrG,MAAIF,KAAK,GAAG,GAAZ,EAAiB;AACf,UAAM,IAAIG,KAAJ,CAAU,kDAAgDH,KAA1D,CAAN;AACD;;AACD,MAAID,IAAI,CAACK,YAAL,EAAJ,EAAyB;AACvB,QAAIC,IAAI,GAAGN,IAAI,CAACO,CAAhB;AACA,QAAIC,OAAO,GAAGC,YAAY,CAACC,IAAb,CAAkBJ,IAAlB,CAAd;AACA,QAAIK,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWP,IAAI,CAACQ,MAAL,GAAcb,KAAzB,CAAR;AACA,QAAIc,KAAK,GAAGC,eAAe,CAACd,SAAD,EAAYS,CAAZ,CAA3B;AACA,UAAMM,KAAK,GAAGF,KAAK,CAAC,CAAD,CAAnB;AACA,UAAMG,EAAE,GAAGH,KAAK,CAAC,CAAD,CAAhB;AACA,UAAMI,EAAE,GAAGJ,KAAK,CAAC,CAAD,CAAhB;;AACA,SAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,CAAnB,EAAsBS,CAAC,EAAvB,EAA2B;AACzB,YAAMC,WAAW,GAAIH,EAAE,GAAGC,EAAE,GAAGP,IAAI,CAACU,GAAL,CAASL,KAAK,GAAGG,CAAjB,CAA/B;AACAZ,MAAAA,OAAO,CAACY,CAAD,CAAP,GAAaZ,OAAO,CAACY,CAAD,CAAP,GAAaC,WAA1B;AACAb,MAAAA,OAAO,CAACA,OAAO,CAACM,MAAR,GAAiBM,CAAjB,GAAqB,CAAtB,CAAP,GAAkCZ,OAAO,CAACA,OAAO,CAACM,MAAR,GAAiBM,CAAjB,GAAqB,CAAtB,CAAP,GAAkCC,WAApE;AACD;;AACD,WAAOrB,IAAI,CAACuB,gBAAL,CAAsBf,OAAtB,CAAP;AACD,GAdD,MAcO;AACL,UAAM,IAAIJ,KAAJ,CAAU,gDAAV,CAAN;AACD;AACF;AAGD;;;;;;;;AAOO,SAASY,eAAT,CAAyBQ,IAAzB,EAAuCV,MAAvC,EAAuE;AAC5E,MAAIG,KAAJ,EAAWC,EAAX,EAAeC,EAAf;;AACA,MAAGK,IAAI,KAAKrB,OAAZ,EAAqB;AACjBc,IAAAA,KAAK,GAAGL,IAAI,CAACa,EAAL,GAAUX,MAAlB;AACAI,IAAAA,EAAE,GAAG,EAAL;AACAC,IAAAA,EAAE,GAAG,EAAL;AACH,GAJD,MAIO,IAAGK,IAAI,KAAKE,OAAZ,EAAqB;AACxBT,IAAAA,KAAK,GAAGL,IAAI,CAACa,EAAL,GAAUX,MAAlB;AACAI,IAAAA,EAAE,GAAG,GAAL;AACAC,IAAAA,EAAE,GAAG,GAAL;AACH,GAJM,MAIA;AACH;AACAF,IAAAA,KAAK,GAAGL,IAAI,CAACa,EAAL,GAAU,CAAV,GAAcX,MAAtB;AACAI,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACH;;AACD,SAAO,CAAEF,KAAF,EAASC,EAAT,EAAaC,EAAb,CAAP;AACD;MAEYhB,OAAO,GAAG;MACVuB,OAAO,GAAG;MACVC,MAAM,GAAG;;;;"}