{"version":3,"file":"transfer.js","sources":["../../src/transfer.js"],"sourcesContent":["//@flow\n\n/*\n * Philip Crotwell\n * University of South Carolina, 2019\n * http://www.seis.sc.edu\n */\n\nimport {calcDFT, inverseDFT, FFTResult } from './fft.js';\nimport {SeismogramSegment, Seismogram } from './seismogram.js';\nimport { SacPoleZero } from './sacpolezero.js';\nimport {Response, PolesZeros } from './stationxml.js';\nimport Qty from 'js-quantities';\nimport { Complex, createComplex} from './oregondsputil.js';\n\n/**\n * Applies response, poles and zeros along with overall gain to the seismogram.\n * Should produce results similar to the sac command:\n * transfer from polezero to none\n *\n * @param   seis     seismogram to instrument correct\n * @param   response response to apply\n * @param   lowCut   low cut\n * @param   lowPass  low pass\n * @param   highPass high pass\n * @param   highCut  high cut\n * @returns           instrument corrected seismogram\n */\nexport function transfer(seis: Seismogram,\n                        response: Response,\n                        lowCut: number,\n                        lowPass: number,\n                        highPass: number,\n                        highCut: number): Seismogram {\n        if (! response) {\n          throw new Error(\"Response not exist???\");\n        }\n        const sacPoleZero = convertToSacPoleZero(response);\n\n        return transferSacPZ(seis, sacPoleZero, lowCut, lowPass, highPass, highCut);\n      }\n\n\nexport function transferSacPZ(seis: Seismogram,\n                              sacPoleZero: SacPoleZero,\n                              lowCut: number,\n                              lowPass: number,\n                              highPass: number,\n                              highCut: number): Seismogram {\n  let outSeis = [];\n  for( let i=0; i< seis.segments.length; i++) {\n    let result = transferSacPZSegment(seis.segments[i],\n                                      sacPoleZero,\n                                      lowCut,\n                                      lowPass,\n                                      highPass,\n                                      highCut);\n    outSeis.push(result);\n  }\n  return new Seismogram(outSeis);\n}\n\nexport function transferSacPZSegment(seis: SeismogramSegment,\n                              sacPoleZero: SacPoleZero,\n                              lowCut: number,\n                              lowPass: number,\n                              highPass: number,\n                              highCut: number): SeismogramSegment {\n        const sampFreq = seis.sampleRate;\n\n        let values = seis.y;\n        let outData = Float32Array.from(values);\n        /* sac premultiplies the data by the sample period before doing the fft. Later it\n         * seems to be cancled out by premultiplying the pole zeros by a similar factor.\n         * I don't understand why they do this, but am reproducing it in order to be\n         * compatible.\n         */\n        outData.forEach((d,i) => outData[i] = d/sampFreq);\n\n        let freqValues = calcDFT(outData);\n        freqValues = combine(freqValues, sampFreq, sacPoleZero, lowCut, lowPass, highPass, highCut);\n\n        outData = inverseDFT(freqValues, values.length);\n        // a extra factor of nfft gets in somehow???\n        outData.forEach((d,i) => outData[i] = d * freqValues.length);\n        let out = seis.cloneWithNewData(outData);\n        //out.y_unit = UNITS.METER;\n        out.yUnit = 'm';\n        return out;\n    }\n\n\nexport function calcResponse(response: Response, numPoints: number, sampleRate: number, unit: string | Qty =\"m\"): FFTResult {\n  const sacPoleZero = convertToSacPoleZero(response);\n\n  const unitQty = new Qty(unit);\n  let gamma = 0;\n  if (unitQty.isCompatible(UNITS.METER)) {\n      gamma = 0;\n  } else if (unitQty.isCompatible(UNITS.METER_PER_SECOND)) {\n      gamma = 1;\n  } else if (unitQty.isCompatible(UNITS.METER_PER_SECOND_PER_SECOND)) {\n      gamma = 2;\n  } else {\n      throw new Error(\"response unit is not displacement (m), velocity (m/s) or acceleration (m/s^2): \"+unit);\n  }\n  for(let i=0; i<gamma; i++) {\n    let z = sacPoleZero.zeros[sacPoleZero.zeros.length-1-i];\n    if (z.real() !== 0 || z.imag() !== 0) {\n      throw new Error(`Attempt to trim ${gamma} zeros from SacPoleZero, but zero isn't 0+i0: ${z}`);\n    }\n  }\n  // subtract gama zeros, ex 1 to get\n  let trimmedZeros = sacPoleZero.zeros.slice().reverse();\n  for(let i=0; i<gamma; i++) {\n    let idx = trimmedZeros.findIndex((d) => d.real() === 0 && d.imag() === 0);\n    trimmedZeros.splice(idx, 1);\n  }\n  trimmedZeros = trimmedZeros.reverse();\n  sacPoleZero.zeros = trimmedZeros;\n  let out = calcResponseFromSacPoleZero( sacPoleZero, numPoints, sampleRate);\n  return out;\n}\n\n/**\n * Caclulates the frequency response from the given poles and zeros.\n *\n * @param   sacPoleZero poles and zeros\n * @param   numPoints   number of points in the output fft\n * @param   sampleRate  sample rate to compute at\n * @returns             frequency response\n */\nexport function calcResponseFromSacPoleZero(sacPoleZero: SacPoleZero, numPoints: number, sampleRate: number): FFTResult {\n  // inst response as packed frequency array\n  let freqValues = new Float32Array(numPoints);\n  const deltaF = sampleRate / freqValues.length;\n  // zero freq\n  freqValues[0] = 0;\n  // nyquist\n  let freq = sampleRate / 2;\n  let respAtS = evalPoleZeroInverse(sacPoleZero, freq);\n  respAtS = createComplex(1, 0).overComplex(respAtS);\n  freqValues[freqValues.length/2 ] = respAtS.real();\n  for(let i = 1; i < freqValues.length / 2 ; i++) {\n    freq = i * deltaF;\n    respAtS = evalPoleZeroInverse(sacPoleZero, freq);\n    //respAtS = respAtS.timesReal(deltaF*i);\n    respAtS = createComplex(1, 0).overComplex(respAtS);\n    if (respAtS.real() !== 0 && respAtS.imag() !== 0) {\n      freqValues[i] = respAtS.real();\n      freqValues[freqValues.length-i] = respAtS.imag();\n    } else {\n      freqValues[i] = 1e-10;\n      freqValues[freqValues.length-i] = 0;\n    }\n  }\n  let out = FFTResult.createFromPackedFreq(freqValues, numPoints, sampleRate);\n  return out;\n}\n\n/**\n * Applies poles and zeros to the fft of a time series. Modifies the freqValues\n * in place.\n *\n * @param   freqValues  fft of a timeseries\n * @param   sampFreq    sampling frequency\n * @param   sacPoleZero poles and zeros\n * @param   lowCut      low cut\n * @param   lowPass     low pass\n * @param   highPass    high pass\n * @param   highCut     high cut\n * @returns             input freq values, with poles and zeros applied\n */\nexport function combine(freqValues: Float32Array,\n                        sampFreq: number,\n                        sacPoleZero: SacPoleZero,\n                        lowCut: number,\n                        lowPass: number,\n                        highPass: number,\n                        highCut: number) {\n        const deltaF = sampFreq / freqValues.length;\n\n        // handle zero freq, no imag, set real to 0\n        freqValues[0] = 0;\n        // handle nyquist\n        let freq = sampFreq / 2;\n        let respAtS = evalPoleZeroInverse(sacPoleZero, freq);\n        respAtS = respAtS.timesReal(deltaF*calcFreqTaper(freq,\n                                               lowCut,\n                                               lowPass,\n                                               highPass,\n                                               highCut));\n        freqValues[freqValues.length/2 ] = respAtS.timesReal(freqValues[freqValues.length/2 ]).real();\n        for(let i = 1; i < freqValues.length / 2 ; i++) {\n            freq = i * deltaF;\n            respAtS = evalPoleZeroInverse(sacPoleZero, freq);\n            respAtS = respAtS.timesReal(deltaF*calcFreqTaper(freq,\n                                                               lowCut,\n                                                               lowPass,\n                                                               highPass,\n                                                               highCut));\n            let freqComplex = createComplex(freqValues[i], freqValues[freqValues.length-i])\n                .timesComplex(respAtS);\n            freqValues[i] = freqComplex.real();\n            freqValues[freqValues.length-i] = freqComplex.imag();\n        }\n        return freqValues;\n    }\n\n  /**\n   * Evaluates the poles and zeros at the given value. The return value is\n   * 1/(pz(s) to avoid divide by zero issues. If there is a divide by zero\n   * situation, then the response is set to be 0+0i.\n   *\n   * @param sacPoleZero SAC PoleZero response\n   * @param freq frequency to evaluate\n   * @returns complex frequency domain value for this frequency\n   */\n  export function evalPoleZeroInverse(sacPoleZero: SacPoleZero, freq: number) {\n        const s = createComplex(0, 2 * Math.PI * freq);\n        let zeroOut = createComplex(1, 0);\n        let poleOut = createComplex(1, 0);\n        for(let i = 0; i < sacPoleZero.poles.length; i++) {\n            poleOut = poleOut.timesComplex( s.minusComplex(sacPoleZero.poles[i]) );\n        }\n        for(let i = 0; i < sacPoleZero.zeros.length; i++) {\n            if(s.real() === sacPoleZero.zeros[i].real()\n                    && s.imag() === sacPoleZero.zeros[i].imag()) {\n                return createComplex(0,0);\n            }\n            zeroOut = zeroOut.timesComplex( s.minusComplex(sacPoleZero.zeros[i]) );\n        }\n        let out = poleOut.overComplex(zeroOut);\n        return out.overReal( sacPoleZero.constant);\n    }\n\n/**\n * Calculates the frequency taper for the given parameters.\n *\n * @param   freq     frequency\n * @param   lowCut   low cut\n * @param   lowPass  low pass\n * @param   highPass high pass\n * @param   highCut  high cut\n * @returns           taper value at the frequency\n */\nexport function calcFreqTaper(freq: number,\n                          lowCut: number,\n                          lowPass: number,\n                          highPass: number,\n                          highCut: number): number {\n    if (lowCut > lowPass || lowPass > highPass || highPass > highCut) {\n        throw new Error(\"must be lowCut > lowPass > highPass > highCut: \"+lowCut +\" \"+ lowPass +\" \"+ highPass +\" \"+ highCut);\n    }\n    if(freq <= lowCut || freq >= highCut) {\n        return 0;\n    }\n    if(freq >= lowPass && freq <= highPass) {\n        return 1;\n    }\n    if(freq > lowCut && freq < lowPass) {\n        return 0.5 * (1.0 + Math.cos(Math.PI * (freq - lowPass)\n                / (lowCut - lowPass)));\n    }\n    // freq > highPass && freq < highCut\n    return 0.5 * (1.0 - Math.cos(Math.PI * (freq - highCut)\n            / (highPass - highCut)));\n}\n\n/**\n * Applies the frequency taper to the fft of the time series.\n *\n * @param   fftResult  fft of time series\n * @param   sampleRate sample rate\n * @param   lowCut     low cut\n * @param   lowPass    low pass\n * @param   highPass   high pass\n * @param   highCut    high cut\n * @returns            fft with taper applied\n */\nexport function applyFreqTaper(fftResult: FFTResult,\n                          sampleRate: number,\n                          lowCut: number,\n                          lowPass: number,\n                          highPass: number,\n                          highCut: number): FFTResult {\n\n  const deltaF = sampleRate / fftResult.amp.length / 2;\n  return FFTResult.createFromAmpPhase(fftResult.amp.map( (v,i) => i === 0 ? 0 : v*calcFreqTaper(i*deltaF, lowCut, lowPass, highPass, highCut)),\n                                      fftResult.phase, fftResult.origLength, fftResult.sampleRate);\n}\n\n/**\n * commonly used units as Qty\n */\nexport const UNITS = {\n  COUNT: new Qty('count'),\n  METER: new Qty('m'),\n  METER_PER_SECOND: new Qty('m/s'),\n  METER_PER_SECOND_PER_SECOND: new Qty('m/s2'),\n};\n\n /**\n  * Converts a StationXML response to SAC PoleZero style. This\n  * converts the analog to digital stage (usually 0) along\n  * with the overall gain, but does not include later FIR stages.\n  * To maintain compatibility with SAC, this includes extra zeros\n  * if needed to convert to displacement. The number of extra zeros\n  * added is kept as gamma in the result.\n  *\n  * @param response stationxml Response to convert\n  * @returns SAC PoleZero style version of the response\n  */\nexport function convertToSacPoleZero( response: Response) {\n    let polesZeros: PolesZeros;\n    if (response.stages[0].filter instanceof PolesZeros) {\n      polesZeros = response.stages[0].filter;\n    } else {\n      throw new Error(\"can't find PolesZeros\");\n    }\n    let unit = response.instrumentSensitivity.inputUnits;\n    if (unit === \"M/S\" || unit === \"M/SEC\") {\n      unit = \"m/s\";\n    }\n    const unitQty = new Qty(unit);\n    let scaleUnit = new Qty(1, unit);\n    let gamma = 0;\n    if (unitQty.isCompatible(UNITS.METER)) {\n        gamma = 0;\n        scaleUnit = scaleUnit.to(UNITS.METER);\n    } else if (unitQty.isCompatible(UNITS.METER_PER_SECOND)) {\n        gamma = 1;\n        scaleUnit = scaleUnit.to(UNITS.METER_PER_SECOND);\n    } else if (unitQty.isCompatible(UNITS.METER_PER_SECOND_PER_SECOND)) {\n        gamma = 2;\n        scaleUnit = scaleUnit.to(UNITS.METER_PER_SECOND_PER_SECOND);\n    } else {\n        throw new Error(\"response unit is not displacement, velocity or acceleration: \"+unit);\n    }\n\n    let mulFactor = 1;\n    if (polesZeros.pzTransferFunctionType === \"LAPLACE (HERTZ)\") {\n        mulFactor = 2 * Math.PI;\n    }\n    let zeros = [];\n    // extra gamma zeros are (0,0)\n    for (let i = 0; i < polesZeros.zeros.length; i++) {\n        zeros[i] = createComplex(polesZeros.zeros[i].real() * mulFactor,\n                               polesZeros.zeros[i].imag() * mulFactor);\n    }\n    for (let i=0; i<gamma; i++) {\n      zeros.push(createComplex(0,0));\n    }\n    let poles = [];\n    for (let i = 0; i < polesZeros.poles.length; i++) {\n        poles[i] = createComplex(polesZeros.poles[i].real() * mulFactor,\n                               polesZeros.poles[i].imag() * mulFactor);\n    }\n    let constant = polesZeros.normalizationFactor;\n    let sd = response.instrumentSensitivity.sensitivity;\n    let fs = response.instrumentSensitivity.frequency;\n    sd *= Math.pow(2 * Math.PI * fs, gamma);\n    let A0 = polesZeros.normalizationFactor;\n    let fn = polesZeros.normalizationFrequency;\n    A0 = A0 / Math.pow(2 * Math.PI * fn, gamma);\n    if (polesZeros.pzTransferFunctionType === \"LAPLACE (HERTZ)\") {\n        A0 *= Math.pow(2 * Math.PI, polesZeros.poles.length - polesZeros.zeros.length);\n    }\n    if (poles.length === 0 && zeros.length === 0) {\n        constant = (sd * A0);\n    } else {\n        constant = (sd * calc_A0(poles, zeros, fs));\n    }\n    constant *= scaleUnit.scalar;\n    let sacPZ = new SacPoleZero(poles, zeros, constant);\n    sacPZ.gamma= gamma;\n    sacPZ.mulFactor= mulFactor;\n    sacPZ.sd= sd;\n    sacPZ.A0= A0;\n    return sacPZ;\n}\n\nexport function calc_A0(poles: Array<Complex>,\n                        zeros: Array<Complex>,\n                        ref_freq: number) {\n    let numer = createComplex(1, 0);\n    let denom = createComplex(1, 0);\n    let f0;\n    let a0;\n    f0 = createComplex(0, 2 * Math.PI * ref_freq);\n    for (let i = 0; i < zeros.length; i++) {\n        denom = denom.timesComplex( f0.minusComplex(zeros[i]));\n    }\n    for (let i = 0; i < poles.length; i++) {\n        numer = numer.timesComplex( f0.minusComplex(poles[i]));\n    }\n    a0 = numer.overComplex(denom).abs();\n    return a0;\n}\n"],"names":["transfer","seis","response","lowCut","lowPass","highPass","highCut","Error","sacPoleZero","convertToSacPoleZero","transferSacPZ","outSeis","i","segments","length","result","transferSacPZSegment","push","Seismogram","sampFreq","sampleRate","values","y","outData","Float32Array","from","forEach","d","freqValues","calcDFT","combine","inverseDFT","out","cloneWithNewData","yUnit","calcResponse","numPoints","unit","unitQty","Qty","gamma","isCompatible","UNITS","METER","METER_PER_SECOND","METER_PER_SECOND_PER_SECOND","z","zeros","real","imag","trimmedZeros","slice","reverse","idx","findIndex","splice","calcResponseFromSacPoleZero","deltaF","freq","respAtS","evalPoleZeroInverse","createComplex","overComplex","FFTResult","createFromPackedFreq","timesReal","calcFreqTaper","freqComplex","timesComplex","s","Math","PI","zeroOut","poleOut","poles","minusComplex","overReal","constant","cos","applyFreqTaper","fftResult","amp","createFromAmpPhase","map","v","phase","origLength","COUNT","polesZeros","stages","filter","PolesZeros","instrumentSensitivity","inputUnits","scaleUnit","to","mulFactor","pzTransferFunctionType","normalizationFactor","sd","sensitivity","fs","frequency","pow","A0","fn","normalizationFrequency","calc_A0","scalar","sacPZ","SacPoleZero","ref_freq","numer","denom","f0","a0","abs"],"mappings":"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"}