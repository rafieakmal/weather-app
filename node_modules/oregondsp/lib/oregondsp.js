(function (_, Kotlin) {
  'use strict';
  var math = Kotlin.kotlin.math;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var throwUPAE = Kotlin.throwUPAE;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
  var toString = Kotlin.toString;
  var ensureNotNull = Kotlin.ensureNotNull;
  var toBoxedChar = Kotlin.toBoxedChar;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var RuntimeException_init = Kotlin.kotlin.RuntimeException_init_pdl1vj$;
  var round = Kotlin.kotlin.math.round_14dthe$;
  var numberToInt = Kotlin.numberToInt;
  var roundToInt = Kotlin.kotlin.math.roundToInt_yrwdxr$;
  var println = Kotlin.kotlin.io.println_s8jyv4$;
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  HammingWindow.prototype = Object.create(Window.prototype);
  HammingWindow.prototype.constructor = HammingWindow;
  HanningWindow.prototype = Object.create(Window.prototype);
  HanningWindow.prototype.constructor = HanningWindow;
  CDFTsr16.prototype = Object.create(CDFTsr.prototype);
  CDFTsr16.prototype.constructor = CDFTsr16;
  CDFTsr8.prototype = Object.create(CDFTsr.prototype);
  CDFTsr8.prototype.constructor = CDFTsr8;
  FIRTypeIII.prototype = Object.create(EquirippleFIRFilter.prototype);
  FIRTypeIII.prototype.constructor = FIRTypeIII;
  CenteredDifferentiator.prototype = Object.create(FIRTypeIII.prototype);
  CenteredDifferentiator.prototype.constructor = CenteredDifferentiator;
  CenteredHilbertTransform.prototype = Object.create(FIRTypeIII.prototype);
  CenteredHilbertTransform.prototype.constructor = CenteredHilbertTransform;
  FIRTypeI.prototype = Object.create(EquirippleFIRFilter.prototype);
  FIRTypeI.prototype.constructor = FIRTypeI;
  EquirippleBandpass.prototype = Object.create(FIRTypeI.prototype);
  EquirippleBandpass.prototype.constructor = EquirippleBandpass;
  FIRTypeII.prototype = Object.create(EquirippleFIRFilter.prototype);
  FIRTypeII.prototype.constructor = FIRTypeII;
  EquirippleHalfBandPrototype.prototype = Object.create(FIRTypeII.prototype);
  EquirippleHalfBandPrototype.prototype.constructor = EquirippleHalfBandPrototype;
  EquirippleHighpass.prototype = Object.create(FIRTypeI.prototype);
  EquirippleHighpass.prototype.constructor = EquirippleHighpass;
  EquirippleLowpass.prototype = Object.create(FIRTypeI.prototype);
  EquirippleLowpass.prototype.constructor = EquirippleLowpass;
  FIRTypeIV.prototype = Object.create(EquirippleFIRFilter.prototype);
  FIRTypeIV.prototype.constructor = FIRTypeIV;
  StaggeredDifferentiator.prototype = Object.create(FIRTypeIV.prototype);
  StaggeredDifferentiator.prototype.constructor = StaggeredDifferentiator;
  StaggeredHilbertTranform.prototype = Object.create(FIRTypeIV.prototype);
  StaggeredHilbertTranform.prototype.constructor = StaggeredHilbertTranform;
  AnalogButterworth.prototype = Object.create(AnalogPrototype.prototype);
  AnalogButterworth.prototype.constructor = AnalogButterworth;
  AnalogChebyshevI.prototype = Object.create(AnalogPrototype.prototype);
  AnalogChebyshevI.prototype.constructor = AnalogChebyshevI;
  AnalogChebyshevII.prototype = Object.create(AnalogPrototype.prototype);
  AnalogChebyshevII.prototype.constructor = AnalogChebyshevII;
  Butterworth.prototype = Object.create(IIRFilter.prototype);
  Butterworth.prototype.constructor = Butterworth;
  ChebyshevI.prototype = Object.create(IIRFilter.prototype);
  ChebyshevI.prototype.constructor = ChebyshevI;
  ChebyshevII.prototype = Object.create(IIRFilter.prototype);
  ChebyshevII.prototype.constructor = ChebyshevII;
  PassbandType.prototype = Object.create(Enum.prototype);
  PassbandType.prototype.constructor = PassbandType;
  ThiranAllpass.prototype = Object.create(Allpass.prototype);
  ThiranAllpass.prototype.constructor = ThiranAllpass;
  var Math_0 = Math;
  function HammingWindow(N) {
    Window_init_0(N, this);
    var tmp$;
    tmp$ = N - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var tmp$_0 = this.w;
      var x = -math.PI + i * 2.0 * math.PI / (N - 1 | 0);
      tmp$_0[i] = 0.54 + 0.46 * Math_0.cos(x);
    }
  }
  HammingWindow.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HammingWindow',
    interfaces: [Window]
  };
  function HanningWindow(N) {
    Window_init_0(N, this);
    var tmp$;
    tmp$ = N - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var tmp$_0 = this.w;
      var x = -math.PI + i * 2.0 * math.PI / (N - 1 | 0);
      tmp$_0[i] = 0.5 + 0.5 * Math_0.cos(x);
    }
  }
  HanningWindow.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HanningWindow',
    interfaces: [Window]
  };
  function Sequence() {
    Sequence$Companion_getInstance();
    this.array_68l1y1$_0 = null;
  }
  Object.defineProperty(Sequence.prototype, 'array', {
    get: function () {
      return this.array_68l1y1$_0;
    },
    set: function (array) {
      this.array_68l1y1$_0 = array;
    }
  });
  Sequence.prototype.alias = function (N) {
    var newx = new Float32Array(N);
    Sequence$Companion_getInstance().aliasArray(this.array, newx);
    this.array = newx;
  };
  Sequence.prototype.getForIndex = function (index) {
    var retval = 0.0;
    if (index >= 0 && index < this.array.length)
      retval = this.array[index];
    return retval;
  };
  Sequence.prototype.reverse = function () {
    Sequence$Companion_getInstance().reverseArray(this.array);
  };
  Sequence.prototype.rmean = function () {
    Sequence$Companion_getInstance().rmeanArray(this.array);
  };
  Sequence.prototype.circularShift = function (shift) {
    Sequence$Companion_getInstance().circularShiftArray(this.array, shift);
  };
  Sequence.prototype.zeroShift = function (shift) {
    Sequence$Companion_getInstance().zeroShiftArray(this.array, shift);
  };
  Sequence.prototype.decimate = function (decrate) {
    var tmp = new Float32Array(this.array.length / decrate | 0);
    Sequence$Companion_getInstance().decimateArray(this.array, decrate, tmp);
    this.array = tmp;
  };
  Sequence.prototype.stretch = function (rate) {
    var tmp = new Float32Array(Kotlin.imul(this.array.length, rate));
    Sequence$Companion_getInstance().stretchArray(this.array, rate, tmp);
    this.array = tmp;
  };
  Sequence.prototype.timesEquals = function (f) {
    Sequence$Companion_getInstance().timesEqualsArray(this.array, f);
  };
  Sequence.prototype.pad = function (n) {
    if (n > this.array.length) {
      var tmp = new Float32Array(n);
      Sequence$Companion_getInstance().padArray(this.array, tmp);
      this.array = tmp;
    }
  };
  function Sequence$Companion() {
    Sequence$Companion_instance = this;
  }
  Sequence$Companion.prototype.aliasArray = function (src, dst) {
    var tmp$;
    var slength = src.length;
    var dlength = dst.length;
    for (var i = 0; i <= dlength; i++)
      dst[i] = 0.0;
    tmp$ = slength - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$; i_0++)
      dst[i_0 % dlength] = dst[i_0 % dlength] + src[i_0];
  };
  Sequence$Companion.prototype.reverseArray = function (y) {
    var i = 0;
    var j = y.length - 1 | 0;
    while (i < j) {
      var tmp = y[i];
      y[i] = y[j];
      y[j] = tmp;
      i = i + 1 | 0;
      j = j - 1 | 0;
    }
  };
  Sequence$Companion.prototype.rmeanArray = function (y) {
    var mean = 0.0;
    for (var i = 0; i !== y.length; ++i) {
      mean += y[i];
    }
    mean /= y.length;
    for (var i_0 = 0; i_0 !== y.length; ++i_0) {
      y[i_0] = y[i_0] - mean;
    }
  };
  Sequence$Companion.prototype.circularShiftArray = function (y, shift) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var N = y.length;
    var s = shift % N;
    if (s > 0 && (N - s | 0) < s)
      s = s - N | 0;
    else if (s < 0 && (N + s | 0) < (-s | 0))
      s = s + N | 0;
    if (s < 0)
      s = s * -1 | 0;
    var tmp = new Float32Array(s);
    if (s > 0) {
      tmp$ = s - 1 | 0;
      for (var i = 0; i <= tmp$; i++)
        tmp[i] = y[N - s + i | 0];
      for (var i_0 = N - 1 - s | 0; i_0 >= 0; i_0--)
        y[i_0 + s | 0] = y[i_0];
      tmp$_0 = s - 1 | 0;
      for (var i_1 = 0; i_1 <= tmp$_0; i_1++)
        y[i_1] = tmp[i_1];
    }
    if (s < 0) {
      tmp$_1 = (-s | 0) - 1 | 0;
      for (var i_2 = 0; i_2 <= tmp$_1; i_2++)
        tmp[i_2] = y[i_2];
      tmp$_2 = N - 1 | 0;
      for (var i_3 = -s | 0; i_3 <= tmp$_2; i_3++)
        y[i_3 + s | 0] = y[i_3];
      tmp$_3 = (-s | 0) - 1 | 0;
      for (var i_4 = 0; i_4 <= tmp$_3; i_4++)
        y[N + s + i_4 | 0] = tmp[i_4];
    }
  };
  Sequence$Companion.prototype.zeroShiftArray = function (y, shift) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if ((-1 * shift | 0) >= y.length || shift >= y.length) {
      for (var i = 0; i <= y.length; i++)
        y[i] = 0.0;
    }
     else if (shift > 0) {
      for (var i_0 = y.length - 1 | 0; i_0 >= shift; i_0--)
        y[i_0] = y[i_0 - shift | 0];
      tmp$ = shift - 1 | 0;
      for (var i_1 = 0; i_1 <= tmp$; i_1++)
        y[i_1] = 0.0;
    }
     else if (shift < 0) {
      tmp$_0 = y.length + shift - 1 | 0;
      for (var i_2 = 0; i_2 <= tmp$_0; i_2++)
        y[i_2] = y[i_2 - shift | 0];
      tmp$_1 = y.length + shift | 0;
      tmp$_2 = y.length - 1 | 0;
      for (var i_3 = tmp$_1; i_3 <= tmp$_2; i_3++)
        y[i_3] = 0.0;
    }
  };
  Sequence$Companion.prototype.decimateArray = function (y, decrate, ydecimated) {
    var tmp$;
    var b = y.length / decrate | 0;
    var n = Math_0.min(ydecimated.length, b);
    tmp$ = n - 1 | 0;
    for (var i = 0; i <= tmp$; i++)
      ydecimated[i] = y[Kotlin.imul(i, decrate)];
  };
  Sequence$Companion.prototype.stretchArray = function (y, rate, ystretched) {
    var tmp$;
    var b = ystretched.length / rate | 0;
    var n = Math_0.min(y.length, b);
    for (var i = 0; i <= ystretched.length; i++)
      ystretched[i] = 0.0;
    tmp$ = n - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$; i_0++)
      ystretched[Kotlin.imul(i_0, rate)] = y[i_0];
  };
  Sequence$Companion.prototype.timesEqualsArray = function (y, f) {
    for (var i = 0; i !== y.length; ++i) {
      y[i] = y[i] * f;
    }
  };
  Sequence$Companion.prototype.padArray = function (y, ypadded) {
    if (y.length < ypadded.length) {
      for (var i = 0; i <= y.length; i++)
        ypadded[i] = y[i];
      for (var i_0 = y.length; i_0 <= ypadded.length; i_0++)
        ypadded[i_0] = 0.0;
    }
     else {
      for (var i_1 = 0; i_1 <= ypadded.length; i_1++)
        ypadded[i_1] = y[i_1];
    }
  };
  Sequence$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Sequence$Companion_instance = null;
  function Sequence$Companion_getInstance() {
    if (Sequence$Companion_instance === null) {
      new Sequence$Companion();
    }
    return Sequence$Companion_instance;
  }
  Sequence.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Sequence',
    interfaces: []
  };
  function Sequence_init(x, $this) {
    $this = $this || Object.create(Sequence.prototype);
    Sequence.call($this);
    $this.array = new Float32Array(x.length);
    $this.array = x.slice();
    return $this;
  }
  function Sequence_init_0(N, $this) {
    $this = $this || Object.create(Sequence.prototype);
    Sequence.call($this);
    $this.array = new Float32Array(N);
    return $this;
  }
  function Window() {
    this.w = null;
  }
  Window.prototype.length = function () {
    return this.w.length;
  };
  Window.prototype.timesEquals = function (x) {
    var tmp$;
    if (x.length !== this.w.length)
      throw IllegalArgumentException_init('Argument length does not match window length');
    tmp$ = this.w;
    for (var i = 0; i !== tmp$.length; ++i) {
      this.w[i] = this.w[i] * x[i];
    }
  };
  Object.defineProperty(Window.prototype, 'array', {
    get: function () {
      return this.w.slice();
    }
  });
  Window.prototype.windowArray = function (x, index, y) {
    var tmp$;
    if (y.length !== this.w.length)
      throw IllegalArgumentException_init('Destination array length does not match window length');
    tmp$ = this.w;
    for (var i = 0; i !== tmp$.length; ++i) {
      var j = index + i | 0;
      if (j >= 0 && j < x.length)
        y[i] = this.w[i] * x[j];
      else
        y[i] = 0.0;
    }
  };
  Window.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Window',
    interfaces: []
  };
  function Window_init(w, $this) {
    $this = $this || Object.create(Window.prototype);
    Window.call($this);
    $this.w = w.slice();
    return $this;
  }
  function Window_init_0(N, $this) {
    $this = $this || Object.create(Window.prototype);
    Window.call($this);
    $this.w = new Float32Array(N);
    return $this;
  }
  function CDFT() {
    CDFT$Companion_getInstance();
    this.yr_tlzr9r$_0 = this.yr_tlzr9r$_0;
    this.yi_tlzrhi$_0 = this.yi_tlzrhi$_0;
    this.arraysUnlinked_0 = false;
    this.c_38vhrt$_0 = this.c_38vhrt$_0;
    this.c3_tm093a$_0 = this.c3_tm093a$_0;
    this.s_38vhe1$_0 = this.s_38vhe1$_0;
    this.s3_tlzx86$_0 = this.s3_tlzx86$_0;
    this.N_8be2vx$ = 0;
    this.log2N_8be2vx$ = 0;
    this.dft_0 = null;
  }
  Object.defineProperty(CDFT.prototype, 'yr_0', {
    get: function () {
      if (this.yr_tlzr9r$_0 == null)
        return throwUPAE('yr');
      return this.yr_tlzr9r$_0;
    },
    set: function (yr) {
      this.yr_tlzr9r$_0 = yr;
    }
  });
  Object.defineProperty(CDFT.prototype, 'yi_0', {
    get: function () {
      if (this.yi_tlzrhi$_0 == null)
        return throwUPAE('yi');
      return this.yi_tlzrhi$_0;
    },
    set: function (yi) {
      this.yi_tlzrhi$_0 = yi;
    }
  });
  Object.defineProperty(CDFT.prototype, 'c_0', {
    get: function () {
      if (this.c_38vhrt$_0 == null)
        return throwUPAE('c');
      return this.c_38vhrt$_0;
    },
    set: function (c) {
      this.c_38vhrt$_0 = c;
    }
  });
  Object.defineProperty(CDFT.prototype, 'c3_0', {
    get: function () {
      if (this.c3_tm093a$_0 == null)
        return throwUPAE('c3');
      return this.c3_tm093a$_0;
    },
    set: function (c3) {
      this.c3_tm093a$_0 = c3;
    }
  });
  Object.defineProperty(CDFT.prototype, 's_0', {
    get: function () {
      if (this.s_38vhe1$_0 == null)
        return throwUPAE('s');
      return this.s_38vhe1$_0;
    },
    set: function (s) {
      this.s_38vhe1$_0 = s;
    }
  });
  Object.defineProperty(CDFT.prototype, 's3_0', {
    get: function () {
      if (this.s3_tlzx86$_0 == null)
        return throwUPAE('s3');
      return this.s3_tlzx86$_0;
    },
    set: function (s3) {
      this.s3_tlzx86$_0 = s3;
    }
  });
  CDFT.prototype.evaluateCDFT = function (xr, xi, Xr, Xi) {
    this.yr_0 = Xr;
    this.yi_0 = Xi;
    this.dft_0.link(xr, xi, Xr, Xi);
    this.arraysUnlinked_0 = false;
    this.dft_0.evaluate();
  };
  CDFT.prototype.evaluateInverseCDFT = function (Xr, Xi, xr, xi) {
    this.yr_0 = xr;
    this.yi_0 = xi;
    this.dft_0.link(Xr, Xi, xr, xi);
    this.arraysUnlinked_0 = false;
    this.evaluateInverse();
  };
  CDFT.prototype.evaluate = function () {
    if (this.arraysUnlinked_0)
      throw IllegalStateException_init('Sequence and transform arrays are not linked');
    this.dft_0.evaluate();
  };
  CDFT.prototype.evaluateInverse = function () {
    if (this.arraysUnlinked_0)
      throw IllegalStateException_init('Sequence and transform arrays are not linked');
    this.dft_0.evaluate();
    var scale = 1.0 / this.N_8be2vx$;
    var N2 = this.N_8be2vx$ / 2 | 0;
    this.yr_0[0] = this.yr_0[0] * scale;
    this.yi_0[0] = this.yi_0[0] * scale;
    this.yr_0[N2] = this.yr_0[N2] * scale;
    this.yi_0[N2] = this.yi_0[N2] * scale;
    var i = 1;
    var j = this.N_8be2vx$ - 1 | 0;
    var tmp;
    while (i < j) {
      tmp = this.yr_0[i];
      this.yr_0[i] = this.yr_0[j] * scale;
      this.yr_0[j] = tmp * scale;
      tmp = this.yi_0[i];
      this.yi_0[i] = this.yi_0[j] * scale;
      this.yi_0[j] = tmp * scale;
      i = i + 1 | 0;
      j = j - 1 | 0;
    }
  };
  CDFT.prototype.createTable_0 = function () {
    var tmp$;
    var N8 = this.N_8be2vx$ / 8 | 0;
    this.c_0 = new Float32Array(N8);
    this.c3_0 = new Float32Array(N8);
    this.s_0 = new Float32Array(N8);
    this.s3_0 = new Float32Array(N8);
    tmp$ = N8 - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var tmp$_0 = this.c_0;
      var x = 2.0 * math.PI * i / this.N_8be2vx$;
      tmp$_0[i] = Math_0.cos(x);
      var tmp$_1 = this.c3_0;
      var x_0 = 2.0 * math.PI * 3.0 * i / this.N_8be2vx$;
      tmp$_1[i] = Math_0.cos(x_0);
      var tmp$_2 = this.s_0;
      var x_1 = 2.0 * math.PI * i / this.N_8be2vx$;
      tmp$_2[i] = -Math_0.sin(x_1);
      var tmp$_3 = this.s3_0;
      var x_2 = 2.0 * math.PI * 3.0 * i / this.N_8be2vx$;
      tmp$_3[i] = -Math_0.sin(x_2);
    }
  };
  function CDFT$Companion() {
    CDFT$Companion_instance = this;
  }
  CDFT$Companion.prototype.dftProduct = function (Xr, Xi, Yr, Yi, sign) {
    if (Xr.length !== Yr.length || Xi.length !== Yi.length || Xr.length !== Xi.length)
      throw IllegalArgumentException_init('Transform array lengths are not equal');
    var tmp;
    for (var i = 0; i !== Xr.length; ++i) {
      tmp = Xr[i] * Yr[i] - sign * Xi[i] * Yi[i];
      Yi[i] = Xr[i] * Yi[i] + sign * Xi[i] * Yr[i];
      Yr[i] = tmp;
    }
  };
  CDFT$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var CDFT$Companion_instance = null;
  function CDFT$Companion_getInstance() {
    if (CDFT$Companion_instance === null) {
      new CDFT$Companion();
    }
    return CDFT$Companion_instance;
  }
  CDFT.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CDFT',
    interfaces: []
  };
  function CDFT_init(log2N, $this) {
    $this = $this || Object.create(CDFT.prototype);
    CDFT.call($this);
    if (log2N < 3)
      throw IllegalArgumentException_init('DFT size must be >= 8');
    $this.arraysUnlinked_0 = true;
    $this.log2N_8be2vx$ = log2N;
    $this.N_8be2vx$ = 1 << log2N;
    $this.createTable_0();
    if (log2N === 3)
      $this.dft_0 = new CDFTsr8(0, 1, 0);
    else if (log2N === 4)
      $this.dft_0 = new CDFTsr16(0, 1, 0);
    else if (log2N >= 5) {
      $this.dft_0 = CDFTsr_init(log2N, $this.c_0, $this.c3_0, $this.s_0, $this.s3_0);
    }
     else
      throw IllegalArgumentException_init('unknown log2N size, must be >=3 but was: ' + toString(log2N));
    return $this;
  }
  function CDFT_init_0(xr, xi, yr, yi, log2N, $this) {
    $this = $this || Object.create(CDFT.prototype);
    CDFT_init(log2N, $this);
    $this.yr_0 = yr;
    $this.yi_0 = yi;
    $this.dft_0.link(xr, xi, yr, yi);
    $this.arraysUnlinked_0 = false;
    return $this;
  }
  function CDFTsr() {
    CDFTsr$Companion_getInstance();
    this.xr_b7dqgh$_0 = this.xr_b7dqgh$_0;
    this.xi_b7dqo8$_0 = this.xi_b7dqo8$_0;
    this.outXr_vno883$_0 = this.outXr_vno883$_0;
    this.outXi_vno80c$_0 = this.outXi_vno80c$_0;
    this.xoffset_0 = 0;
    this.xstride_0 = 0;
    this.outXoffset_0 = 0;
    this.m_0 = 0;
    this.N_0 = 0;
    this.Ndiv8_0 = 0;
    this.Ndiv4_0 = 0;
    this.dft1_0 = null;
    this.dft2_0 = null;
    this.dft3_0 = null;
    this.c_0 = null;
    this.c3_0 = null;
    this.s_0 = null;
    this.s3_0 = null;
    this.f_0 = 0;
    this.reflect_0 = 0;
  }
  Object.defineProperty(CDFTsr.prototype, 'xr_0', {
    get: function () {
      if (this.xr_b7dqgh$_0 == null)
        return throwUPAE('xr');
      return this.xr_b7dqgh$_0;
    },
    set: function (xr) {
      this.xr_b7dqgh$_0 = xr;
    }
  });
  Object.defineProperty(CDFTsr.prototype, 'xi_0', {
    get: function () {
      if (this.xi_b7dqo8$_0 == null)
        return throwUPAE('xi');
      return this.xi_b7dqo8$_0;
    },
    set: function (xi) {
      this.xi_b7dqo8$_0 = xi;
    }
  });
  Object.defineProperty(CDFTsr.prototype, 'outXr_0', {
    get: function () {
      if (this.outXr_vno883$_0 == null)
        return throwUPAE('outXr');
      return this.outXr_vno883$_0;
    },
    set: function (outXr) {
      this.outXr_vno883$_0 = outXr;
    }
  });
  Object.defineProperty(CDFTsr.prototype, 'outXi_0', {
    get: function () {
      if (this.outXi_vno80c$_0 == null)
        return throwUPAE('outXi');
      return this.outXi_vno80c$_0;
    },
    set: function (outXi) {
      this.outXi_vno80c$_0 = outXi;
    }
  });
  CDFTsr.prototype.link = function (xr, xi, Xr, Xi) {
    this.xr_0 = xr;
    this.xi_0 = xi;
    this.outXr_0 = Xr;
    this.outXi_0 = Xi;
    ensureNotNull(this.dft1_0).link(xr, xi, Xr, Xi);
    ensureNotNull(this.dft2_0).link(xr, xi, Xr, Xi);
    ensureNotNull(this.dft3_0).link(xr, xi, Xr, Xi);
  };
  CDFTsr.prototype.evaluate = function () {
    var tmp$, tmp$_0, tmp$_1;
    var T1r;
    var T1i;
    var T3r;
    var T3i;
    var Rr;
    var Ri;
    var Sr;
    var Si;
    var Wr;
    var Wi;
    ensureNotNull(this.dft1_0).evaluate();
    ensureNotNull(this.dft2_0).evaluate();
    ensureNotNull(this.dft3_0).evaluate();
    var kp = this.outXoffset_0;
    var kpN4 = kp + this.Ndiv4_0 | 0;
    var kpN2 = kpN4 + this.Ndiv4_0 | 0;
    var kp3N4 = kpN2 + this.Ndiv4_0 | 0;
    Rr = this.outXr_0[kpN2] + this.outXr_0[kp3N4];
    Ri = this.outXi_0[kpN2] + this.outXi_0[kp3N4];
    Sr = this.outXi_0[kp3N4] - this.outXi_0[kpN2];
    Si = this.outXr_0[kpN2] - this.outXr_0[kp3N4];
    this.outXr_0[kpN2] = this.outXr_0[kp] - Rr;
    this.outXi_0[kpN2] = this.outXi_0[kp] - Ri;
    this.outXr_0[kp3N4] = this.outXr_0[kpN4] + Sr;
    this.outXi_0[kp3N4] = this.outXi_0[kpN4] + Si;
    this.outXr_0[kp] = this.outXr_0[kp] + Rr;
    this.outXi_0[kp] = this.outXi_0[kp] + Ri;
    this.outXr_0[kpN4] = this.outXr_0[kpN4] - Sr;
    this.outXi_0[kpN4] = this.outXi_0[kpN4] - Si;
    var fk;
    tmp$ = this.Ndiv8_0 - 1 | 0;
    for (var k = 1; k <= tmp$; k++) {
      fk = Kotlin.imul(this.f_0, k);
      kp = k + this.outXoffset_0 | 0;
      kpN4 = kp + this.Ndiv4_0 | 0;
      kpN2 = kpN4 + this.Ndiv4_0 | 0;
      kp3N4 = kpN2 + this.Ndiv4_0 | 0;
      Wr = ensureNotNull(this.c_0)[fk];
      Wi = ensureNotNull(this.s_0)[fk];
      T1r = Wr * this.outXr_0[kpN2] - Wi * this.outXi_0[kpN2];
      T1i = Wr * this.outXi_0[kpN2] + Wi * this.outXr_0[kpN2];
      Wr = ensureNotNull(this.c3_0)[fk];
      Wi = ensureNotNull(this.s3_0)[fk];
      T3r = Wr * this.outXr_0[kp3N4] - Wi * this.outXi_0[kp3N4];
      T3i = Wr * this.outXi_0[kp3N4] + Wi * this.outXr_0[kp3N4];
      Rr = T1r + T3r;
      Ri = T1i + T3i;
      Sr = T3i - T1i;
      Si = T1r - T3r;
      this.outXr_0[kpN2] = this.outXr_0[kp] - Rr;
      this.outXi_0[kpN2] = this.outXi_0[kp] - Ri;
      this.outXr_0[kp3N4] = this.outXr_0[kpN4] + Sr;
      this.outXi_0[kp3N4] = this.outXi_0[kpN4] + Si;
      this.outXr_0[kp] = this.outXr_0[kp] + Rr;
      this.outXi_0[kp] = this.outXi_0[kp] + Ri;
      this.outXr_0[kpN4] = this.outXr_0[kpN4] - Sr;
      this.outXi_0[kpN4] = this.outXi_0[kpN4] - Si;
    }
    kp = this.Ndiv8_0 + this.outXoffset_0 | 0;
    kpN4 = kp + this.Ndiv4_0 | 0;
    kpN2 = kpN4 + this.Ndiv4_0 | 0;
    kp3N4 = kpN2 + this.Ndiv4_0 | 0;
    T1r = CDFTsr$Companion_getInstance().SQRT2BY2_0 * (this.outXr_0[kpN2] + this.outXi_0[kpN2]);
    T1i = CDFTsr$Companion_getInstance().SQRT2BY2_0 * (this.outXi_0[kpN2] - this.outXr_0[kpN2]);
    T3r = CDFTsr$Companion_getInstance().SQRT2BY2_0 * (this.outXi_0[kp3N4] - this.outXr_0[kp3N4]);
    T3i = -CDFTsr$Companion_getInstance().SQRT2BY2_0 * (this.outXi_0[kp3N4] + this.outXr_0[kp3N4]);
    Rr = T1r + T3r;
    Ri = T1i + T3i;
    Sr = T3i - T1i;
    Si = T1r - T3r;
    this.outXr_0[kpN2] = this.outXr_0[kp] - Rr;
    this.outXi_0[kpN2] = this.outXi_0[kp] - Ri;
    this.outXr_0[kp3N4] = this.outXr_0[kpN4] + Sr;
    this.outXi_0[kp3N4] = this.outXi_0[kpN4] + Si;
    this.outXr_0[kp] = this.outXr_0[kp] + Rr;
    this.outXi_0[kp] = this.outXi_0[kp] + Ri;
    this.outXr_0[kpN4] = this.outXr_0[kpN4] - Sr;
    this.outXi_0[kpN4] = this.outXi_0[kpN4] - Si;
    tmp$_0 = this.Ndiv8_0 + 1 | 0;
    tmp$_1 = this.Ndiv4_0 - 1 | 0;
    for (var k_0 = tmp$_0; k_0 <= tmp$_1; k_0++) {
      fk = this.reflect_0 - Kotlin.imul(this.f_0, k_0) | 0;
      kp = k_0 + this.outXoffset_0 | 0;
      kpN4 = kp + this.Ndiv4_0 | 0;
      kpN2 = kpN4 + this.Ndiv4_0 | 0;
      kp3N4 = kpN2 + this.Ndiv4_0 | 0;
      Wr = -ensureNotNull(this.s_0)[fk];
      Wi = -ensureNotNull(this.c_0)[fk];
      T1r = Wr * this.outXr_0[kpN2] - Wi * this.outXi_0[kpN2];
      T1i = Wr * this.outXi_0[kpN2] + Wi * this.outXr_0[kpN2];
      Wr = ensureNotNull(this.s3_0)[fk];
      Wi = ensureNotNull(this.c3_0)[fk];
      T3r = Wr * this.outXr_0[kp3N4] - Wi * this.outXi_0[kp3N4];
      T3i = Wr * this.outXi_0[kp3N4] + Wi * this.outXr_0[kp3N4];
      Rr = T1r + T3r;
      Ri = T1i + T3i;
      Sr = T3i - T1i;
      Si = T1r - T3r;
      this.outXr_0[kpN2] = this.outXr_0[kp] - Rr;
      this.outXi_0[kpN2] = this.outXi_0[kp] - Ri;
      this.outXr_0[kp3N4] = this.outXr_0[kpN4] + Sr;
      this.outXi_0[kp3N4] = this.outXi_0[kpN4] + Si;
      this.outXr_0[kp] = this.outXr_0[kp] + Rr;
      this.outXi_0[kp] = this.outXi_0[kp] + Ri;
      this.outXr_0[kpN4] = this.outXr_0[kpN4] - Sr;
      this.outXi_0[kpN4] = this.outXi_0[kpN4] - Si;
    }
  };
  function CDFTsr$Companion() {
    CDFTsr$Companion_instance = this;
    this.SQRT2BY2_0 = Math_0.sqrt(2.0) / 2.0;
  }
  CDFTsr$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var CDFTsr$Companion_instance = null;
  function CDFTsr$Companion_getInstance() {
    if (CDFTsr$Companion_instance === null) {
      new CDFTsr$Companion();
    }
    return CDFTsr$Companion_instance;
  }
  CDFTsr.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CDFTsr',
    interfaces: []
  };
  function CDFTsr_init(m, c, c3, s, s3, $this) {
    $this = $this || Object.create(CDFTsr.prototype);
    CDFTsr.call($this);
    $this.m_0 = m;
    $this.N_0 = 1 << m;
    $this.Ndiv8_0 = $this.N_0 / 8 | 0;
    $this.Ndiv4_0 = $this.N_0 / 4 | 0;
    $this.xoffset_0 = 0;
    $this.xstride_0 = 1;
    $this.outXoffset_0 = 0;
    $this.c_0 = c;
    $this.c3_0 = c3;
    $this.s_0 = s;
    $this.s3_0 = s3;
    $this.f_0 = 1;
    $this.reflect_0 = 2 * c.length | 0;
    if (m > 6) {
      $this.dft1_0 = CDFTsr_init_1($this, 0, 2, 0, m - 1 | 0);
      $this.dft2_0 = CDFTsr_init_1($this, 1, 4, $this.N_0 / 2 | 0, m - 2 | 0);
      $this.dft3_0 = CDFTsr_init_1($this, 3, 4, (3 * $this.N_0 | 0) / 4 | 0, m - 2 | 0);
    }
     else if (m === 6) {
      $this.dft1_0 = CDFTsr_init_1($this, 0, 2, 0, 5);
      $this.dft2_0 = new CDFTsr16(1, 4, $this.N_0 / 2 | 0);
      $this.dft3_0 = new CDFTsr16(3, 4, (3 * $this.N_0 | 0) / 4 | 0);
    }
     else if (m === 5) {
      $this.dft1_0 = new CDFTsr16(0, 2, 0);
      $this.dft2_0 = new CDFTsr8(1, 4, $this.N_0 / 2 | 0);
      $this.dft3_0 = new CDFTsr8(3, 4, (3 * $this.N_0 | 0) / 4 | 0);
    }
    return $this;
  }
  function CDFTsr_init_0($this) {
    $this = $this || Object.create(CDFTsr.prototype);
    CDFTsr.call($this);
    $this.dft1_0 = null;
    $this.dft2_0 = null;
    $this.dft3_0 = null;
    return $this;
  }
  function CDFTsr_init_1(parent, dataOffset, dataStride, transformOffset, m, $this) {
    $this = $this || Object.create(CDFTsr.prototype);
    CDFTsr.call($this);
    $this.c_0 = parent.c_0;
    $this.c3_0 = parent.c3_0;
    $this.s_0 = parent.s_0;
    $this.s3_0 = parent.s3_0;
    $this.m_0 = m;
    $this.N_0 = 1 << m;
    $this.Ndiv8_0 = $this.N_0 / 8 | 0;
    $this.Ndiv4_0 = $this.N_0 / 4 | 0;
    $this.xoffset_0 = dataOffset;
    $this.xstride_0 = dataStride;
    $this.outXoffset_0 = transformOffset;
    $this.f_0 = ensureNotNull($this.c_0).length / $this.Ndiv8_0 | 0;
    $this.reflect_0 = 2 * ensureNotNull($this.c_0).length | 0;
    if (m > 6) {
      $this.dft1_0 = CDFTsr_init_1($this, dataOffset, dataStride * 2 | 0, transformOffset, m - 1 | 0);
      $this.dft2_0 = CDFTsr_init_1($this, dataOffset + dataStride | 0, dataStride * 4 | 0, transformOffset + ($this.N_0 / 2 | 0) | 0, m - 2 | 0);
      $this.dft3_0 = CDFTsr_init_1($this, dataOffset + (3 * dataStride | 0) | 0, dataStride * 4 | 0, transformOffset + ((3 * $this.N_0 | 0) / 4 | 0) | 0, m - 2 | 0);
    }
     else if (m === 6) {
      $this.dft1_0 = CDFTsr_init_1($this, dataOffset, dataStride * 2 | 0, transformOffset, 5);
      $this.dft2_0 = new CDFTsr16(dataOffset + dataStride | 0, dataStride * 4 | 0, transformOffset + ($this.N_0 / 2 | 0) | 0);
      $this.dft3_0 = new CDFTsr16(dataOffset + (3 * dataStride | 0) | 0, dataStride * 4 | 0, transformOffset + ((3 * $this.N_0 | 0) / 4 | 0) | 0);
    }
     else if (m === 5) {
      $this.dft1_0 = new CDFTsr16(dataOffset, dataStride * 2 | 0, transformOffset);
      $this.dft2_0 = new CDFTsr8(dataOffset + dataStride | 0, dataStride * 4 | 0, transformOffset + ($this.N_0 / 2 | 0) | 0);
      $this.dft3_0 = new CDFTsr8(dataOffset + (3 * dataStride | 0) | 0, dataStride * 4 | 0, transformOffset + ((3 * $this.N_0 | 0) / 4 | 0) | 0);
    }
    return $this;
  }
  function CDFTsr16(dataOffset, dataStride, transformOffset) {
    CDFTsr16$Companion_getInstance();
    CDFTsr_init_0(this);
    this.n0_0 = 0;
    this.n1_0 = 0;
    this.n2_0 = 0;
    this.n3_0 = 0;
    this.n4_0 = 0;
    this.n5_0 = 0;
    this.n6_0 = 0;
    this.n7_0 = 0;
    this.n8_0 = 0;
    this.n9_0 = 0;
    this.n10_0 = 0;
    this.n11_0 = 0;
    this.n12_0 = 0;
    this.n13_0 = 0;
    this.n14_0 = 0;
    this.n15_0 = 0;
    this.m0_0 = 0;
    this.m1_0 = 0;
    this.m2_0 = 0;
    this.m3_0 = 0;
    this.m4_0 = 0;
    this.m5_0 = 0;
    this.m6_0 = 0;
    this.m7_0 = 0;
    this.m8_0 = 0;
    this.m9_0 = 0;
    this.m10_0 = 0;
    this.m11_0 = 0;
    this.m12_0 = 0;
    this.m13_0 = 0;
    this.m14_0 = 0;
    this.m15_0 = 0;
    this.m_0 = 4;
    this.N_0 = 16;
    this.xoffset_0 = dataOffset;
    this.xstride_0 = dataStride;
    this.outXoffset_0 = transformOffset;
    this.n0_0 = this.xoffset_0;
    this.n1_0 = this.n0_0 + this.xstride_0 | 0;
    this.n2_0 = this.n1_0 + this.xstride_0 | 0;
    this.n3_0 = this.n2_0 + this.xstride_0 | 0;
    this.n4_0 = this.n3_0 + this.xstride_0 | 0;
    this.n5_0 = this.n4_0 + this.xstride_0 | 0;
    this.n6_0 = this.n5_0 + this.xstride_0 | 0;
    this.n7_0 = this.n6_0 + this.xstride_0 | 0;
    this.n8_0 = this.n7_0 + this.xstride_0 | 0;
    this.n9_0 = this.n8_0 + this.xstride_0 | 0;
    this.n10_0 = this.n9_0 + this.xstride_0 | 0;
    this.n11_0 = this.n10_0 + this.xstride_0 | 0;
    this.n12_0 = this.n11_0 + this.xstride_0 | 0;
    this.n13_0 = this.n12_0 + this.xstride_0 | 0;
    this.n14_0 = this.n13_0 + this.xstride_0 | 0;
    this.n15_0 = this.n14_0 + this.xstride_0 | 0;
    this.m0_0 = this.outXoffset_0;
    this.m1_0 = this.m0_0 + 1 | 0;
    this.m2_0 = this.m1_0 + 1 | 0;
    this.m3_0 = this.m2_0 + 1 | 0;
    this.m4_0 = this.m3_0 + 1 | 0;
    this.m5_0 = this.m4_0 + 1 | 0;
    this.m6_0 = this.m5_0 + 1 | 0;
    this.m7_0 = this.m6_0 + 1 | 0;
    this.m8_0 = this.m7_0 + 1 | 0;
    this.m9_0 = this.m8_0 + 1 | 0;
    this.m10_0 = this.m9_0 + 1 | 0;
    this.m11_0 = this.m10_0 + 1 | 0;
    this.m12_0 = this.m11_0 + 1 | 0;
    this.m13_0 = this.m12_0 + 1 | 0;
    this.m14_0 = this.m13_0 + 1 | 0;
    this.m15_0 = this.m14_0 + 1 | 0;
  }
  CDFTsr16.prototype.link = function (xr, xi, Xr, Xi) {
    this.xr_0 = xr;
    this.xi_0 = xi;
    this.outXr_0 = Xr;
    this.outXi_0 = Xi;
  };
  CDFTsr16.prototype.evaluate = function () {
    var T1r;
    var T1i;
    var T3r;
    var T3i;
    var Rr;
    var Ri;
    var Sr;
    var Si;
    this.outXr_0[this.m0_0] = this.xr_0[this.n0_0] + this.xr_0[this.n8_0];
    this.outXi_0[this.m0_0] = this.xi_0[this.n0_0] + this.xi_0[this.n8_0];
    this.outXr_0[this.m1_0] = this.xr_0[this.n0_0] - this.xr_0[this.n8_0];
    this.outXi_0[this.m1_0] = this.xi_0[this.n0_0] - this.xi_0[this.n8_0];
    Rr = this.xr_0[this.n4_0] + this.xr_0[this.n12_0];
    Ri = this.xi_0[this.n4_0] + this.xi_0[this.n12_0];
    Sr = this.xi_0[this.n12_0] - this.xi_0[this.n4_0];
    Si = this.xr_0[this.n4_0] - this.xr_0[this.n12_0];
    this.outXr_0[this.m2_0] = this.outXr_0[this.m0_0] - Rr;
    this.outXi_0[this.m2_0] = this.outXi_0[this.m0_0] - Ri;
    this.outXr_0[this.m3_0] = this.outXr_0[this.m1_0] + Sr;
    this.outXi_0[this.m3_0] = this.outXi_0[this.m1_0] + Si;
    this.outXr_0[this.m0_0] = this.outXr_0[this.m0_0] + Rr;
    this.outXi_0[this.m0_0] = this.outXi_0[this.m0_0] + Ri;
    this.outXr_0[this.m1_0] = this.outXr_0[this.m1_0] - Sr;
    this.outXi_0[this.m1_0] = this.outXi_0[this.m1_0] - Si;
    this.outXr_0[this.m4_0] = this.xr_0[this.n2_0] + this.xr_0[this.n10_0];
    this.outXi_0[this.m4_0] = this.xi_0[this.n2_0] + this.xi_0[this.n10_0];
    this.outXr_0[this.m5_0] = this.xr_0[this.n2_0] - this.xr_0[this.n10_0];
    this.outXi_0[this.m5_0] = this.xi_0[this.n2_0] - this.xi_0[this.n10_0];
    this.outXr_0[this.m6_0] = this.xr_0[this.n6_0] + this.xr_0[this.n14_0];
    this.outXi_0[this.m6_0] = this.xi_0[this.n6_0] + this.xi_0[this.n14_0];
    this.outXr_0[this.m7_0] = this.xr_0[this.n6_0] - this.xr_0[this.n14_0];
    this.outXi_0[this.m7_0] = this.xi_0[this.n6_0] - this.xi_0[this.n14_0];
    Rr = this.outXr_0[this.m4_0] + this.outXr_0[this.m6_0];
    Ri = this.outXi_0[this.m4_0] + this.outXi_0[this.m6_0];
    Sr = this.outXi_0[this.m6_0] - this.outXi_0[this.m4_0];
    Si = this.outXr_0[this.m4_0] - this.outXr_0[this.m6_0];
    this.outXr_0[this.m4_0] = this.outXr_0[this.m0_0] - Rr;
    this.outXi_0[this.m4_0] = this.outXi_0[this.m0_0] - Ri;
    this.outXr_0[this.m6_0] = this.outXr_0[this.m2_0] + Sr;
    this.outXi_0[this.m6_0] = this.outXi_0[this.m2_0] + Si;
    this.outXr_0[this.m0_0] = this.outXr_0[this.m0_0] + Rr;
    this.outXi_0[this.m0_0] = this.outXi_0[this.m0_0] + Ri;
    this.outXr_0[this.m2_0] = this.outXr_0[this.m2_0] - Sr;
    this.outXi_0[this.m2_0] = this.outXi_0[this.m2_0] - Si;
    T1r = CDFTsr16$Companion_getInstance().SQRT2BY2 * (this.outXr_0[this.m5_0] + this.outXi_0[this.m5_0]);
    T1i = CDFTsr16$Companion_getInstance().SQRT2BY2 * (this.outXi_0[this.m5_0] - this.outXr_0[this.m5_0]);
    T3r = CDFTsr16$Companion_getInstance().SQRT2BY2 * (this.outXi_0[this.m7_0] - this.outXr_0[this.m7_0]);
    T3i = -CDFTsr16$Companion_getInstance().SQRT2BY2 * (this.outXi_0[this.m7_0] + this.outXr_0[this.m7_0]);
    Rr = T1r + T3r;
    Ri = T1i + T3i;
    Sr = T3i - T1i;
    Si = T1r - T3r;
    this.outXr_0[this.m5_0] = this.outXr_0[this.m1_0] - Rr;
    this.outXi_0[this.m5_0] = this.outXi_0[this.m1_0] - Ri;
    this.outXr_0[this.m7_0] = this.outXr_0[this.m3_0] + Sr;
    this.outXi_0[this.m7_0] = this.outXi_0[this.m3_0] + Si;
    this.outXr_0[this.m1_0] = this.outXr_0[this.m1_0] + Rr;
    this.outXi_0[this.m1_0] = this.outXi_0[this.m1_0] + Ri;
    this.outXr_0[this.m3_0] = this.outXr_0[this.m3_0] - Sr;
    this.outXi_0[this.m3_0] = this.outXi_0[this.m3_0] - Si;
    this.outXr_0[this.m8_0] = this.xr_0[this.n1_0] + this.xr_0[this.n9_0];
    this.outXi_0[this.m8_0] = this.xi_0[this.n1_0] + this.xi_0[this.n9_0];
    this.outXr_0[this.m9_0] = this.xr_0[this.n1_0] - this.xr_0[this.n9_0];
    this.outXi_0[this.m9_0] = this.xi_0[this.n1_0] - this.xi_0[this.n9_0];
    Rr = this.xr_0[this.n5_0] + this.xr_0[this.n13_0];
    Ri = this.xi_0[this.n5_0] + this.xi_0[this.n13_0];
    Sr = this.xi_0[this.n13_0] - this.xi_0[this.n5_0];
    Si = this.xr_0[this.n5_0] - this.xr_0[this.n13_0];
    this.outXr_0[this.m10_0] = this.outXr_0[this.m8_0] - Rr;
    this.outXi_0[this.m10_0] = this.outXi_0[this.m8_0] - Ri;
    this.outXr_0[this.m11_0] = this.outXr_0[this.m9_0] + Sr;
    this.outXi_0[this.m11_0] = this.outXi_0[this.m9_0] + Si;
    this.outXr_0[this.m8_0] = this.outXr_0[this.m8_0] + Rr;
    this.outXi_0[this.m8_0] = this.outXi_0[this.m8_0] + Ri;
    this.outXr_0[this.m9_0] = this.outXr_0[this.m9_0] - Sr;
    this.outXi_0[this.m9_0] = this.outXi_0[this.m9_0] - Si;
    this.outXr_0[this.m12_0] = this.xr_0[this.n3_0] + this.xr_0[this.n11_0];
    this.outXi_0[this.m12_0] = this.xi_0[this.n3_0] + this.xi_0[this.n11_0];
    this.outXr_0[this.m13_0] = this.xr_0[this.n3_0] - this.xr_0[this.n11_0];
    this.outXi_0[this.m13_0] = this.xi_0[this.n3_0] - this.xi_0[this.n11_0];
    Rr = this.xr_0[this.n7_0] + this.xr_0[this.n15_0];
    Ri = this.xi_0[this.n7_0] + this.xi_0[this.n15_0];
    Sr = this.xi_0[this.n15_0] - this.xi_0[this.n7_0];
    Si = this.xr_0[this.n7_0] - this.xr_0[this.n15_0];
    this.outXr_0[this.m14_0] = this.outXr_0[this.m12_0] - Rr;
    this.outXi_0[this.m14_0] = this.outXi_0[this.m12_0] - Ri;
    this.outXr_0[this.m15_0] = this.outXr_0[this.m13_0] + Sr;
    this.outXi_0[this.m15_0] = this.outXi_0[this.m13_0] + Si;
    this.outXr_0[this.m12_0] = this.outXr_0[this.m12_0] + Rr;
    this.outXi_0[this.m12_0] = this.outXi_0[this.m12_0] + Ri;
    this.outXr_0[this.m13_0] = this.outXr_0[this.m13_0] - Sr;
    this.outXi_0[this.m13_0] = this.outXi_0[this.m13_0] - Si;
    Rr = this.outXr_0[this.m8_0] + this.outXr_0[this.m12_0];
    Ri = this.outXi_0[this.m8_0] + this.outXi_0[this.m12_0];
    Sr = this.outXi_0[this.m12_0] - this.outXi_0[this.m8_0];
    Si = this.outXr_0[this.m8_0] - this.outXr_0[this.m12_0];
    this.outXr_0[this.m8_0] = this.outXr_0[this.m0_0] - Rr;
    this.outXi_0[this.m8_0] = this.outXi_0[this.m0_0] - Ri;
    this.outXr_0[this.m12_0] = this.outXr_0[this.m4_0] + Sr;
    this.outXi_0[this.m12_0] = this.outXi_0[this.m4_0] + Si;
    this.outXr_0[this.m0_0] = this.outXr_0[this.m0_0] + Rr;
    this.outXi_0[this.m0_0] = this.outXi_0[this.m0_0] + Ri;
    this.outXr_0[this.m4_0] = this.outXr_0[this.m4_0] - Sr;
    this.outXi_0[this.m4_0] = this.outXi_0[this.m4_0] - Si;
    T1r = CDFTsr16$Companion_getInstance().C_1_16 * this.outXr_0[this.m9_0] + CDFTsr16$Companion_getInstance().C_3_16 * this.outXi_0[this.m9_0];
    T1i = CDFTsr16$Companion_getInstance().C_1_16 * this.outXi_0[this.m9_0] - CDFTsr16$Companion_getInstance().C_3_16 * this.outXr_0[this.m9_0];
    T3r = CDFTsr16$Companion_getInstance().C_3_16 * this.outXr_0[this.m13_0] + CDFTsr16$Companion_getInstance().C_1_16 * this.outXi_0[this.m13_0];
    T3i = CDFTsr16$Companion_getInstance().C_3_16 * this.outXi_0[this.m13_0] - CDFTsr16$Companion_getInstance().C_1_16 * this.outXr_0[this.m13_0];
    Rr = T1r + T3r;
    Ri = T1i + T3i;
    Sr = T3i - T1i;
    Si = T1r - T3r;
    this.outXr_0[this.m9_0] = this.outXr_0[this.m1_0] - Rr;
    this.outXi_0[this.m9_0] = this.outXi_0[this.m1_0] - Ri;
    this.outXr_0[this.m13_0] = this.outXr_0[this.m5_0] + Sr;
    this.outXi_0[this.m13_0] = this.outXi_0[this.m5_0] + Si;
    this.outXr_0[this.m1_0] = this.outXr_0[this.m1_0] + Rr;
    this.outXi_0[this.m1_0] = this.outXi_0[this.m1_0] + Ri;
    this.outXr_0[this.m5_0] = this.outXr_0[this.m5_0] - Sr;
    this.outXi_0[this.m5_0] = this.outXi_0[this.m5_0] - Si;
    T1r = CDFTsr16$Companion_getInstance().SQRT2BY2 * (this.outXr_0[this.m10_0] + this.outXi_0[this.m10_0]);
    T1i = CDFTsr16$Companion_getInstance().SQRT2BY2 * (this.outXi_0[this.m10_0] - this.outXr_0[this.m10_0]);
    T3r = CDFTsr16$Companion_getInstance().SQRT2BY2 * (this.outXi_0[this.m14_0] - this.outXr_0[this.m14_0]);
    T3i = -CDFTsr16$Companion_getInstance().SQRT2BY2 * (this.outXi_0[this.m14_0] + this.outXr_0[this.m14_0]);
    Rr = T1r + T3r;
    Ri = T1i + T3i;
    Sr = T3i - T1i;
    Si = T1r - T3r;
    this.outXr_0[this.m10_0] = this.outXr_0[this.m2_0] - Rr;
    this.outXi_0[this.m10_0] = this.outXi_0[this.m2_0] - Ri;
    this.outXr_0[this.m14_0] = this.outXr_0[this.m6_0] + Sr;
    this.outXi_0[this.m14_0] = this.outXi_0[this.m6_0] + Si;
    this.outXr_0[this.m2_0] = this.outXr_0[this.m2_0] + Rr;
    this.outXi_0[this.m2_0] = this.outXi_0[this.m2_0] + Ri;
    this.outXr_0[this.m6_0] = this.outXr_0[this.m6_0] - Sr;
    this.outXi_0[this.m6_0] = this.outXi_0[this.m6_0] - Si;
    T1r = CDFTsr16$Companion_getInstance().C_3_16 * this.outXr_0[this.m11_0] + CDFTsr16$Companion_getInstance().C_1_16 * this.outXi_0[this.m11_0];
    T1i = CDFTsr16$Companion_getInstance().C_3_16 * this.outXi_0[this.m11_0] - CDFTsr16$Companion_getInstance().C_1_16 * this.outXr_0[this.m11_0];
    T3r = -CDFTsr16$Companion_getInstance().C_1_16 * this.outXr_0[this.m15_0] - CDFTsr16$Companion_getInstance().C_3_16 * this.outXi_0[this.m15_0];
    T3i = -CDFTsr16$Companion_getInstance().C_1_16 * this.outXi_0[this.m15_0] + CDFTsr16$Companion_getInstance().C_3_16 * this.outXr_0[this.m15_0];
    Rr = T1r + T3r;
    Ri = T1i + T3i;
    Sr = T3i - T1i;
    Si = T1r - T3r;
    this.outXr_0[this.m11_0] = this.outXr_0[this.m3_0] - Rr;
    this.outXi_0[this.m11_0] = this.outXi_0[this.m3_0] - Ri;
    this.outXr_0[this.m15_0] = this.outXr_0[this.m7_0] + Sr;
    this.outXi_0[this.m15_0] = this.outXi_0[this.m7_0] + Si;
    this.outXr_0[this.m3_0] = this.outXr_0[this.m3_0] + Rr;
    this.outXi_0[this.m3_0] = this.outXi_0[this.m3_0] + Ri;
    this.outXr_0[this.m7_0] = this.outXr_0[this.m7_0] - Sr;
    this.outXi_0[this.m7_0] = this.outXi_0[this.m7_0] - Si;
  };
  function CDFTsr16$Companion() {
    CDFTsr16$Companion_instance = this;
    var x = 2.0 * math.PI / 16;
    this.C_1_16 = Math_0.cos(x);
    var x_0 = 2.0 * math.PI * 3.0 / 16;
    this.C_3_16 = Math_0.cos(x_0);
    this.SQRT2BY2 = Math_0.sqrt(2.0) / 2.0;
  }
  CDFTsr16$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var CDFTsr16$Companion_instance = null;
  function CDFTsr16$Companion_getInstance() {
    if (CDFTsr16$Companion_instance === null) {
      new CDFTsr16$Companion();
    }
    return CDFTsr16$Companion_instance;
  }
  CDFTsr16.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CDFTsr16',
    interfaces: [CDFTsr]
  };
  function CDFTsr8(n0, xstride, m0) {
    CDFTsr8$Companion_getInstance();
    CDFTsr_init_0(this);
    this.n0_0 = n0;
    this.m0_0 = m0;
    this.n1_0 = 0;
    this.n2_0 = 0;
    this.n3_0 = 0;
    this.n4_0 = 0;
    this.n5_0 = 0;
    this.n6_0 = 0;
    this.n7_0 = 0;
    this.m1_0 = 0;
    this.m2_0 = 0;
    this.m3_0 = 0;
    this.m4_0 = 0;
    this.m5_0 = 0;
    this.m6_0 = 0;
    this.m7_0 = 0;
    this.m_0 = 3;
    this.N_0 = 8;
    this.xoffset_0 = this.n0_0;
    this.xstride_0 = xstride;
    this.outXoffset_0 = this.m0_0;
    this.n1_0 = this.n0_0 + xstride | 0;
    this.n2_0 = this.n1_0 + xstride | 0;
    this.n3_0 = this.n2_0 + xstride | 0;
    this.n4_0 = this.n3_0 + xstride | 0;
    this.n5_0 = this.n4_0 + xstride | 0;
    this.n6_0 = this.n5_0 + xstride | 0;
    this.n7_0 = this.n6_0 + xstride | 0;
    this.m1_0 = this.m0_0 + 1 | 0;
    this.m2_0 = this.m1_0 + 1 | 0;
    this.m3_0 = this.m2_0 + 1 | 0;
    this.m4_0 = this.m3_0 + 1 | 0;
    this.m5_0 = this.m4_0 + 1 | 0;
    this.m6_0 = this.m5_0 + 1 | 0;
    this.m7_0 = this.m6_0 + 1 | 0;
  }
  CDFTsr8.prototype.link = function (xr, xi, Xr, Xi) {
    this.xr_0 = xr;
    this.xi_0 = xi;
    this.outXr_0 = Xr;
    this.outXi_0 = Xi;
  };
  CDFTsr8.prototype.evaluate = function () {
    var T1r;
    var T1i;
    var T3r;
    var T3i;
    var Rr;
    var Ri;
    var Sr;
    var Si;
    this.outXr_0[this.m0_0] = this.xr_0[this.n0_0] + this.xr_0[this.n4_0];
    this.outXi_0[this.m0_0] = this.xi_0[this.n0_0] + this.xi_0[this.n4_0];
    this.outXr_0[this.m1_0] = this.xr_0[this.n0_0] - this.xr_0[this.n4_0];
    this.outXi_0[this.m1_0] = this.xi_0[this.n0_0] - this.xi_0[this.n4_0];
    Rr = this.xr_0[this.n2_0] + this.xr_0[this.n6_0];
    Ri = this.xi_0[this.n2_0] + this.xi_0[this.n6_0];
    Sr = this.xi_0[this.n6_0] - this.xi_0[this.n2_0];
    Si = this.xr_0[this.n2_0] - this.xr_0[this.n6_0];
    this.outXr_0[this.m2_0] = this.outXr_0[this.m0_0] - Rr;
    this.outXi_0[this.m2_0] = this.outXi_0[this.m0_0] - Ri;
    this.outXr_0[this.m3_0] = this.outXr_0[this.m1_0] + Sr;
    this.outXi_0[this.m3_0] = this.outXi_0[this.m1_0] + Si;
    this.outXr_0[this.m0_0] = this.outXr_0[this.m0_0] + Rr;
    this.outXi_0[this.m0_0] = this.outXi_0[this.m0_0] + Ri;
    this.outXr_0[this.m1_0] = this.outXr_0[this.m1_0] - Sr;
    this.outXi_0[this.m1_0] = this.outXi_0[this.m1_0] - Si;
    this.outXr_0[this.m4_0] = this.xr_0[this.n1_0] + this.xr_0[this.n5_0];
    this.outXi_0[this.m4_0] = this.xi_0[this.n1_0] + this.xi_0[this.n5_0];
    this.outXr_0[this.m5_0] = this.xr_0[this.n1_0] - this.xr_0[this.n5_0];
    this.outXi_0[this.m5_0] = this.xi_0[this.n1_0] - this.xi_0[this.n5_0];
    this.outXr_0[this.m6_0] = this.xr_0[this.n3_0] + this.xr_0[this.n7_0];
    this.outXi_0[this.m6_0] = this.xi_0[this.n3_0] + this.xi_0[this.n7_0];
    this.outXr_0[this.m7_0] = this.xr_0[this.n3_0] - this.xr_0[this.n7_0];
    this.outXi_0[this.m7_0] = this.xi_0[this.n3_0] - this.xi_0[this.n7_0];
    Rr = this.outXr_0[this.m4_0] + this.outXr_0[this.m6_0];
    Ri = this.outXi_0[this.m4_0] + this.outXi_0[this.m6_0];
    Sr = this.outXi_0[this.m6_0] - this.outXi_0[this.m4_0];
    Si = this.outXr_0[this.m4_0] - this.outXr_0[this.m6_0];
    this.outXr_0[this.m4_0] = this.outXr_0[this.m0_0] - Rr;
    this.outXi_0[this.m4_0] = this.outXi_0[this.m0_0] - Ri;
    this.outXr_0[this.m6_0] = this.outXr_0[this.m2_0] + Sr;
    this.outXi_0[this.m6_0] = this.outXi_0[this.m2_0] + Si;
    this.outXr_0[this.m0_0] = this.outXr_0[this.m0_0] + Rr;
    this.outXi_0[this.m0_0] = this.outXi_0[this.m0_0] + Ri;
    this.outXr_0[this.m2_0] = this.outXr_0[this.m2_0] - Sr;
    this.outXi_0[this.m2_0] = this.outXi_0[this.m2_0] - Si;
    T1r = CDFTsr8$Companion_getInstance().SQRT2BY2 * (this.outXr_0[this.m5_0] + this.outXi_0[this.m5_0]);
    T1i = CDFTsr8$Companion_getInstance().SQRT2BY2 * (this.outXi_0[this.m5_0] - this.outXr_0[this.m5_0]);
    T3r = CDFTsr8$Companion_getInstance().SQRT2BY2 * (this.outXi_0[this.m7_0] - this.outXr_0[this.m7_0]);
    T3i = -CDFTsr8$Companion_getInstance().SQRT2BY2 * (this.outXi_0[this.m7_0] + this.outXr_0[this.m7_0]);
    Rr = T1r + T3r;
    Ri = T1i + T3i;
    Sr = T3i - T1i;
    Si = T1r - T3r;
    this.outXr_0[this.m5_0] = this.outXr_0[this.m1_0] - Rr;
    this.outXi_0[this.m5_0] = this.outXi_0[this.m1_0] - Ri;
    this.outXr_0[this.m7_0] = this.outXr_0[this.m3_0] + Sr;
    this.outXi_0[this.m7_0] = this.outXi_0[this.m3_0] + Si;
    this.outXr_0[this.m1_0] = this.outXr_0[this.m1_0] + Rr;
    this.outXi_0[this.m1_0] = this.outXi_0[this.m1_0] + Ri;
    this.outXr_0[this.m3_0] = this.outXr_0[this.m3_0] - Sr;
    this.outXi_0[this.m3_0] = this.outXi_0[this.m3_0] - Si;
  };
  function CDFTsr8$Companion() {
    CDFTsr8$Companion_instance = this;
    this.SQRT2BY2 = Math_0.sqrt(2.0) / 2.0;
  }
  CDFTsr8$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var CDFTsr8$Companion_instance = null;
  function CDFTsr8$Companion_getInstance() {
    if (CDFTsr8$Companion_instance === null) {
      new CDFTsr8$Companion();
    }
    return CDFTsr8$Companion_instance;
  }
  CDFTsr8.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CDFTsr8',
    interfaces: [CDFTsr]
  };
  function RDFT(log2N) {
    RDFT$Companion_getInstance();
    this.N_0 = 0;
    this.N2_0 = 0;
    this.N4_0 = 0;
    this.xr_0 = null;
    this.xi_0 = null;
    this.Xr_0 = null;
    this.Xi_0 = null;
    this.dft_0 = null;
    this.c_0 = null;
    this.s_0 = null;
    var tmp$;
    if (log2N < 4)
      throw IllegalArgumentException_init('DFT size must be >= 16');
    this.N_0 = 1 << log2N;
    this.N2_0 = this.N_0 / 2 | 0;
    this.N4_0 = this.N_0 / 4 | 0;
    this.xr_0 = new Float32Array(this.N2_0);
    this.xi_0 = new Float32Array(this.N2_0);
    this.Xr_0 = new Float32Array(this.N2_0);
    this.Xi_0 = new Float32Array(this.N2_0);
    this.s_0 = new Float32Array(this.N4_0);
    this.c_0 = new Float32Array(this.N4_0);
    tmp$ = this.N4_0 - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var tmp$_0 = this.s_0;
      var x = 2.0 * math.PI / this.N_0 * i;
      tmp$_0[i] = Math_0.sin(x);
      var tmp$_1 = this.c_0;
      var x_0 = 2.0 * math.PI / this.N_0 * i;
      tmp$_1[i] = Math_0.cos(x_0);
    }
    this.dft_0 = CDFT_init(log2N - 1 | 0);
  }
  RDFT.prototype.evaluate = function (x, X) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.N2_0 - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var j = i << 1;
      this.xr_0[i] = x[tmp$_0 = j, j = tmp$_0 + 1 | 0, tmp$_0];
      this.xi_0[i] = x[j];
    }
    this.dft_0.evaluateCDFT(this.xr_0, this.xi_0, this.Xr_0, this.Xi_0);
    X[0] = this.Xr_0[0] + this.Xi_0[0];
    X[this.N2_0] = this.Xr_0[0] - this.Xi_0[0];
    var N2pk = this.N2_0 + 1 | 0;
    var N2mk = this.N2_0 - 1 | 0;
    var Nmk = this.N_0 - 1 | 0;
    tmp$_1 = this.N4_0 - 1 | 0;
    for (var k = 1; k <= tmp$_1; k++) {
      var Xrk = this.Xr_0[k];
      var Xik = this.Xi_0[k];
      var XrN2mk = this.Xr_0[N2mk];
      var XiN2mk = this.Xi_0[N2mk];
      var Sr = (Xrk + XrN2mk) / 2;
      var Si = (Xik - XiN2mk) / 2;
      var Dr = (Xik + XiN2mk) / 2;
      var Di = (XrN2mk - Xrk) / 2;
      var tmp = this.c_0[k] * Dr + this.s_0[k] * Di;
      Di = this.c_0[k] * Di - this.s_0[k] * Dr;
      Dr = tmp;
      X[k] = Sr + Dr;
      X[Nmk] = Si + Di;
      X[N2mk] = Sr - Dr;
      X[N2pk] = Di - Si;
      N2pk = N2pk + 1 | 0;
      N2mk = N2mk - 1 | 0;
      Nmk = Nmk - 1 | 0;
    }
    X[this.N4_0] = this.Xr_0[this.N4_0];
    X[this.N2_0 + this.N4_0 | 0] = -this.Xi_0[this.N4_0];
  };
  RDFT.prototype.evaluateInverse = function (X, x) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    this.Xr_0[0] = X[0] + X[this.N2_0];
    this.Xi_0[0] = X[0] - X[this.N2_0];
    var N2pk = this.N2_0 + 1 | 0;
    var N2mk = this.N2_0 - 1 | 0;
    var Nmk = this.N_0 - 1 | 0;
    tmp$ = this.N4_0 - 1 | 0;
    for (var k = 1; k <= tmp$; k++) {
      var Xrk = X[k];
      var Xik = X[Nmk];
      var XrkpN2 = X[N2mk];
      var XikpN2 = -X[N2pk];
      var Dr = Xrk - XrkpN2;
      var Di = Xik - XikpN2;
      this.Xr_0[k] = Xrk + XrkpN2 - this.s_0[k] * Dr - this.c_0[k] * Di;
      this.Xi_0[k] = Xik + XikpN2 + this.c_0[k] * Dr - this.s_0[k] * Di;
      N2pk = N2pk + 1 | 0;
      N2mk = N2mk - 1 | 0;
      Nmk = Nmk - 1 | 0;
    }
    this.Xr_0[this.N4_0] = 2.0 * X[this.N4_0];
    this.Xi_0[this.N4_0] = -2.0 * X[this.N2_0 + this.N4_0 | 0];
    N2pk = this.N2_0 + this.N4_0 + 1 | 0;
    N2mk = this.N4_0 - 1 | 0;
    Nmk = this.N_0 - this.N4_0 - 1 | 0;
    var reflect = this.N4_0 - 1 | 0;
    tmp$_0 = this.N4_0 + 1 | 0;
    tmp$_1 = this.N2_0 - 1 | 0;
    for (var k_0 = tmp$_0; k_0 <= tmp$_1; k_0++) {
      var Xrk_0 = X[k_0];
      var Xik_0 = X[Nmk];
      var XrkpN2_0 = X[N2mk];
      var XikpN2_0 = -X[N2pk];
      var Dr_0 = Xrk_0 - XrkpN2_0;
      var Di_0 = Xik_0 - XikpN2_0;
      this.Xr_0[k_0] = Xrk_0 + XrkpN2_0 - this.s_0[reflect] * Dr_0 + this.c_0[reflect] * Di_0;
      this.Xi_0[k_0] = Xik_0 + XikpN2_0 - this.c_0[reflect] * Dr_0 - this.s_0[reflect] * Di_0;
      N2pk = N2pk + 1 | 0;
      N2mk = N2mk - 1 | 0;
      Nmk = Nmk - 1 | 0;
      reflect = reflect - 1 | 0;
    }
    this.dft_0.evaluateCDFT(this.Xr_0, this.Xi_0, this.xr_0, this.xi_0);
    x[0] = this.xr_0[0] / this.N_0;
    x[1] = this.xi_0[0] / this.N_0;
    var j = this.N2_0 - 1 | 0;
    tmp$_2 = this.N2_0 - 1 | 0;
    for (var k_1 = 1; k_1 <= tmp$_2; k_1++) {
      var i = k_1 << 1;
      x[tmp$_3 = i, i = tmp$_3 + 1 | 0, tmp$_3] = this.xr_0[j] / this.N_0;
      x[i] = this.xi_0[j] / this.N_0;
      j = j - 1 | 0;
    }
  };
  function RDFT$Companion() {
    RDFT$Companion_instance = this;
  }
  RDFT$Companion.prototype.dftProduct = function (kernel, transform, sign) {
    var tmp$;
    if (kernel.length !== transform.length)
      throw IllegalArgumentException_init('kernel and transform arrays must have the same size');
    var n = kernel.length;
    var half = n / 2 | 0;
    transform[0] = transform[0] * kernel[0];
    transform[half] = transform[half] * kernel[half];
    var tmp;
    tmp$ = half - 1 | 0;
    for (var i = 1; i <= tmp$; i++) {
      var im = n - i | 0;
      tmp = kernel[i] * transform[i] - sign * kernel[im] * transform[im];
      transform[im] = kernel[i] * transform[im] + sign * kernel[im] * transform[i];
      transform[i] = tmp;
    }
  };
  RDFT$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var RDFT$Companion_instance = null;
  function RDFT$Companion_getInstance() {
    if (RDFT$Companion_instance === null) {
      new RDFT$Companion();
    }
    return RDFT$Companion_instance;
  }
  RDFT.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RDFT',
    interfaces: []
  };
  function LagrangePolynomial(x, y) {
    LagrangePolynomial$Companion_getInstance();
    this.order_0 = 0;
    this.x_0 = null;
    this.y_0 = null;
    this.weights_0 = null;
    if (x.length !== y.length)
      throw IllegalArgumentException_init('Lengths of x and y arrays do not match');
    this.x_0 = x.slice();
    this.y_0 = y.slice();
    this.order_0 = x.length - 1 | 0;
    this.weights_0 = LagrangePolynomial$Companion_getInstance().BarycentricWeights(x);
  }
  LagrangePolynomial.prototype.order = function () {
    return this.order_0;
  };
  LagrangePolynomial.prototype.evaluateAt = function (xp) {
    var tmp$;
    var num = 0.0;
    var denom = 0.0;
    tmp$ = this.order_0;
    for (var j = 0; j <= tmp$; j++) {
      if (xp === this.x_0[j]) {
        num = this.y_0[j];
        denom = 1.0;
        break;
      }
      var term = this.weights_0[j] / (xp - this.x_0[j]);
      num += term * this.y_0[j];
      denom += term;
    }
    return num / denom;
  };
  LagrangePolynomial.prototype.ChebyshevNodes = function (a, b, n) {
    var tmp$;
    var t0 = (a + b) / 2.0;
    var t1 = (b - 1) / 2.0;
    var retval = new Float64Array(n);
    tmp$ = n - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var x = (((2 * i | 0) + 1 | 0) / (2 * n | 0) | 0) * math.PI;
      retval[i] = t0 + t1 * Math_0.cos(x);
    }
    return retval;
  };
  function LagrangePolynomial$Companion() {
    LagrangePolynomial$Companion_instance = this;
  }
  LagrangePolynomial$Companion.prototype.BarycentricWeights = function (z) {
    var tmp$, tmp$_0;
    var n = z.length;
    var retval = new Float64Array(n);
    tmp$ = n - 1 | 0;
    for (var j = 0; j <= tmp$; j++) {
      var w = 1.0;
      tmp$_0 = n - 1 | 0;
      for (var i = 0; i <= tmp$_0; i++) {
        if (i !== j)
          w *= z[j] - z[i];
      }
      retval[j] = 1.0 / w;
    }
    return retval;
  };
  LagrangePolynomial$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var LagrangePolynomial$Companion_instance = null;
  function LagrangePolynomial$Companion_getInstance() {
    if (LagrangePolynomial$Companion_instance === null) {
      new LagrangePolynomial$Companion();
    }
    return LagrangePolynomial$Companion_instance;
  }
  LagrangePolynomial.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LagrangePolynomial',
    interfaces: []
  };
  function Polynomial() {
    this.a = null;
    this._order = 0;
  }
  Polynomial.prototype.trim = function () {
    var i = this._order;
    var n = 0;
    while (this.a[i] === 0.0) {
      n = n + 1 | 0;
      i = i - 1 | 0;
    }
    if (n > 0) {
      var b = new Float64Array(this._order + 1 - n | 0);
      for (var j = 0; j !== b.length; ++j) {
        b[j] = this.a[j];
      }
      this.a = b;
      this._order = this._order - n | 0;
    }
  };
  Polynomial.prototype.order = function () {
    return this._order;
  };
  Polynomial.prototype.coefficients = function () {
    return this.a.slice();
  };
  Polynomial.prototype.plusReal = function (c) {
    var retval = Polynomial_init_1(this._order);
    retval.a = this.a.slice();
    retval.a[0] = retval.a[0] + c;
    return retval;
  };
  Polynomial.prototype.plusEqualsReal = function (c) {
    this.a[0] = this.a[0] + c;
  };
  Polynomial.prototype.plusPolynomial = function (B) {
    var tmp$, tmp$_0;
    var a = this._order;
    var b = B._order;
    var retval = Polynomial_init_1(Math_0.max(a, b));
    tmp$ = this._order;
    for (var i = 0; i <= tmp$; i++)
      retval.a[i] = this.a[i];
    tmp$_0 = B._order;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++)
      retval.a[i_0] = retval.a[i_0] + B.a[i_0];
    return retval;
  };
  Polynomial.prototype.plusEqualsPolynomial = function (B) {
    var tmp$, tmp$_0;
    var tmp$_1 = Float64Array;
    var a = this._order;
    var b = B._order;
    var A = new tmp$_1(Math_0.max(a, b));
    tmp$ = this._order;
    for (var i = 0; i <= tmp$; i++)
      A[i] = this.a[i];
    tmp$_0 = B._order;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++)
      A[i_0] = A[i_0] + B.a[i_0];
    this.a = A;
    this._order = A.length - 1 | 0;
  };
  Polynomial.prototype.minusReal = function (c) {
    return this.plusReal(-c);
  };
  Polynomial.prototype.minusEqualsReal = function (c) {
    this.plusEqualsReal(-c);
  };
  Polynomial.prototype.minusPolynomial = function (B) {
    var tmp$, tmp$_0;
    var a = this._order;
    var b = B._order;
    var retval = Polynomial_init_1(Math_0.max(a, b));
    tmp$ = this._order;
    for (var i = 0; i <= tmp$; i++)
      retval.a[i] = this.a[i];
    tmp$_0 = B._order;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++)
      retval.a[i_0] = retval.a[i_0] - B.a[i_0];
    return retval;
  };
  Polynomial.prototype.minusEqualsPolynomial = function (B) {
    var tmp$, tmp$_0;
    var tmp$_1 = Float64Array;
    var a = this._order;
    var b = B._order;
    var A = new tmp$_1(Math_0.max(a, b));
    tmp$ = this._order;
    for (var i = 0; i <= tmp$; i++)
      A[i] = this.a[i];
    tmp$_0 = B._order;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++)
      A[i_0] = A[i_0] - B.a[i_0];
    this.a = A;
    this._order = A.length - 1 | 0;
  };
  Polynomial.prototype.timesReal = function (c) {
    var tmp$;
    var retval = Polynomial_init_1(this._order);
    tmp$ = this._order;
    for (var i = 0; i <= tmp$; i++)
      retval.a[i] = c * this.a[i];
    return retval;
  };
  Polynomial.prototype.timesEqualsReal = function (c) {
    var tmp$;
    tmp$ = this._order;
    for (var i = 0; i <= tmp$; i++)
      this.a[i] = this.a[i] * c;
  };
  Polynomial.prototype.timesPolynomial = function (B) {
    var tmp$, tmp$_0;
    var b = B.a;
    var prod = new Float64Array(this._order + B._order + 1 | 0);
    tmp$ = B._order;
    for (var i = 0; i <= tmp$; i++) {
      tmp$_0 = this._order;
      for (var j = 0; j <= tmp$_0; j++) {
        prod[i + j | 0] = prod[i + j | 0] + b[i] * this.a[j];
      }
    }
    return Polynomial_init(prod);
  };
  Polynomial.prototype.timesEqualsPolynomial = function (B) {
    var tmp$, tmp$_0;
    var b = B.a;
    var prod = new Float64Array(this._order + B._order + 1 | 0);
    tmp$ = B._order;
    for (var i = 0; i <= tmp$; i++) {
      tmp$_0 = this._order;
      for (var j = 0; j <= tmp$_0; j++) {
        prod[i + j | 0] = prod[i + j | 0] + b[i] * this.a[j];
      }
    }
    this.a = prod;
    this._order = this._order + B._order | 0;
  };
  Polynomial.prototype.overReal = function (c) {
    var tmp$;
    var tmp = new Float64Array(this._order + 1 | 0);
    tmp$ = this._order + 1 - 1 | 0;
    for (var i = 0; i <= tmp$; i++)
      tmp[i] = this.a[i] / c;
    return Polynomial_init(tmp);
  };
  Polynomial.prototype.overEqualsReal = function (c) {
    var tmp$;
    tmp$ = this._order + 1 - 1 | 0;
    for (var i = 0; i <= tmp$; i++)
      this.a[i] = this.a[i] / c;
  };
  Polynomial.prototype.overEqualsPolynomial = function (B) {
    return Rational_init_0(this, B);
  };
  Polynomial.prototype.derivative = function () {
    var tmp$;
    var tmp = new Float64Array(this._order);
    tmp$ = this._order - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      tmp[i] = (i + 1 | 0) * this.a[i + 1 | 0];
    }
    return Polynomial_init(tmp);
  };
  Polynomial.prototype.evaluateReal = function (x) {
    var retval = this.a[this._order];
    for (var i = this._order - 1 | 0; i >= 0; i--) {
      retval = x * retval + this.a[i];
    }
    return retval;
  };
  Polynomial.prototype.evaluateComplex = function (c) {
    var retval = Complex_init_0(this.a[this._order]);
    for (var i = this._order - 1 | 0; i >= 0; i--) {
      retval = retval.timesComplex(c).plusReal(this.a[i]);
    }
    return retval;
  };
  Polynomial.prototype.groupDelay = function (omega) {
    if (this._order === 0)
      return 0.0;
    else {
      var c = Complex_init(0.0, omega);
      var N = this.derivative().evaluateComplex(c);
      var D = this.evaluateComplex(c);
      return -N.overComplex(D).real();
    }
  };
  Polynomial.prototype.discreteTimeGroupDelay = function (Omega) {
    var c = Complex$Companion_getInstance().exp(Complex_init(0.0, -Omega));
    var N = Complex_init_0(this.a[this._order] * this._order);
    for (var i = this._order - 1 | 0; i >= 0; i--) {
      N = N.timesComplex(c).plusReal(this.a[i] * i);
    }
    var D = this.evaluateComplex(c);
    return N.overComplex(D).real();
  };
  Polynomial.prototype.reflectionCoefficients = function () {
    var tmp$, tmp$_0, tmp$_1;
    var k = new Float64Array(this._order);
    var b = new Float64Array(this._order + 1 | 0);
    b[0] = 1.0;
    tmp$ = this._order - 1 | 0;
    for (var i = 0; i <= tmp$; i++)
      b[i + 1 | 0] = this.a[i + 1 | 0] / this.a[0];
    for (var i_0 = this._order; i_0 >= 1; i_0--) {
      k[i_0 - 1 | 0] = b[i_0];
      var scale = 1.0 - k[i_0 - 1 | 0] * k[i_0 - 1 | 0];
      var c = new Float64Array(this._order);
      tmp$_0 = i_0 - 1 | 0;
      for (var j = 0; j <= tmp$_0; j++) {
        c[j] = (b[j] - k[i_0 - 1 | 0] * b[i_0 - j | 0]) / scale;
      }
      tmp$_1 = i_0 - 1 | 0;
      for (var j_0 = 0; j_0 <= tmp$_1; j_0++) {
        b[j_0] = c[j_0];
      }
    }
    return k;
  };
  Polynomial.prototype.toString = function () {
    var tmp$;
    var s = '';
    tmp$ = this._order;
    for (var i = 0; i <= tmp$; i++) {
      if (i >= 0 && i < 10)
        s += i.toString() + '    ' + toString(this.a[i]) + String.fromCharCode(toBoxedChar(10));
      else if (i >= 10 && i <= 100)
        s += i.toString() + '   ' + toString(this.a[i]) + String.fromCharCode(toBoxedChar(10));
    }
    return s;
  };
  Polynomial.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Polynomial',
    interfaces: []
  };
  function Polynomial_init(a, $this) {
    $this = $this || Object.create(Polynomial.prototype);
    Polynomial.call($this);
    $this._order = a.length - 1 | 0;
    $this.a = a.slice();
    return $this;
  }
  function Polynomial_init_0(B, $this) {
    $this = $this || Object.create(Polynomial.prototype);
    Polynomial.call($this);
    $this._order = B._order;
    $this.a = B.a.slice();
    return $this;
  }
  function Polynomial_init_1(order, $this) {
    $this = $this || Object.create(Polynomial.prototype);
    Polynomial.call($this);
    $this._order = order;
    $this.a = new Float64Array(order + 1 | 0);
    return $this;
  }
  function Polynomial_init_2(c, $this) {
    $this = $this || Object.create(Polynomial.prototype);
    Polynomial.call($this);
    $this._order = 0;
    $this.a = new Float64Array(1);
    $this.a[0] = c;
    return $this;
  }
  function Rational() {
    this.N_0 = null;
    this.D_0 = null;
  }
  Rational.prototype.order = function () {
    var retval = new Int32Array([this.N_0.order(), this.D_0.order()]);
    return retval;
  };
  Rational.prototype.numerator = function () {
    return Polynomial_init_0(this.N_0);
  };
  Rational.prototype.denominator = function () {
    return Polynomial_init_0(this.D_0);
  };
  Rational.prototype.canonicalForm = function () {
    var tmp$, tmp$_0;
    var scaleN = this.N_0.a[this.N_0._order];
    tmp$ = this.N_0.a;
    for (var i = 0; i !== tmp$.length; ++i) {
      this.N_0.a[i] = this.N_0.a[i] / scaleN;
    }
    var scaleD = this.D_0.a[this.D_0._order];
    tmp$_0 = this.D_0.a;
    for (var i_0 = 0; i_0 !== tmp$_0.length; ++i_0) {
      this.D_0.a[i_0] = this.D_0.a[i_0] / scaleD;
    }
    return scaleN / scaleD;
  };
  Rational.prototype.timesEqualsReal = function (A) {
    this.N_0.timesEqualsReal(A);
  };
  Rational.prototype.timesEqualsPolynomial = function (P) {
    this.N_0.timesEqualsPolynomial(P);
  };
  Rational.prototype.timesEqualsRational = function (R) {
    this.N_0.timesEqualsPolynomial(R.N_0);
    this.D_0.timesEqualsPolynomial(R.D_0);
  };
  Rational.prototype.evaluateReal = function (x) {
    var retval = 0.0;
    var num = this.N_0.evaluateReal(x);
    var denom = this.D_0.evaluateReal(x);
    if (denom !== 0.0)
      retval = num / denom;
    return retval;
  };
  Rational.prototype.evaluateComplex = function (c) {
    var retval = Complex_init(0.0, 0.0);
    var num = this.N_0.evaluateComplex(c);
    var denom = this.D_0.evaluateComplex(c);
    if (denom.abs() !== 0.0)
      retval = num.overComplex(denom);
    return retval;
  };
  Rational.prototype.mapRational = function (S) {
    var tmp$, tmp$_0;
    var P = Polynomial_init_2(this.N_0.a[this.N_0._order]);
    var T = Polynomial_init_2(1.0);
    for (var i = this.N_0._order - 1 | 0; i >= 0; i--) {
      T = T.timesPolynomial(S.D_0);
      P = P.timesPolynomial(S.N_0).plusPolynomial(T.timesReal(this.N_0.a[i]));
    }
    var Q = Polynomial_init_2(this.D_0.a[this.D_0._order]);
    T = Polynomial_init_2(1.0);
    for (var i_0 = this.D_0._order - 1 | 0; i_0 >= 0; i_0--) {
      T = T.timesPolynomial(S.D_0);
      Q = Q.timesPolynomial(S.N_0).plusPolynomial(T.timesReal(this.D_0.a[i_0]));
    }
    if (this.D_0._order > this.N_0._order) {
      tmp$ = this.D_0._order - this.N_0._order - 1 | 0;
      for (var i_1 = 0; i_1 <= tmp$; i_1++)
        P = P.timesPolynomial(S.D_0);
    }
     else if (this.N_0._order > this.D_0._order) {
      tmp$_0 = this.N_0._order - this.D_0._order - 1 | 0;
      for (var i_2 = 0; i_2 <= tmp$_0; i_2++)
        Q = Q.timesPolynomial(S.D_0);
    }
    P.trim();
    Q.trim();
    return Rational_init_0(P, Q);
  };
  Rational.prototype.residueForReal = function (pole) {
    return this.N_0.evaluateReal(pole) / this.D_0.derivative().evaluateReal(pole);
  };
  Rational.prototype.residueForComplex = function (pole) {
    return this.N_0.evaluateComplex(pole).overComplex(this.D_0.derivative().evaluateComplex(pole));
  };
  Rational.prototype.groupDelay = function (omega) {
    return this.N_0.groupDelay(omega) - this.D_0.groupDelay(omega);
  };
  Rational.prototype.discreteTimeGroupDelay = function (Omega) {
    return this.N_0.discreteTimeGroupDelay(Omega) - this.D_0.discreteTimeGroupDelay(Omega);
  };
  Rational.prototype.toString = function () {
    return 'Numerator: ' + this.N_0 + '\n' + ('Denominator: ' + this.D_0 + '\n');
  };
  Rational.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Rational',
    interfaces: []
  };
  function Rational_init(num, denom, $this) {
    $this = $this || Object.create(Rational.prototype);
    Rational.call($this);
    $this.N_0 = Polynomial_init(num);
    $this.D_0 = Polynomial_init(denom);
    return $this;
  }
  function Rational_init_0(N, D, $this) {
    $this = $this || Object.create(Rational.prototype);
    Rational.call($this);
    $this.N_0 = Polynomial_init_0(N);
    $this.D_0 = Polynomial_init_0(D);
    return $this;
  }
  function Rational_init_1(R, $this) {
    $this = $this || Object.create(Rational.prototype);
    Rational.call($this);
    $this.N_0 = Polynomial_init_0(R.N_0);
    $this.D_0 = Polynomial_init_0(R.D_0);
    return $this;
  }
  function Rational_init_2(c, $this) {
    $this = $this || Object.create(Rational.prototype);
    Rational.call($this);
    $this.N_0 = Polynomial_init_2(c);
    $this.D_0 = Polynomial_init_2(1.0);
    return $this;
  }
  function ComplexAnalyticSignal(realSignal) {
    this._realPart_8be2vx$ = null;
    this._imagPart_8be2vx$ = null;
    var tmp$;
    this._realPart_8be2vx$ = realSignal.slice();
    var transformer = new CenteredHilbertTransform(50, 0.03, 0.97);
    var tmp = transformer.filter(this._realPart_8be2vx$);
    Sequence$Companion_getInstance().zeroShiftArray(tmp, -50);
    this._imagPart_8be2vx$ = new Float32Array(this._realPart_8be2vx$.length);
    tmp$ = this._realPart_8be2vx$;
    for (var i = 0; i !== tmp$.length; ++i) {
      this._imagPart_8be2vx$[i] = tmp[i];
    }
  }
  Object.defineProperty(ComplexAnalyticSignal.prototype, 'envelope', {
    get: function () {
      var tmp$;
      var retval = new Float32Array(this._realPart_8be2vx$.length);
      tmp$ = this._realPart_8be2vx$;
      for (var i = 0; i !== tmp$.length; ++i) {
        var x = this._realPart_8be2vx$[i] * this._realPart_8be2vx$[i] + this._imagPart_8be2vx$[i] * this._imagPart_8be2vx$[i];
        retval[i] = Math_0.sqrt(x);
      }
      return retval;
    }
  });
  ComplexAnalyticSignal.prototype.getRealPart = function () {
    return this._realPart_8be2vx$.slice();
  };
  ComplexAnalyticSignal.prototype.getImagPart = function () {
    return this._imagPart_8be2vx$.slice();
  };
  ComplexAnalyticSignal.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ComplexAnalyticSignal',
    interfaces: []
  };
  function Interpolator(rate, designFactor, blockSize) {
    this.rate_0 = rate;
    this.overlapAdd_0 = null;
    this.buffer_0 = null;
    var half = Kotlin.imul(this.rate_0, designFactor);
    var N = (2 * half | 0) + 1 | 0;
    var kernel = (new HammingWindow(N)).array;
    for (var i = 1; i <= half; i++) {
      var tmp$ = kernel[half + i | 0];
      var x = math.PI * i / this.rate_0;
      kernel[half + i | 0] = tmp$ * (Math_0.sin(x) / (math.PI * i / this.rate_0));
      kernel[half - i | 0] = kernel[half + i | 0];
    }
    this.overlapAdd_0 = OverlapAdd_init(kernel, Kotlin.imul(blockSize, this.rate_0));
    this.buffer_0 = new Float32Array(Kotlin.imul(blockSize, this.rate_0));
  }
  Interpolator.prototype.interpolate = function (block, interpolatedBlock) {
    Sequence$Companion_getInstance().stretchArray(block, this.rate_0, this.buffer_0);
    this.overlapAdd_0.filter(this.buffer_0, 0, interpolatedBlock, 0);
  };
  Interpolator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Interpolator',
    interfaces: []
  };
  function OverlapAdd() {
    this.shiftRegister_0 = null;
    this.fft_0 = null;
    this.nfft_0 = 0;
    this.kernel_0 = null;
    this.kernelLength_0 = 0;
    this.blockSize_0 = 0;
    this.segment_0 = null;
    this.transform_0 = null;
  }
  OverlapAdd.prototype.filter = function (src, sptr, dst, dptr) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (src.length !== this.blockSize_0)
      throw IllegalArgumentException_init('Data array length not equal to blockSize');
    tmp$ = ensureNotNull(this.segment_0);
    for (var i = 0; i !== tmp$.length; ++i) {
      ensureNotNull(this.segment_0)[i] = 0.0;
    }
    tmp$_0 = this.blockSize_0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      ensureNotNull(this.segment_0)[i_0] = src[i_0 + sptr | 0];
    }
    ensureNotNull(this.fft_0).evaluate(ensureNotNull(this.segment_0), ensureNotNull(this.transform_0));
    RDFT$Companion_getInstance().dftProduct(ensureNotNull(this.kernel_0), ensureNotNull(this.transform_0), 1.0);
    ensureNotNull(this.fft_0).evaluateInverse(ensureNotNull(this.transform_0), ensureNotNull(this.segment_0));
    tmp$_1 = this.nfft_0 - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
      this.shiftRegister_0[i_1] = this.shiftRegister_0[i_1] + ensureNotNull(this.segment_0)[i_1];
    }
    tmp$_2 = this.blockSize_0;
    for (var i_2 = 0; i_2 <= tmp$_2; i_2++) {
      dst[i_2 + dptr | 0] = this.shiftRegister_0[i_2];
    }
    Sequence$Companion_getInstance().zeroShiftArray(this.shiftRegister_0, -this.blockSize_0 | 0);
  };
  OverlapAdd.prototype.flush = function (dst, dptr) {
    var tmp$;
    tmp$ = this.blockSize_0;
    for (var i = 0; i <= tmp$; i++) {
      dst[i + dptr | 0] = this.shiftRegister_0[i];
    }
    Sequence$Companion_getInstance().zeroShiftArray(this.shiftRegister_0, -this.blockSize_0 | 0);
  };
  OverlapAdd.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OverlapAdd',
    interfaces: []
  };
  function OverlapAdd_init(H, blockSize, $this) {
    $this = $this || Object.create(OverlapAdd.prototype);
    OverlapAdd.call($this);
    $this.kernelLength_0 = H.length;
    $this.blockSize_0 = blockSize;
    var clength = H.length + blockSize - 1 | 0;
    var log2nfft = 0;
    $this.nfft_0 = 1;
    while ($this.nfft_0 < clength) {
      log2nfft = log2nfft + 1 | 0;
      $this.nfft_0 = $this.nfft_0 * 2 | 0;
    }
    $this.fft_0 = new RDFT(log2nfft);
    $this.shiftRegister_0 = new Float32Array($this.nfft_0);
    $this.kernel_0 = new Float32Array($this.nfft_0);
    $this.segment_0 = new Float32Array($this.nfft_0);
    $this.transform_0 = new Float32Array($this.nfft_0);
    for (var i = 0; i !== H.length; ++i) {
      ensureNotNull($this.segment_0)[i] = H[i];
    }
    ensureNotNull($this.fft_0).evaluate(ensureNotNull($this.segment_0), ensureNotNull($this.kernel_0));
    return $this;
  }
  function OverlapAdd_init_0(H, master, $this) {
    $this = $this || Object.create(OverlapAdd.prototype);
    OverlapAdd.call($this);
    if (H.length !== master.kernelLength_0)
      throw IllegalArgumentException_init('Slave kernel length inconsistent with master OverlapAdd kernel length');
    $this.kernelLength_0 = H.length;
    $this.blockSize_0 = master.blockSize_0;
    $this.fft_0 = master.fft_0;
    $this.nfft_0 = master.nfft_0;
    $this.shiftRegister_0 = new Float32Array($this.nfft_0);
    $this.kernel_0 = new Float32Array($this.nfft_0);
    $this.segment_0 = new Float32Array($this.nfft_0);
    $this.transform_0 = new Float32Array($this.nfft_0);
    for (var i = 0; i !== H.length; ++i) {
      ensureNotNull($this.segment_0)[i] = H[i];
    }
    ensureNotNull($this.fft_0).evaluate(ensureNotNull($this.segment_0), ensureNotNull($this.kernel_0));
    return $this;
  }
  function CenteredDifferentiator(N, delta, OmegaP) {
    FIRTypeIII.call(this, 1, N);
    this.delta_0 = delta;
    if (!(0.0 < OmegaP && OmegaP < 1.0))
      throw IllegalArgumentException_init('Check 0.0 < OmegaP < 1.0');
    this.bands[0][0] = 1.0 / (2 * N | 0);
    this.bands[0][1] = OmegaP;
    this.generateCoefficients();
  }
  CenteredDifferentiator.prototype.desiredResponse = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = -math.PI * Omega / this.delta_0;
    return retval;
  };
  CenteredDifferentiator.prototype.weight = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = 1.0 / Omega;
    return retval;
  };
  CenteredDifferentiator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CenteredDifferentiator',
    interfaces: [FIRTypeIII]
  };
  function CenteredHilbertTransform(N, Omega1, Omega2) {
    FIRTypeIII.call(this, 1, N);
    if (!(0 < Omega1 && Omega1 < Omega2 && Omega2 < 1.0))
      throw IllegalArgumentException_init('Check 0.0 < Omega1 < Omega2 < 1.0');
    this.bands[0][0] = Omega1;
    this.bands[0][1] = Omega2;
    this.generateCoefficients();
  }
  CenteredHilbertTransform.prototype.desiredResponse = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = 1.0;
    return retval;
  };
  CenteredHilbertTransform.prototype.weight = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = 1.0;
    return retval;
  };
  CenteredHilbertTransform.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CenteredHilbertTransform',
    interfaces: [FIRTypeIII]
  };
  function DesignGrid() {
    DesignGrid$Companion_getInstance();
    this.grid_e85hlk$_0 = this.grid_e85hlk$_0;
    this.gridSize = 0;
    this.X_ehzatu$_0 = this.X_ehzatu$_0;
    this.H_ehzb7m$_0 = this.H_ehzb7m$_0;
    this.W_ehzaup$_0 = this.W_ehzaup$_0;
    this.bandEdgeIndices_fpoofl$_0 = this.bandEdgeIndices_fpoofl$_0;
    this.extremaIndices_uyamnj$_0 = this.extremaIndices_uyamnj$_0;
    this.containsZero = false;
    this.containsPi = false;
  }
  Object.defineProperty(DesignGrid.prototype, 'grid', {
    get: function () {
      if (this.grid_e85hlk$_0 == null)
        return throwUPAE('grid');
      return this.grid_e85hlk$_0;
    },
    set: function (grid) {
      this.grid_e85hlk$_0 = grid;
    }
  });
  Object.defineProperty(DesignGrid.prototype, 'X', {
    get: function () {
      if (this.X_ehzatu$_0 == null)
        return throwUPAE('X');
      return this.X_ehzatu$_0;
    },
    set: function (X) {
      this.X_ehzatu$_0 = X;
    }
  });
  Object.defineProperty(DesignGrid.prototype, 'H', {
    get: function () {
      if (this.H_ehzb7m$_0 == null)
        return throwUPAE('H');
      return this.H_ehzb7m$_0;
    },
    set: function (H) {
      this.H_ehzb7m$_0 = H;
    }
  });
  Object.defineProperty(DesignGrid.prototype, 'W', {
    get: function () {
      if (this.W_ehzaup$_0 == null)
        return throwUPAE('W');
      return this.W_ehzaup$_0;
    },
    set: function (W) {
      this.W_ehzaup$_0 = W;
    }
  });
  Object.defineProperty(DesignGrid.prototype, 'bandEdgeIndices', {
    get: function () {
      if (this.bandEdgeIndices_fpoofl$_0 == null)
        return throwUPAE('bandEdgeIndices');
      return this.bandEdgeIndices_fpoofl$_0;
    },
    set: function (bandEdgeIndices) {
      this.bandEdgeIndices_fpoofl$_0 = bandEdgeIndices;
    }
  });
  Object.defineProperty(DesignGrid.prototype, 'extremaIndices', {
    get: function () {
      if (this.extremaIndices_uyamnj$_0 == null)
        return throwUPAE('extremaIndices');
      return this.extremaIndices_uyamnj$_0;
    },
    set: function (extremaIndices) {
      this.extremaIndices_uyamnj$_0 = extremaIndices;
    }
  });
  DesignGrid.prototype.toString = function () {
    var tmp$;
    var out = '';
    var extremum = 0;
    var bandEdgeCount = 0;
    tmp$ = this.gridSize - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var Omega = this.grid[i];
      var line = '' + toString(Kotlin.Long.fromInt(i)) + '  ' + toString(Omega) + '  ' + toString(this.X[i]) + '  ' + toString(this.H[i]) + '  ' + toString(this.W[i]);
      if (this.bandEdgeIndices[bandEdgeCount] === i) {
        line = line + '  band edge';
        bandEdgeCount = bandEdgeCount + 1 | 0;
      }
      if (Omega === this.grid[this.extremaIndices[extremum]]) {
        line = line + '  extremum';
        extremum = extremum + 1 | 0;
      }
      out += line + String.fromCharCode(toBoxedChar(10));
    }
    return out;
  };
  function DesignGrid$Companion() {
    DesignGrid$Companion_instance = this;
    this.GRIDDENSITY = 20;
  }
  DesignGrid$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DesignGrid$Companion_instance = null;
  function DesignGrid$Companion_getInstance() {
    if (DesignGrid$Companion_instance === null) {
      new DesignGrid$Companion();
    }
    return DesignGrid$Companion_instance;
  }
  DesignGrid.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DesignGrid',
    interfaces: []
  };
  function EquirippleBandpass(N, OmegaS1, Ws1, OmegaP1, OmegaP2, Wp, OmegaS2, Ws2) {
    FIRTypeI.call(this, 3, N);
    this.Ws1_0 = Ws1;
    this.Wp_0 = Wp;
    this.Ws2_0 = Ws2;
    if (!(0.0 < OmegaS1 && OmegaS1 < OmegaP1 && OmegaP1 < OmegaP2 && OmegaP2 < OmegaS2 && OmegaS2 < 1.0))
      throw IllegalArgumentException_init('Band edge specification error, ensure that 0.0 < OmegaS1 < OmegaP1 < OmegaP2 < OmegaS2 < 1.0');
    this.bands[0][0] = 0.0;
    this.bands[0][1] = OmegaS1;
    this.bands[1][0] = OmegaP1;
    this.bands[1][1] = OmegaP2;
    this.bands[2][0] = OmegaS2;
    this.bands[2][1] = 1.0;
    this.generateCoefficients();
  }
  EquirippleBandpass.prototype.desiredResponse = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[1][0], Omega) && this.LTE(Omega, this.bands[1][1]))
      retval = 1.0;
    return retval;
  };
  EquirippleBandpass.prototype.weight = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = this.Ws1_0;
    else if (this.LTE(this.bands[1][0], Omega) && this.LTE(Omega, this.bands[1][1]))
      retval = this.Wp_0;
    else if (this.LTE(this.bands[2][0], Omega) && this.LTE(Omega, this.bands[2][1]))
      retval = this.Ws2_0;
    return retval;
  };
  EquirippleBandpass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EquirippleBandpass',
    interfaces: [FIRTypeI]
  };
  function EquirippleDesigner() {
    EquirippleDesigner_instance = this;
    this.MAXITER_0 = 25;
  }
  EquirippleDesigner.prototype.remez = function (G) {
    var tmp$, tmp$_0, tmp$_1;
    var nextrema = G.extremaIndices.length;
    var newExtrema = ArrayList_init();
    var E = new Float64Array(G.gridSize);
    var GA = new Float64Array(G.gridSize);
    var niter = 0;
    do {
      var delta = this.computeDelta(G);
      var LP = this.constructInterpolatingPolynomial(G, delta);
      tmp$ = G.gridSize - 1 | 0;
      for (var i = 0; i <= tmp$; i++) {
        GA[i] = LP.evaluateAt(G.X[i]);
        E[i] = GA[i] - G.H[i];
      }
      newExtrema.clear();
      var change = 0;
      tmp$_0 = nextrema - 1 | 0;
      for (var currentExtremum = 0; currentExtremum <= tmp$_0; currentExtremum++) {
        var currentGridPt = G.extremaIndices[currentExtremum];
        var s = this.sgn(E[currentGridPt]);
        var ptr = currentGridPt + 1 | 0;
        if (ptr < G.gridSize) {
          while (this.sgn(E[ptr] - E[ptr - 1 | 0]) === s) {
            ptr = ptr + 1 | 0;
            if (ptr === G.gridSize)
              break;
          }
        }
        ptr = ptr - 1 | 0;
        if (ptr === currentGridPt) {
          ptr = currentGridPt - 1 | 0;
          if (ptr >= 0) {
            while (this.sgn(E[ptr] - E[ptr + 1 | 0]) === s) {
              ptr = ptr - 1 | 0;
              if (ptr < 0)
                break;
            }
          }
          ptr = ptr + 1 | 0;
        }
        newExtrema.add_11rb$(ptr);
        if (ptr !== currentGridPt) {
          change = change + 1 | 0;
        }
      }
      if (G.containsZero && G.containsPi) {
        var gridPi = G.gridSize - 1 | 0;
        if (newExtrema.contains_11rb$(0)) {
          if (!newExtrema.contains_11rb$(gridPi)) {
            if (this.sgn(E[gridPi]) !== this.sgn(E[G.extremaIndices[nextrema - 1 | 0]])) {
              var x = E[gridPi];
              var tmp$_2 = Math_0.abs(x);
              var x_0 = E[0];
              if (tmp$_2 > Math_0.abs(x_0)) {
                newExtrema.removeAt_za3lpa$(0);
                newExtrema.add_11rb$(gridPi);
                change = change + 1 | 0;
              }
            }
          }
        }
         else {
          if (newExtrema.contains_11rb$(gridPi)) {
            if (this.sgn(E[0]) !== this.sgn(E[G.extremaIndices[0]])) {
              var x_1 = E[0];
              var tmp$_3 = Math_0.abs(x_1);
              var x_2 = E[gridPi];
              if (tmp$_3 > Math_0.abs(x_2)) {
                newExtrema.removeAt_za3lpa$(newExtrema.size - 1 | 0);
                newExtrema.add_wxm5ur$(0, 0);
                change = change + 1 | 0;
              }
            }
          }
        }
      }
      if (change === 0)
        break;
      tmp$_1 = nextrema - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_1; i_0++) {
        G.extremaIndices[i_0] = newExtrema.get_za3lpa$(i_0);
      }
      niter = niter + 1 | 0;
    }
     while (niter < this.MAXITER_0);
  };
  EquirippleDesigner.prototype.computeDelta = function (G) {
    var tmp$, tmp$_0;
    var nextrema = G.extremaIndices.length;
    var extrema = new Float64Array(nextrema);
    tmp$ = nextrema - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      extrema[i] = G.X[G.extremaIndices[i]];
    }
    var gamma = LagrangePolynomial$Companion_getInstance().BarycentricWeights(extrema);
    var num = 0.0;
    var denom = 0.0;
    var s = 1.0;
    tmp$_0 = nextrema - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      var j = G.extremaIndices[i_0];
      num += gamma[i_0] * G.H[j];
      denom += s * gamma[i_0] / G.W[j];
      s = -s;
    }
    return num / denom;
  };
  EquirippleDesigner.prototype.constructInterpolatingPolynomial = function (G, delta) {
    var tmp$;
    var extremaSubset = new Float64Array(G.extremaIndices.length - 1 | 0);
    var n = extremaSubset.length;
    var x = new Float64Array(n);
    var f = new Float64Array(n);
    var s = 1.0;
    tmp$ = n - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var j = G.extremaIndices[i];
      x[i] = G.X[j];
      f[i] = G.H[j] - s * delta / G.W[j];
      s = -s;
    }
    return new LagrangePolynomial(x, f);
  };
  EquirippleDesigner.prototype.calculateCoefficients = function (G, Nc) {
    var tmp$;
    var LP = this.constructInterpolatingPolynomial(G, this.computeDelta(G));
    var log2nfft = 6;
    var nfft = 64;
    while (nfft < Nc) {
      nfft = nfft * 2 | 0;
      log2nfft = log2nfft + 1 | 0;
    }
    var X = new Float32Array(nfft);
    var x = new Float32Array(nfft);
    tmp$ = nfft / 2 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var x_0 = 2.0 * math.PI * i / nfft;
      X[i] = LP.evaluateAt(Math_0.cos(x_0));
    }
    var dft = new RDFT(log2nfft);
    dft.evaluateInverse(X, x);
    return x;
  };
  EquirippleDesigner.prototype.sgn = function (x) {
    if (x > 0.0)
      return 1;
    else if (x < 0.0)
      return -1;
    else
      return 0;
  };
  EquirippleDesigner.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'EquirippleDesigner',
    interfaces: []
  };
  var EquirippleDesigner_instance = null;
  function EquirippleDesigner_getInstance() {
    if (EquirippleDesigner_instance === null) {
      new EquirippleDesigner();
    }
    return EquirippleDesigner_instance;
  }
  var Array_0 = Array;
  function EquirippleFIRFilter(numBands, N, Nc) {
    EquirippleFIRFilter$Companion_getInstance();
    this.numBands = numBands;
    this.N = N;
    this.Nc = Nc;
    this.bands = null;
    this._coefficients = null;
    this.implementation = null;
    var array = Array_0(this.numBands);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new Float64Array(2);
    }
    this.bands = array;
  }
  EquirippleFIRFilter.prototype.getCoefficients = function () {
    var tmp$, tmp$_0;
    tmp$_0 = (tmp$ = this._coefficients) != null ? tmp$.slice() : null;
    if (tmp$_0 == null) {
      throw RuntimeException_init('Should not happen, access to coefficients before initialized.');
    }
    return tmp$_0;
  };
  EquirippleFIRFilter.prototype.createGrid = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var G = new DesignGrid();
    var nextrema = new Int32Array(this.numBands);
    var totalBandwidth = 0.0;
    tmp$ = this.numBands - 1 | 0;
    for (var ib = 0; ib <= tmp$; ib++)
      totalBandwidth += this.bands[ib][1] - this.bands[ib][0];
    var m = this.N + 1 - (2 * this.numBands | 0) | 0;
    var np = 0;
    var largestBand = 0;
    var nmax = 0;
    tmp$_0 = this.numBands - 1 | 0;
    for (var ib_0 = 0; ib_0 <= tmp$_0; ib_0++) {
      var B = this.bands[ib_0][1] - this.bands[ib_0][0];
      nextrema[ib_0] = numberToInt(round(m * B / totalBandwidth)) + 2 | 0;
      if (nextrema[ib_0] > nmax) {
        nmax = nextrema[ib_0];
        largestBand = ib_0;
      }
      np = np + nextrema[ib_0] | 0;
    }
    while (np < (this.N + 1 | 0)) {
      nextrema[largestBand] = nextrema[largestBand] + 1 | 0;
      np = np + 1 | 0;
    }
    while (np > (this.N + 1 | 0)) {
      nextrema[largestBand] = nextrema[largestBand] - 1 | 0;
      np = np - 1 | 0;
    }
    G.bandEdgeIndices = new Int32Array(this.numBands * 2 | 0);
    G.extremaIndices = new Int32Array(this.N + 1 | 0);
    var gridArray = ArrayList_init();
    var gridpt = 0;
    var extremum = 0;
    var bandEdgeCount = 0;
    var perturbation;
    tmp$_1 = this.numBands - 1 | 0;
    for (var ib_1 = 0; ib_1 <= tmp$_1; ib_1++) {
      var B_0 = this.bands[ib_1][1] - this.bands[ib_1][0];
      var n = 1 + Kotlin.imul(nextrema[ib_1] - 1 | 0, DesignGrid$Companion_getInstance().GRIDDENSITY) | 0;
      var dB = B_0 / (n - 1 | 0);
      var base = this.bands[ib_1][0];
      tmp$_2 = n - 1 | 0;
      for (var i = 0; i <= tmp$_2; i++) {
        var Omega = base + dB * i;
        gridArray.add_11rb$(Omega);
        if (i % DesignGrid$Companion_getInstance().GRIDDENSITY === 0) {
          if (i !== 0 && i !== (n - 1 | 0)) {
            var x = Math.random() * 3;
            perturbation = roundToInt(Math_0.floor(x)) - 1 | 0;
          }
           else
            perturbation = 0;
          G.extremaIndices[tmp$_3 = extremum, extremum = tmp$_3 + 1 | 0, tmp$_3] = gridpt + perturbation | 0;
        }
        if (i === 0 || i === (n - 1 | 0)) {
          G.bandEdgeIndices[bandEdgeCount] = gridpt;
          bandEdgeCount = bandEdgeCount + 1 | 0;
        }
        gridpt = gridpt + 1 | 0;
      }
    }
    G.gridSize = gridArray.size;
    G.grid = new Float64Array(G.gridSize);
    G.X = new Float64Array(G.gridSize);
    G.H = new Float64Array(G.gridSize);
    G.W = new Float64Array(G.gridSize);
    tmp$_4 = G.gridSize - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_4; i_0++) {
      G.grid[i_0] = gridArray.get_za3lpa$(i_0);
      var tmp$_5 = G.X;
      var x_0 = G.grid[i_0] * math.PI;
      tmp$_5[i_0] = Math_0.cos(x_0);
    }
    return G;
  };
  EquirippleFIRFilter.prototype.generateCoefficients = function () {
    var G = this.createGrid();
    this.populateGrid(G);
    EquirippleDesigner_getInstance().remez(G);
    this._coefficients = this.interpretCoefficients(EquirippleDesigner_getInstance().calculateCoefficients(G, this.Nc));
  };
  EquirippleFIRFilter.prototype.getImplementation = function (blockSize) {
    return OverlapAdd_init(this.getCoefficients(), blockSize);
  };
  EquirippleFIRFilter.prototype.filter = function (x) {
    var nfft = 16;
    var log2nfft = 4;
    var coefficients = this.getCoefficients();
    var n = x.length + coefficients.length - 1 | 0;
    while (nfft < n) {
      nfft = nfft * 2 | 0;
      log2nfft = log2nfft + 1 | 0;
    }
    var fft = new RDFT(log2nfft);
    var tmp = new Float32Array(nfft);
    var transform = new Float32Array(nfft);
    var kernel = new Float32Array(nfft);
    for (var i = 0; i !== x.length; ++i) {
      tmp[i] = x[i];
    }
    fft.evaluate(tmp, transform);
    for (var i_0 = 0; i_0 !== tmp.length; ++i_0) {
      tmp[i_0] = 0.0;
    }
    for (var i_1 = 0; i_1 !== coefficients.length; ++i_1) {
      tmp[i_1] = coefficients[i_1];
    }
    fft.evaluate(tmp, kernel);
    RDFT$Companion_getInstance().dftProduct(kernel, transform, 1.0);
    fft.evaluateInverse(transform, tmp);
    kernel = new Float32Array(n);
    for (var i_2 = 0; i_2 <= n; i_2++) {
      kernel[i_2] = tmp[i_2];
    }
    return kernel;
  };
  EquirippleFIRFilter.prototype.LTE = function (x, y) {
    var retval = false;
    if (x < y)
      retval = true;
    var x_0 = x - y;
    if (Math_0.abs(x_0) < EquirippleFIRFilter$Companion_getInstance().MACHINETOLERANCE_0)
      retval = true;
    return retval;
  };
  function EquirippleFIRFilter$Companion() {
    EquirippleFIRFilter$Companion_instance = this;
    this.MACHINETOLERANCE_0 = 1.0E-6;
  }
  EquirippleFIRFilter$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var EquirippleFIRFilter$Companion_instance = null;
  function EquirippleFIRFilter$Companion_getInstance() {
    if (EquirippleFIRFilter$Companion_instance === null) {
      new EquirippleFIRFilter$Companion();
    }
    return EquirippleFIRFilter$Companion_instance;
  }
  EquirippleFIRFilter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EquirippleFIRFilter',
    interfaces: []
  };
  function EquirippleHalfBand(N, OmegaP) {
    this.coefficients_0 = null;
    var EHBP = new EquirippleHalfBandPrototype(N, 2 * OmegaP);
    var c = EHBP.getCoefficients();
    this.coefficients_0 = new Float32Array((2 * c.length | 0) - 1 | 0);
    for (var i = 0; i !== c.length; ++i) {
      this.coefficients_0[2 * i | 0] = 0.5 * c[i];
    }
    this.coefficients_0[c.length - 1 | 0] = 0.5;
  }
  EquirippleHalfBand.prototype.getCoefficients = function () {
    return this.coefficients_0.slice();
  };
  EquirippleHalfBand.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EquirippleHalfBand',
    interfaces: []
  };
  function EquirippleHalfBandPrototype(N, OmegaP) {
    FIRTypeII.call(this, 1, N);
    if (OmegaP <= 0.0 || OmegaP >= 1.0)
      throw IllegalArgumentException_init('OmegaP: ' + OmegaP + ' out of bounds (0.0 < OmegaP < 1.0)');
    this.bands[0][0] = 0.0;
    this.bands[0][1] = OmegaP;
    this.generateCoefficients();
  }
  EquirippleHalfBandPrototype.prototype.desiredResponse = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = 1.0;
    return retval;
  };
  EquirippleHalfBandPrototype.prototype.weight = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = 1.0;
    return retval;
  };
  EquirippleHalfBandPrototype.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EquirippleHalfBandPrototype',
    interfaces: [FIRTypeII]
  };
  function EquirippleHighpass(N, OmegaS, Ws, OmegaP, Wp) {
    FIRTypeI.call(this, 2, N);
    this.Ws_0 = Ws;
    this.Wp_0 = Wp;
    if (OmegaS >= OmegaP)
      throw IllegalArgumentException_init('OmegaS >= OmegaP ');
    if (OmegaS <= 0.0 || OmegaS >= 1.0)
      throw IllegalArgumentException_init('OmegaS: ' + OmegaS + ' out of bounds (0.0 < OmegaS < 1.0)');
    if (OmegaP <= 0.0 || OmegaP >= 1.0)
      throw IllegalArgumentException_init('OmegaP: ' + OmegaP + ' out of bounds (0.0 < OmegaP < 1.0)');
    this.bands[0][0] = 0.0;
    this.bands[0][1] = OmegaS;
    this.bands[1][0] = OmegaP;
    this.bands[1][1] = 1.0;
    this.generateCoefficients();
  }
  EquirippleHighpass.prototype.desiredResponse = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[1][0], Omega) && this.LTE(Omega, this.bands[1][1]))
      retval = 1.0;
    return retval;
  };
  EquirippleHighpass.prototype.weight = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = this.Ws_0;
    else if (this.LTE(this.bands[1][0], Omega) && this.LTE(Omega, this.bands[1][1]))
      retval = this.Wp_0;
    return retval;
  };
  EquirippleHighpass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EquirippleHighpass',
    interfaces: [FIRTypeI]
  };
  function EquirippleLowpass(N, OmegaP, Wp, OmegaS, Ws) {
    FIRTypeI.call(this, 2, N);
    this.Wp_0 = Wp;
    this.Ws_0 = Ws;
    if (OmegaP >= OmegaS)
      throw IllegalArgumentException_init('OmegaP >= OmegaS ');
    if (OmegaP <= 0.0 || OmegaP >= 1.0)
      throw IllegalArgumentException_init('OmegaP: ' + OmegaP + ' out of bounds (0.0 < OmegaP < 1.0)');
    if (OmegaS <= 0.0 || OmegaS >= 1.0)
      throw IllegalArgumentException_init('OmegaS: ' + OmegaS + ' out of bounds (0.0 < OmegaS < 1.0)');
    this.bands[0][0] = 0.0;
    this.bands[0][1] = OmegaP;
    this.bands[1][0] = OmegaS;
    this.bands[1][1] = 1.0;
    this.generateCoefficients();
  }
  EquirippleLowpass.prototype.desiredResponse = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = 1.0;
    return retval;
  };
  EquirippleLowpass.prototype.weight = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = this.Wp_0;
    else if (this.LTE(this.bands[1][0], Omega) && this.LTE(Omega, this.bands[1][1]))
      retval = this.Ws_0;
    return retval;
  };
  EquirippleLowpass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EquirippleLowpass',
    interfaces: [FIRTypeI]
  };
  function FIRTypeI(numBands, nHalf) {
    EquirippleFIRFilter.call(this, numBands, nHalf + 1 | 0, (2 * nHalf | 0) + 1 | 0);
  }
  FIRTypeI.prototype.populateGrid = function (G) {
    var tmp$;
    tmp$ = G.gridSize - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      G.H[i] = this.desiredResponse(G.grid[i]);
      G.W[i] = this.weight(G.grid[i]);
    }
    G.containsZero = true;
    G.containsPi = true;
  };
  FIRTypeI.prototype.interpretCoefficients = function (coefficients) {
    var tmp$;
    var retval = new Float32Array(this.Nc);
    Sequence$Companion_getInstance().circularShiftArray(coefficients, this.N - 1 | 0);
    tmp$ = this.Nc;
    for (var i = 0; i <= tmp$; i++) {
      retval[i] = coefficients[i];
    }
    return retval;
  };
  FIRTypeI.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FIRTypeI',
    interfaces: [EquirippleFIRFilter]
  };
  function FIRTypeII(numBands, nHalf) {
    EquirippleFIRFilter.call(this, numBands, nHalf, 2 * nHalf | 0);
  }
  FIRTypeII.prototype.populateGrid = function (G) {
    var tmp$;
    tmp$ = G.gridSize - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var tmp$_0 = G.H;
      var tmp$_1 = this.desiredResponse(G.grid[i]);
      var x = G.grid[i] * math.PI / 2.0;
      tmp$_0[i] = tmp$_1 / Math_0.cos(x);
      var tmp$_2 = G.W;
      var tmp$_3 = this.weight(G.grid[i]);
      var x_0 = G.grid[i] * math.PI / 2.0;
      tmp$_2[i] = tmp$_3 * Math_0.cos(x_0);
    }
    var x_1 = G.grid[0];
    if (Math_0.abs(x_1) < 1.0E-6)
      G.containsZero = true;
    else
      G.containsZero = false;
    G.containsPi = false;
  };
  FIRTypeII.prototype.interpretCoefficients = function (coefficients) {
    var tmp$;
    var retval = new Float32Array(this.Nc);
    Sequence$Companion_getInstance().circularShiftArray(coefficients, this.N - 1 | 0);
    retval[0] = 0.5 * coefficients[0];
    tmp$ = this.Nc - 1 - 1 | 0;
    for (var i = 1; i <= tmp$; i++) {
      retval[i] = 0.5 * (coefficients[i] + coefficients[i - 1 | 0]);
    }
    retval[this.Nc - 1 | 0] = 0.5 * coefficients[this.Nc - 2 | 0];
    return retval;
  };
  FIRTypeII.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FIRTypeII',
    interfaces: [EquirippleFIRFilter]
  };
  function FIRTypeIII(numBands, nHalf) {
    EquirippleFIRFilter.call(this, numBands, nHalf, (2 * nHalf | 0) + 1 | 0);
  }
  FIRTypeIII.prototype.populateGrid = function (G) {
    var tmp$;
    tmp$ = G.gridSize - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var tmp$_0 = G.H;
      var tmp$_1 = this.desiredResponse(G.grid[i]);
      var x = G.grid[i] * math.PI;
      tmp$_0[i] = tmp$_1 / Math_0.sin(x);
      var tmp$_2 = G.W;
      var tmp$_3 = this.weight(G.grid[i]);
      var x_0 = G.grid[i] * math.PI;
      tmp$_2[i] = tmp$_3 * Math_0.sin(x_0);
    }
    G.containsZero = false;
    G.containsPi = false;
  };
  FIRTypeIII.prototype.interpretCoefficients = function (coefficients) {
    var tmp$;
    var retval = new Float32Array(this.Nc);
    Sequence$Companion_getInstance().circularShiftArray(coefficients, this.N - 1 | 0);
    retval[0] = -0.5 * coefficients[0];
    retval[1] = -0.5 * coefficients[1];
    tmp$ = this.Nc - 2 - 1 | 0;
    for (var i = 2; i <= tmp$; i++) {
      retval[i] = 0.5 * (coefficients[i - 2 | 0] - coefficients[i]);
    }
    retval[this.Nc - 2 | 0] = 0.5 * coefficients[this.Nc - 4 | 0];
    retval[this.Nc - 1 | 0] = 0.5 * coefficients[this.Nc - 3 | 0];
    return retval;
  };
  FIRTypeIII.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FIRTypeIII',
    interfaces: [EquirippleFIRFilter]
  };
  function FIRTypeIV(numBands, nHalf) {
    EquirippleFIRFilter.call(this, numBands, nHalf, 2 * nHalf | 0);
  }
  FIRTypeIV.prototype.populateGrid = function (G) {
    var tmp$;
    tmp$ = G.gridSize - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var tmp$_0 = G.H;
      var tmp$_1 = this.desiredResponse(G.grid[i]);
      var x = G.grid[i] * math.PI / 2.0;
      tmp$_0[i] = tmp$_1 / Math_0.sin(x);
      var tmp$_2 = G.W;
      var tmp$_3 = this.weight(G.grid[i]);
      var x_0 = G.grid[i] * math.PI / 2.0;
      tmp$_2[i] = tmp$_3 * Math_0.sin(x_0);
    }
    G.containsZero = false;
    var x_1 = G.grid[G.gridSize - 1 | 0] - 1.0;
    if (Math_0.abs(x_1) < 1.0E-6)
      G.containsPi = true;
    else
      G.containsPi = false;
  };
  FIRTypeIV.prototype.interpretCoefficients = function (coefficients) {
    var tmp$;
    var retval = new Float32Array(this.Nc);
    Sequence$Companion_getInstance().circularShiftArray(coefficients, this.N - 1 | 0);
    retval[0] = -0.5 * coefficients[0];
    tmp$ = this.Nc - 1 - 1 | 0;
    for (var i = 1; i <= tmp$; i++) {
      retval[i] = 0.5 * (coefficients[i - 1 | 0] - coefficients[i]);
    }
    retval[this.Nc - 1 | 0] = 0.5 * coefficients[this.Nc - 2 | 0];
    return retval;
  };
  FIRTypeIV.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FIRTypeIV',
    interfaces: [EquirippleFIRFilter]
  };
  function StaggeredDifferentiator(N, delta) {
    FIRTypeIV.call(this, 1, N);
    this.delta_0 = delta;
    this.bands[0][0] = 1.0 / (2 * N | 0);
    this.bands[0][1] = 1.0;
    this.generateCoefficients();
  }
  StaggeredDifferentiator.prototype.desiredResponse = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = -math.PI * Omega / this.delta_0;
    return retval;
  };
  StaggeredDifferentiator.prototype.weight = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = 1.0 / Omega;
    return retval;
  };
  StaggeredDifferentiator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StaggeredDifferentiator',
    interfaces: [FIRTypeIV]
  };
  function StaggeredHilbertTranform(N, OmegaP) {
    FIRTypeIV.call(this, 1, N);
    if (!(0.0 < OmegaP && OmegaP < 1.0))
      throw IllegalArgumentException_init('Check 0.0 < OmegaP < 1.0');
    this.bands[0][0] = OmegaP;
    this.bands[0][1] = 1.0;
    this.generateCoefficients();
  }
  StaggeredHilbertTranform.prototype.desiredResponse = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = 1.0;
    return retval;
  };
  StaggeredHilbertTranform.prototype.weight = function (Omega) {
    var retval = 0.0;
    if (this.LTE(this.bands[0][0], Omega) && this.LTE(Omega, this.bands[0][1]))
      retval = 1.0;
    return retval;
  };
  StaggeredHilbertTranform.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StaggeredHilbertTranform',
    interfaces: [FIRTypeIV]
  };
  function Allpass() {
    this.k = null;
    this.order = 0;
    this.state = null;
    this.T_ky1hz3$_0 = this.T_ky1hz3$_0;
  }
  Object.defineProperty(Allpass.prototype, 'T', {
    get: function () {
      if (this.T_ky1hz3$_0 == null)
        return throwUPAE('T');
      return this.T_ky1hz3$_0;
    },
    set: function (T) {
      this.T_ky1hz3$_0 = T;
    }
  });
  Allpass.prototype.initialize = function () {
    var tmp$;
    tmp$ = this.state;
    for (var i = 0; i !== tmp$.length; ++i) {
      this.state[i] = 0.0;
    }
  };
  Allpass.prototype.filterSingle = function (x) {
    var myX = x;
    var stage = this.order;
    while (stage >= 0) {
      if (stage > 0) {
        myX -= this.k[stage - 1 | 0] * this.state[stage - 1 | 0];
        this.state[stage] = this.k[stage - 1 | 0] * myX + this.state[stage - 1 | 0];
      }
       else {
        this.state[stage] = myX;
      }
      stage = stage - 1 | 0;
    }
    return this.state[this.order];
  };
  Allpass.prototype.filter = function (x) {
    for (var i = 0; i !== x.length; ++i) {
      x[i] = this.filterSingle(x[i]);
    }
  };
  Allpass.prototype.evaluate = function (omega) {
    var ejOmega = Complex$Companion_getInstance().exp(Complex_init(0.0, -omega));
    return this.T.evaluateComplex(ejOmega);
  };
  Allpass.prototype.groupDelay = function (Omega) {
    return this.T.discreteTimeGroupDelay(Omega);
  };
  Allpass.prototype.constructRationalRepresentation = function () {
    var tmp$, tmp$_0, tmp$_1;
    var a = new Float64Array(this.order + 1 | 0);
    var b = new Float64Array(this.order + 1 | 0);
    a[0] = 1.0;
    tmp$ = this.order - 1 | 0;
    for (var p = 0; p <= tmp$; p++) {
      for (var j = 0; j !== b.length; ++j) {
        b[j] = 0.0;
      }
      var i = 0;
      while (i <= p) {
        b[i] = b[i] + a[i];
        b[i + 1 | 0] = b[i + 1 | 0] + this.k[p] * a[p - i | 0];
        i = i + 1 | 0;
      }
      tmp$_0 = p + 2 | 0;
      for (var k = 0; k <= tmp$_0; k++) {
        a[k] = b[k];
      }
    }
    for (var j_0 = 0; j_0 !== b.length; ++j_0) {
      b[j_0] = 0.0;
    }
    tmp$_1 = this.order;
    for (var i_0 = 0; i_0 <= tmp$_1; i_0++)
      b[i_0] = a[this.order - i_0 | 0];
    this.T = Rational_init_0(Polynomial_init(b), Polynomial_init(a));
  };
  Allpass.prototype.rationalRepresentation = function () {
    return Rational_init_1(this.T);
  };
  Allpass.prototype.toString = function () {
    var tmp$;
    var out = 'Allpass _order:  ' + toString(this.order) + String.fromCharCode(toBoxedChar(10));
    tmp$ = this.order - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      if (i < this.order) {
        if (this.k[i] < 0.0)
          out += '  ' + toString(this.k[i]) + '  ' + toString(this.state[i]) + String.fromCharCode(toBoxedChar(10));
        else
          out += '   ' + toString(this.k[i]) + '  ' + toString(this.state[i]) + String.fromCharCode(toBoxedChar(10));
      }
       else
        out += '             ' + toString(this.state[i]) + String.fromCharCode(toBoxedChar(10));
    }
    return out;
  };
  Allpass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Allpass',
    interfaces: []
  };
  function Allpass_init(order, $this) {
    $this = $this || Object.create(Allpass.prototype);
    Allpass.call($this);
    $this.order = order;
    $this.k = new Float64Array(order);
    $this.state = new Float64Array(order + 1 | 0);
    $this.constructRationalRepresentation();
    return $this;
  }
  function Allpass_init_0(A, $this) {
    $this = $this || Object.create(Allpass.prototype);
    Allpass.call($this);
    $this.k = A.reflectionCoefficients();
    $this.order = $this.k.length;
    $this.state = new Float64Array($this.order + 1 | 0);
    $this.constructRationalRepresentation();
    return $this;
  }
  function Allpass_init_1(k, $this) {
    $this = $this || Object.create(Allpass.prototype);
    Allpass.call($this);
    $this.k = k.slice();
    $this.order = $this.k.length;
    $this.state = new Float64Array($this.order + 1 | 0);
    $this.constructRationalRepresentation();
    return $this;
  }
  function AnalogButterworth(order) {
    AnalogPrototype.call(this);
    var tmp$;
    var nRealPoles = order - (2 * (order / 2 | 0) | 0) | 0;
    var nComplexPolePairs = order / 2 | 0;
    var nPoles = nRealPoles + (2 * nComplexPolePairs | 0) | 0;
    if (nRealPoles === 1) {
      var td = new Float64Array([1.0, 1.0]);
      this.addSection(Rational_init_0(Polynomial_init_2(1.0), Polynomial_init(td)));
    }
    var dAngle = math.PI / nPoles;
    tmp$ = nComplexPolePairs - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var angle = -math.PI / 2 + dAngle / 2 * (1 + nRealPoles | 0) + i * dAngle;
      var td_0 = new Float64Array([1.0, -2 * Math_0.sin(angle), 1.0]);
      this.addSection(Rational_init_0(Polynomial_init_2(1.0), Polynomial_init(td_0)));
    }
  }
  AnalogButterworth.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnalogButterworth',
    interfaces: [AnalogPrototype]
  };
  function AnalogChebyshevI(order, epsilon) {
    AnalogPrototype.call(this);
    var tmp$;
    var x = 1.0 + epsilon * epsilon;
    var alpha = (1.0 + Math_0.sqrt(x)) / epsilon;
    var x_0 = 1.0 / order;
    var p = Math_0.pow(alpha, x_0);
    var a = 0.5 * (p - 1 / p);
    var b = 0.5 * (p + 1 / p);
    println('alpha: ' + toString(alpha));
    println('p:     ' + toString(p));
    println('a:     ' + toString(a));
    println('b:     ' + toString(b));
    var nRealPoles = order - (2 * (order / 2 | 0) | 0) | 0;
    var nComplexPolePairs = order / 2 | 0;
    var nPoles = nRealPoles + (2 * nComplexPolePairs | 0) | 0;
    if (nRealPoles === 1) {
      var td = new Float64Array([a, 1.0]);
      this.addSection(Rational_init_0(Polynomial_init_2(1.0), Polynomial_init(td)));
    }
    var dAngle = math.PI / nPoles;
    tmp$ = nComplexPolePairs - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var angle = -math.PI / 2 + dAngle / 2 * (1 + nRealPoles | 0) + i * dAngle;
      var pole = Complex_init(a * Math_0.sin(angle), b * Math_0.cos(angle));
      var td_0 = new Float64Array([pole.real() * pole.real() + pole.imag() * pole.imag(), -2 * pole.real(), 1.0]);
      this.addSection(Rational_init_0(Polynomial_init_2(1.0), Polynomial_init(td_0)));
    }
    var tmp$_0 = this.sections.get_za3lpa$(0);
    var x_1 = order - 1 | 0;
    tmp$_0.timesEqualsReal(1.0 / (Math_0.pow(2.0, x_1) * epsilon));
  }
  AnalogChebyshevI.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnalogChebyshevI',
    interfaces: [AnalogPrototype]
  };
  function AnalogChebyshevII(order, epsilon) {
    AnalogPrototype.call(this);
    var tmp$;
    var x = 1.0 + epsilon * epsilon;
    var alpha = (1.0 + Math_0.sqrt(x)) / epsilon;
    var x_0 = 1.0 / order;
    var p = Math_0.pow(alpha, x_0);
    var a = 0.5 * (p - 1 / p);
    var b = 0.5 * (p + 1 / p);
    println('alpha: ' + toString(alpha));
    println('p:     ' + toString(p));
    println('a:     ' + toString(a));
    println('b:     ' + toString(b));
    var nRealPoles = order - (2 * (order / 2 | 0) | 0) | 0;
    var nComplexPolePairs = order / 2 | 0;
    var nPoles = nRealPoles + (2 * nComplexPolePairs | 0) | 0;
    if (nRealPoles === 1) {
      var td = new Float64Array([1.0 / a, 1.0]);
      this.addSection(Rational_init_0(Polynomial_init_2(1.0), Polynomial_init(td)));
    }
    var dAngle = math.PI / nPoles;
    tmp$ = nComplexPolePairs - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var angle = -math.PI / 2 + dAngle / 2 * (1 + nRealPoles | 0) + i * dAngle;
      var pole = Complex$Companion_getInstance().divideRealComplex(1.0, Complex_init(a * Math_0.sin(angle), b * Math_0.cos(angle)));
      var td_0 = new Float64Array([pole.real() * pole.real() + pole.imag() * pole.imag(), -2 * pole.real(), 1.0]);
      var x_1 = ((2 * i | 0) + 1 | 0) * math.PI / (2 * order | 0);
      var zeroimag = 1.0 / Math_0.cos(x_1);
      var tn = new Float64Array([zeroimag * zeroimag, 0.0, 1.0]);
      this.addSection(Rational_init_0(Polynomial_init(tn), Polynomial_init(td_0)));
    }
    var DCvalue = this.evaluate(0.0).abs();
    this.sections.get_za3lpa$(0).timesEqualsReal(1.0 / DCvalue);
  }
  AnalogChebyshevII.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnalogChebyshevII',
    interfaces: [AnalogPrototype]
  };
  function AnalogPrototype() {
    this.sections = null;
    this._T_a2nkto$_0 = null;
    this.sections = ArrayList_init();
  }
  Object.defineProperty(AnalogPrototype.prototype, 'T', {
    get: function () {
      var tmp$;
      if (this._T_a2nkto$_0 == null) {
        this._T_a2nkto$_0 = this.computeTransferFunction();
      }
      tmp$ = this._T_a2nkto$_0;
      if (tmp$ == null) {
        throw RuntimeException_init('SHould not happen, _T is null');
      }
      return tmp$;
    }
  });
  AnalogPrototype.prototype.addSection = function (R) {
    this.sections.add_11rb$(R);
    this._T_a2nkto$_0 = null;
  };
  AnalogPrototype.prototype.nSections = function () {
    return this.sections.size;
  };
  AnalogPrototype.prototype.getSection = function (index) {
    return Rational_init_1(this.sections.get_za3lpa$(index));
  };
  AnalogPrototype.prototype.lptolp = function (omega0) {
    var tmp$;
    var tn = new Float64Array([0.0, 1.0]);
    var td = new Float64Array([omega0]);
    var T = Rational_init(tn, td);
    var retval = new AnalogPrototype();
    tmp$ = this.sections;
    for (var i = 0; i !== tmp$.size; ++i) {
      retval.addSection(this.sections.get_za3lpa$(i).mapRational(T));
    }
    return retval;
  };
  AnalogPrototype.prototype.lptohp = function (omega0) {
    var tmp$;
    var tn = new Float64Array([omega0]);
    var td = new Float64Array([0.0, 1.0]);
    var T = Rational_init(tn, td);
    var retval = new AnalogPrototype();
    tmp$ = this.sections;
    for (var i = 0; i !== tmp$.size; ++i) {
      retval.addSection(this.sections.get_za3lpa$(i).mapRational(T));
    }
    return retval;
  };
  AnalogPrototype.prototype.lptobp = function (omega1, omega2) {
    var tmp$;
    var BW = omega2 - omega1;
    var prod = omega1 * omega2;
    var tn = new Float64Array([prod, 0.0, 1.0]);
    var td = new Float64Array([0.0, BW]);
    var T = Rational_init(tn, td);
    var retval = new AnalogPrototype();
    var A = 1.0;
    tmp$ = this.sections;
    for (var i = 0; i !== tmp$.size; ++i) {
      var section = this.sections.get_za3lpa$(i);
      var Tsection = section.mapRational(T);
      A *= Tsection.canonicalForm();
      var order = section.order();
      if (order[0] < 2 && order[1] < 2)
        retval.addSection(Tsection);
      else if (order[1] === 2) {
        var DT = this.lptobpFactors(section.denominator(), BW, prod);
        var t1 = new Float64Array([0.0, 1.0]);
        if (order[0] === 0) {
          retval.addSection(Rational_init_0(Polynomial_init(t1), DT[0]));
          retval.addSection(Rational_init_0(Polynomial_init(t1), DT[1]));
        }
         else if (order[0] === 1) {
          retval.addSection(Rational_init_0(Polynomial_init(t1), DT[0]));
          var t2 = new Float64Array(3);
          var tc = Tsection.numerator().coefficients();
          for (var j = 0; j <= 2; j++)
            t2[j] = tc[j + 1 | 0];
          retval.addSection(Rational_init_0(Polynomial_init(t2), DT[1]));
        }
         else if (order[0] === 2) {
          var NT = this.lptobpFactors(section.numerator(), BW, prod);
          retval.addSection(Rational_init_0(NT[0], DT[0]));
          retval.addSection(Rational_init_0(NT[1], DT[1]));
        }
      }
    }
    retval.sections.get_za3lpa$(0).timesEqualsReal(A);
    return retval;
  };
  AnalogPrototype.prototype.lptobpFactors = function (P, BW, prod) {
    var p = P.coefficients();
    var c = p[0] / p[2];
    var b = p[1] / p[2];
    var discriminant = b * b - 4 * c;
    var t0;
    var t1;
    if (discriminant >= 0.0) {
      var root = (-b + Math_0.sqrt(discriminant)) / 2.0;
      var f1 = root * BW / 2.0;
      var f2 = f1 * f1 - prod;
      var C = Complex_init_0(f1).plusComplex(Complex$Companion_getInstance().sqrt(Complex_init_0(f2)));
      t0 = Polynomial_init(new Float64Array([C.conjugate().timesComplex(C).real(), -2.0 * C.real(), 1.0]));
      root = (-b - Math_0.sqrt(discriminant)) / 2.0;
      f1 = root * BW / 2.0;
      f2 = f1 * f1 - prod;
      C = Complex_init_0(f1).plusComplex(Complex$Companion_getInstance().sqrt(Complex_init_0(f2)));
      t1 = Polynomial_init(new Float64Array([C.conjugate().timesComplex(C).real(), -2.0 * C.real(), 1.0]));
    }
     else {
      var tmp$ = -b / 2.0;
      var x = -discriminant;
      var root_0 = Complex_init(tmp$, Math_0.sqrt(x) / 2.0);
      var f1_0 = root_0.timesReal(BW / 2.0);
      var f2_0 = f1_0.timesComplex(f1_0).minusReal(prod);
      var C_0 = f1_0.plusComplex(Complex$Companion_getInstance().sqrt(f2_0));
      t0 = Polynomial_init(new Float64Array([C_0.conjugate().timesComplex(C_0).real(), -2.0 * C_0.real(), 1.0]));
      C_0 = f1_0.minusComplex(Complex$Companion_getInstance().sqrt(f2_0));
      t1 = Polynomial_init(new Float64Array([C_0.conjugate().timesComplex(C_0).real(), -2.0 * C_0.real(), 1.0]));
    }
    return [Polynomial_init_0(t0), Polynomial_init_0(t1)];
  };
  AnalogPrototype.prototype.computeTransferFunction = function () {
    var tmp$;
    var T = Rational_init_2(1.0);
    tmp$ = this.sections;
    for (var i = 0; i !== tmp$.size; ++i) {
      T.timesEqualsRational(this.sections.get_za3lpa$(i));
    }
    return T;
  };
  Object.defineProperty(AnalogPrototype.prototype, 'transferFunction', {
    get: function () {
      return Rational_init_1(this.T);
    }
  });
  AnalogPrototype.prototype.evaluate = function (omega) {
    return this.T.evaluateComplex(Complex_init(0.0, omega));
  };
  AnalogPrototype.prototype.groupDelay = function (omega) {
    return this.T.groupDelay(omega);
  };
  AnalogPrototype.prototype.toString = function () {
    var tmp$;
    var out = 'AnalogPrototype: \n';
    tmp$ = this.sections;
    for (var i = 0; i !== tmp$.size; ++i) {
      out += '  section ' + i + ':' + String.fromCharCode(toBoxedChar(10));
      out += this.sections.get_za3lpa$(i);
    }
    return out;
  };
  AnalogPrototype.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnalogPrototype',
    interfaces: []
  };
  function Butterworth(order, type, f1, f2, delta) {
    IIRFilter.call(this, new AnalogButterworth(order), type, f1, f2, delta);
  }
  Butterworth.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Butterworth',
    interfaces: [IIRFilter]
  };
  function ChebyshevI(order, epsilon, type, f1, f2, delta) {
    IIRFilter.call(this, new AnalogChebyshevI(order, epsilon), type, f1, f2, delta);
  }
  ChebyshevI.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ChebyshevI',
    interfaces: [IIRFilter]
  };
  function ChebyshevII(order, epsilon, type, f1, f2, delta) {
    IIRFilter.call(this, new AnalogChebyshevII(order, epsilon), type, f1, f2, delta);
  }
  ChebyshevII.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ChebyshevII',
    interfaces: [IIRFilter]
  };
  function Complex() {
    Complex$Companion_getInstance();
    this.real_0 = 0;
    this.imag_0 = 0;
  }
  Complex.prototype.real = function () {
    return this.real_0;
  };
  Complex.prototype.imag = function () {
    return this.imag_0;
  };
  Complex.prototype.abs = function () {
    return Complex$Companion_getInstance().abs(this);
  };
  Complex.prototype.angle = function () {
    return Complex$Companion_getInstance().angle(this);
  };
  Complex.prototype.timesComplex = function (c) {
    return Complex$Companion_getInstance().multiplyComplexComplex(this, c);
  };
  Complex.prototype.timesReal = function (a) {
    return Complex$Companion_getInstance().multiplyComplexReal(this, a);
  };
  Complex.prototype.conjugate = function () {
    return Complex$Companion_getInstance().conjugate(this);
  };
  Complex.prototype.plusComplex = function (c) {
    return Complex$Companion_getInstance().addComplexComplex(this, c);
  };
  Complex.prototype.plusReal = function (a) {
    return Complex$Companion_getInstance().addComplexReal(this, a);
  };
  Complex.prototype.minusComplex = function (c) {
    return Complex$Companion_getInstance().subtractComplexComplex(this, c);
  };
  Complex.prototype.minusReal = function (a) {
    return Complex$Companion_getInstance().subtractComplexReal(this, a);
  };
  Complex.prototype.overReal = function (a) {
    return Complex$Companion_getInstance().divideComplexReal(this, a);
  };
  Complex.prototype.overComplex = function (c) {
    return Complex$Companion_getInstance().divideComplexComplex(this, c);
  };
  Complex.prototype.plusEqualsReal = function (a) {
    this.real_0 += a;
  };
  Complex.prototype.plusEqualsComplex = function (c) {
    this.real_0 += c.real_0;
    this.imag_0 += c.imag_0;
  };
  Complex.prototype.minusEqualsReal = function (a) {
    this.real_0 -= a;
  };
  Complex.prototype.minusEqualsComplex = function (c) {
    this.real_0 -= c.real_0;
    this.imag_0 -= c.imag_0;
  };
  Complex.prototype.timesEqualsReal = function (a) {
    this.real_0 *= a;
    this.imag_0 *= a;
  };
  Complex.prototype.timesEqualsComplex = function (c) {
    var tmp = this.real_0 * c.real_0 - this.imag_0 * c.imag_0;
    this.imag_0 = this.real_0 * c.imag_0 + this.imag_0 * c.real_0;
    this.real_0 = tmp;
  };
  Complex.prototype.divideEqualsReal = function (a) {
    this.real_0 /= a;
    this.imag_0 /= a;
  };
  Complex.prototype.divideEqualsComplex = function (c) {
    var scale = c.real_0 * c.real_0 + c.imag_0 * c.imag_0;
    var tmp = c.real_0 * this.real_0 + c.imag_0 * this.imag_0;
    this.imag_0 = c.real_0 * this.imag_0 - c.imag_0 * this.real_0;
    this.real_0 = tmp;
    this.divideEqualsReal(scale);
  };
  Complex.prototype.toString = function () {
    return '' + toString(this.real_0) + '  +  i * ' + toString(this.imag_0) + '\n';
  };
  function Complex$Companion() {
    Complex$Companion_instance = this;
  }
  Complex$Companion.prototype.ComplexFromPolar = function (r, phi) {
    return Complex_init(r * Math_0.cos(phi), r * Math_0.sin(phi));
  };
  Complex$Companion.prototype.addRealComplex = function (a, c) {
    return Complex_init(a + c.real_0, c.imag_0);
  };
  Complex$Companion.prototype.addComplexReal = function (c, a) {
    return this.addRealComplex(a, c);
  };
  Complex$Companion.prototype.subtractComplexReal = function (c, a) {
    return Complex_init(c.real_0 - a, c.imag_0);
  };
  Complex$Companion.prototype.subtractRealComplex = function (a, c) {
    return Complex_init(a - c.real_0, c.imag_0);
  };
  Complex$Companion.prototype.unaryMinus = function (c) {
    return Complex_init(-c.real_0, -c.imag_0);
  };
  Complex$Companion.prototype.multiplyRealComplex = function (a, c) {
    return Complex_init(a * c.real_0, a * c.imag_0);
  };
  Complex$Companion.prototype.multiplyComplexReal = function (c, a) {
    return this.multiplyRealComplex(a, c);
  };
  Complex$Companion.prototype.addComplexComplex = function (c1, c2) {
    return Complex_init(c1.real_0 + c2.real_0, c1.imag_0 + c2.imag_0);
  };
  Complex$Companion.prototype.subtractComplexComplex = function (c1, c2) {
    return Complex_init(c1.real_0 - c2.real_0, c1.imag_0 - c2.imag_0);
  };
  Complex$Companion.prototype.multiplyComplexComplex = function (c1, c2) {
    return Complex_init(c1.real_0 * c2.real_0 - c1.imag_0 * c2.imag_0, c1.real_0 * c2.imag_0 + c1.imag_0 * c2.real_0);
  };
  Complex$Companion.prototype.divideComplexReal = function (c, a) {
    return Complex_init(c.real_0 / a, c.imag_0 / a);
  };
  Complex$Companion.prototype.divideRealComplex = function (a, c) {
    var scale = c.real_0 * c.real_0 + c.imag_0 * c.imag_0;
    return Complex_init(a * c.real_0 / scale, a * -c.imag_0 / scale);
  };
  Complex$Companion.prototype.divideComplexComplex = function (c1, c2) {
    var scale = c2.real_0 * c2.real_0 + c2.imag_0 * c2.imag_0;
    return Complex_init((c1.real_0 * c2.real_0 + c1.imag_0 * c2.imag_0) / scale, (c1.imag_0 * c2.real_0 - c1.real_0 * c2.imag_0) / scale);
  };
  Complex$Companion.prototype.sqrt = function (c) {
    var x = this.abs(c);
    return this.ComplexFromPolar(Math_0.sqrt(x), this.angle(c) / 2.0);
  };
  Complex$Companion.prototype.abs = function (c) {
    var x = c.real_0 * c.real_0 + c.imag_0 * c.imag_0;
    return Math_0.sqrt(x);
  };
  Complex$Companion.prototype.angle = function (c) {
    var y = c.imag_0;
    var x = c.real_0;
    return Math_0.atan2(y, x);
  };
  Complex$Companion.prototype.exp = function (c) {
    var x = c.real_0;
    var r = Math_0.exp(x);
    var x_0 = c.imag_0;
    var tmp$ = r * Math_0.cos(x_0);
    var x_1 = c.imag_0;
    return Complex_init(tmp$, r * Math_0.sin(x_1));
  };
  Complex$Companion.prototype.conjugate = function (c) {
    return Complex_init(c.real_0, -c.imag_0);
  };
  Complex$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Complex$Companion_instance = null;
  function Complex$Companion_getInstance() {
    if (Complex$Companion_instance === null) {
      new Complex$Companion();
    }
    return Complex$Companion_instance;
  }
  Complex.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Complex',
    interfaces: []
  };
  function Complex_init(real, imag, $this) {
    $this = $this || Object.create(Complex.prototype);
    Complex.call($this);
    $this.real_0 = real;
    $this.imag_0 = imag;
    return $this;
  }
  function Complex_init_0(real, $this) {
    $this = $this || Object.create(Complex.prototype);
    Complex.call($this);
    $this.real_0 = real;
    $this.imag_0 = 0.0;
    return $this;
  }
  function IIRFilter(baseFilter, type, f1, f2, delta) {
    this.sections = null;
    this.T = null;
    var tmp$;
    var prototype;
    switch (type.name) {
      case 'LOWPASS':
        prototype = baseFilter.lptolp(this.warp(f2, delta));
        break;
      case 'BANDPASS':
        prototype = baseFilter.lptobp(this.warp(f1, delta), this.warp(f2, delta));
        break;
      case 'HIGHPASS':
        prototype = baseFilter.lptohp(this.warp(f1, delta));
        break;
      default:throw IllegalStateException_init('Undefined passband type');
    }
    var tn = new Float64Array(2);
    var td = new Float64Array(2);
    tn[0] = 1.0;
    tn[1] = -1.0;
    td[0] = 1.0;
    td[1] = 1.0;
    var S = Rational_init(tn, td);
    this.T = Rational_init_2(1.0);
    this.sections = ArrayList_init();
    tmp$ = prototype.nSections() - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var R = prototype.getSection(i).mapRational(S);
      this.T.timesEqualsRational(R);
      var cn = R.numerator().coefficients();
      var cd = R.denominator().coefficients();
      var s = 1.0;
      if (cd[0] !== 0.0)
        s = cd[0];
      var b0 = cn[0] / s;
      var b1 = 0.0;
      if (cn.length >= 2)
        b1 = cn[1] / s;
      var b2 = 0.0;
      if (cn.length >= 3)
        b2 = cn[2] / s;
      var a1 = 0.0;
      if (cd.length >= 2)
        a1 = cd[1] / s;
      var a2 = 0.0;
      if (cd.length >= 3)
        a2 = cd[2] / s;
      this.sections.add_11rb$(new SecondOrderSection(b0, b1, b2, a1, a2));
    }
  }
  IIRFilter.prototype.initialize = function () {
    var tmp$;
    tmp$ = this.sections;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.sections.get_za3lpa$(i).initialize();
    }
  };
  IIRFilter.prototype.filterNextSample = function (x) {
    var tmp$;
    var retval = this.sections.get_za3lpa$(0).filterSingle(x);
    tmp$ = this.sections.size - 1 | 0;
    for (var i = 1; i <= tmp$; i++)
      retval = this.sections.get_za3lpa$(i).filterSingle(retval);
    return retval;
  };
  IIRFilter.prototype.filter = function (x, y) {
    var tmp$;
    for (var i = 0; i !== y.length; ++i) {
      y[i] = 0.0;
    }
    this.sections.get_za3lpa$(0).filter(x, y);
    tmp$ = this.sections.size - 1 | 0;
    for (var i_0 = 1; i_0 <= tmp$; i_0++) {
      this.sections.get_za3lpa$(i_0).filter(y, y);
    }
  };
  IIRFilter.prototype.filterInPlace = function (x) {
    var tmp$;
    tmp$ = this.sections.iterator();
    while (tmp$.hasNext()) {
      var section = tmp$.next();
      section.filter(x, x);
    }
  };
  IIRFilter.prototype.evaluate = function (Omega) {
    var ejOmega = Complex$Companion_getInstance().exp(Complex_init(0.0, -Omega));
    return this.T.evaluateComplex(ejOmega);
  };
  IIRFilter.prototype.groupDelay = function (Omega) {
    return this.T.discreteTimeGroupDelay(Omega);
  };
  IIRFilter.prototype.toString = function () {
    var tmp$;
    var out = 'IIR Filter:\n';
    tmp$ = this.sections;
    for (var i = 0; i !== tmp$.size; ++i) {
      out += '\n  Section ' + toString(i) + '\n';
      out += this.sections.get_za3lpa$(i);
      out += String.fromCharCode(10);
    }
    return out;
  };
  IIRFilter.prototype.warp = function (f, delta) {
    var x = math.PI * f * delta;
    return Math_0.tan(x);
  };
  IIRFilter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IIRFilter',
    interfaces: []
  };
  function PassbandType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function PassbandType_initFields() {
    PassbandType_initFields = function () {
    };
    PassbandType$LOWPASS_instance = new PassbandType('LOWPASS', 0);
    PassbandType$BANDPASS_instance = new PassbandType('BANDPASS', 1);
    PassbandType$HIGHPASS_instance = new PassbandType('HIGHPASS', 2);
  }
  var PassbandType$LOWPASS_instance;
  function PassbandType$LOWPASS_getInstance() {
    PassbandType_initFields();
    return PassbandType$LOWPASS_instance;
  }
  var PassbandType$BANDPASS_instance;
  function PassbandType$BANDPASS_getInstance() {
    PassbandType_initFields();
    return PassbandType$BANDPASS_instance;
  }
  var PassbandType$HIGHPASS_instance;
  function PassbandType$HIGHPASS_getInstance() {
    PassbandType_initFields();
    return PassbandType$HIGHPASS_instance;
  }
  PassbandType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PassbandType',
    interfaces: [Enum]
  };
  function PassbandType$values() {
    return [PassbandType$LOWPASS_getInstance(), PassbandType$BANDPASS_getInstance(), PassbandType$HIGHPASS_getInstance()];
  }
  PassbandType.values = PassbandType$values;
  function PassbandType$valueOf(name) {
    switch (name) {
      case 'LOWPASS':
        return PassbandType$LOWPASS_getInstance();
      case 'BANDPASS':
        return PassbandType$BANDPASS_getInstance();
      case 'HIGHPASS':
        return PassbandType$HIGHPASS_getInstance();
      default:throwISE('No enum constant com.oregondsp.signalProcessing.filter.iir.PassbandType.' + name);
    }
  }
  PassbandType.valueOf_61zpoe$ = PassbandType$valueOf;
  function SecondOrderSection(b0, b1, b2, a1, a2) {
    this.b0_8be2vx$ = b0;
    this.b1_8be2vx$ = b1;
    this.b2_8be2vx$ = b2;
    this.a1_8be2vx$ = a1;
    this.a2_8be2vx$ = a2;
    this.s1_8be2vx$ = 0;
    this.s2_8be2vx$ = 0;
    this.initialize();
  }
  SecondOrderSection.prototype.initialize = function () {
    this.s1_8be2vx$ = 0.0;
    this.s2_8be2vx$ = 0.0;
  };
  SecondOrderSection.prototype.filterSingle = function (x) {
    var s0 = x - this.a1_8be2vx$ * this.s1_8be2vx$ - this.a2_8be2vx$ * this.s2_8be2vx$;
    var retval = this.b0_8be2vx$ * s0 + this.b1_8be2vx$ * this.s1_8be2vx$ + this.b2_8be2vx$ * this.s2_8be2vx$;
    this.s2_8be2vx$ = this.s1_8be2vx$;
    this.s1_8be2vx$ = s0;
    return retval;
  };
  SecondOrderSection.prototype.filter = function (x, y) {
    var tmp$;
    var s0;
    var n = Math_0.min(x.length, y.length);
    tmp$ = n - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      s0 = x[i] - this.a1_8be2vx$ * this.s1_8be2vx$ - this.a2_8be2vx$ * this.s2_8be2vx$;
      y[i] = this.b0_8be2vx$ * s0 + this.b1_8be2vx$ * this.s1_8be2vx$ + this.b2_8be2vx$ * this.s2_8be2vx$;
      this.s2_8be2vx$ = this.s1_8be2vx$;
      this.s1_8be2vx$ = s0;
    }
  };
  SecondOrderSection.prototype.toString = function () {
    var out = '  coefficients: \n';
    out += '    b0: ' + toString(this.b0_8be2vx$) + String.fromCharCode(toBoxedChar(10));
    out += '    b1: ' + toString(this.b1_8be2vx$) + String.fromCharCode(toBoxedChar(10));
    out += '    b2: ' + toString(this.b2_8be2vx$) + String.fromCharCode(toBoxedChar(10));
    out += String.fromCharCode(10);
    out += '    a1: ' + toString(this.a1_8be2vx$) + String.fromCharCode(toBoxedChar(10));
    out += '    a2: ' + toString(this.a2_8be2vx$) + String.fromCharCode(toBoxedChar(10));
    out += '\n  states:  \n';
    out += '    s1: ' + toString(this.s1_8be2vx$) + String.fromCharCode(toBoxedChar(10));
    out += '    s2: ' + toString(this.s2_8be2vx$) + String.fromCharCode(toBoxedChar(10));
    return out;
  };
  SecondOrderSection.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SecondOrderSection',
    interfaces: []
  };
  function ThiranAllpass(N, D) {
    Allpass_init(N, this);
    var a = new Float64Array(N + 1 | 0);
    a[0] = 1.0;
    for (var i = 1; i <= N; i++) {
      var prod = 1.0;
      for (var n = 0; n <= N; n++) {
        prod *= (D - N + n) / (D - N + i + n);
      }
      var $receiver = -1.0;
      a[i] = Math_0.pow($receiver, i) * (this.factorial_0(N) / Kotlin.imul(this.factorial_0(N - i | 0), this.factorial_0(i)) | 0) * prod;
    }
    var P = Polynomial_init(a);
    this.k = P.reflectionCoefficients();
    this.constructRationalRepresentation();
  }
  ThiranAllpass.prototype.factorial_0 = function (n) {
    var retval = 1;
    if (n > 1) {
      for (var i = 2; i <= n; i++)
        retval = Kotlin.imul(retval, i);
    }
    return retval;
  };
  ThiranAllpass.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ThiranAllpass',
    interfaces: [Allpass]
  };
  var package$com = _.com || (_.com = {});
  var package$oregondsp = package$com.oregondsp || (package$com.oregondsp = {});
  var package$signalProcessing = package$oregondsp.signalProcessing || (package$oregondsp.signalProcessing = {});
  package$signalProcessing.HammingWindow = HammingWindow;
  package$signalProcessing.HanningWindow = HanningWindow;
  Object.defineProperty(Sequence, 'Companion', {
    get: Sequence$Companion_getInstance
  });
  package$signalProcessing.Sequence_init_q3cr5i$ = Sequence_init;
  package$signalProcessing.Sequence_init_za3lpa$ = Sequence_init_0;
  package$signalProcessing.Sequence = Sequence;
  package$signalProcessing.Window_init_q3cr5i$ = Window_init;
  package$signalProcessing.Window_init_za3lpa$ = Window_init_0;
  package$signalProcessing.Window = Window;
  Object.defineProperty(CDFT, 'Companion', {
    get: CDFT$Companion_getInstance
  });
  var package$fft = package$signalProcessing.fft || (package$signalProcessing.fft = {});
  package$fft.CDFT_init_za3lpa$ = CDFT_init;
  package$fft.CDFT_init_1bpiay$ = CDFT_init_0;
  package$fft.CDFT = CDFT;
  Object.defineProperty(CDFTsr, 'Companion', {
    get: CDFTsr$Companion_getInstance
  });
  package$fft.CDFTsr_init_qe1546$ = CDFTsr_init;
  package$fft.CDFTsr = CDFTsr;
  Object.defineProperty(CDFTsr16, 'Companion', {
    get: CDFTsr16$Companion_getInstance
  });
  package$fft.CDFTsr16 = CDFTsr16;
  Object.defineProperty(CDFTsr8, 'Companion', {
    get: CDFTsr8$Companion_getInstance
  });
  package$fft.CDFTsr8 = CDFTsr8;
  Object.defineProperty(RDFT, 'Companion', {
    get: RDFT$Companion_getInstance
  });
  package$fft.RDFT = RDFT;
  Object.defineProperty(LagrangePolynomial, 'Companion', {
    get: LagrangePolynomial$Companion_getInstance
  });
  var package$filter = package$signalProcessing.filter || (package$signalProcessing.filter = {});
  package$filter.LagrangePolynomial = LagrangePolynomial;
  package$filter.Polynomial_init_gf7tl1$ = Polynomial_init;
  package$filter.Polynomial_init_4jnjkl$ = Polynomial_init_0;
  package$filter.Polynomial_init_za3lpa$ = Polynomial_init_1;
  package$filter.Polynomial_init_14dthe$ = Polynomial_init_2;
  package$filter.Polynomial = Polynomial;
  package$filter.Rational_init_g9g6do$ = Rational_init;
  package$filter.Rational_init_m5e5l8$ = Rational_init_0;
  package$filter.Rational_init_naom1d$ = Rational_init_1;
  package$filter.Rational_init_14dthe$ = Rational_init_2;
  package$filter.Rational = Rational;
  var package$fir = package$filter.fir || (package$filter.fir = {});
  package$fir.ComplexAnalyticSignal = ComplexAnalyticSignal;
  package$fir.Interpolator = Interpolator;
  package$fir.OverlapAdd_init_9752rg$ = OverlapAdd_init;
  package$fir.OverlapAdd_init_jkrx4s$ = OverlapAdd_init_0;
  package$fir.OverlapAdd = OverlapAdd;
  var package$equiripple = package$fir.equiripple || (package$fir.equiripple = {});
  package$equiripple.CenteredDifferentiator = CenteredDifferentiator;
  package$equiripple.CenteredHilbertTransform = CenteredHilbertTransform;
  Object.defineProperty(DesignGrid, 'Companion', {
    get: DesignGrid$Companion_getInstance
  });
  package$equiripple.DesignGrid = DesignGrid;
  package$equiripple.EquirippleBandpass = EquirippleBandpass;
  Object.defineProperty(package$equiripple, 'EquirippleDesigner', {
    get: EquirippleDesigner_getInstance
  });
  Object.defineProperty(EquirippleFIRFilter, 'Companion', {
    get: EquirippleFIRFilter$Companion_getInstance
  });
  package$equiripple.EquirippleFIRFilter = EquirippleFIRFilter;
  package$equiripple.EquirippleHalfBand = EquirippleHalfBand;
  package$equiripple.EquirippleHalfBandPrototype = EquirippleHalfBandPrototype;
  package$equiripple.EquirippleHighpass = EquirippleHighpass;
  package$equiripple.EquirippleLowpass = EquirippleLowpass;
  package$equiripple.FIRTypeI = FIRTypeI;
  package$equiripple.FIRTypeII = FIRTypeII;
  package$equiripple.FIRTypeIII = FIRTypeIII;
  package$equiripple.FIRTypeIV = FIRTypeIV;
  package$equiripple.StaggeredDifferentiator = StaggeredDifferentiator;
  package$equiripple.StaggeredHilbertTranform = StaggeredHilbertTranform;
  var package$iir = package$filter.iir || (package$filter.iir = {});
  package$iir.Allpass_init_za3lpa$ = Allpass_init;
  package$iir.Allpass_init_4jnjkl$ = Allpass_init_0;
  package$iir.Allpass_init_gf7tl1$ = Allpass_init_1;
  package$iir.Allpass = Allpass;
  package$iir.AnalogButterworth = AnalogButterworth;
  package$iir.AnalogChebyshevI = AnalogChebyshevI;
  package$iir.AnalogChebyshevII = AnalogChebyshevII;
  package$iir.AnalogPrototype = AnalogPrototype;
  package$iir.Butterworth = Butterworth;
  package$iir.ChebyshevI = ChebyshevI;
  package$iir.ChebyshevII = ChebyshevII;
  Object.defineProperty(Complex, 'Companion', {
    get: Complex$Companion_getInstance
  });
  package$iir.Complex_init = Complex_init;
  package$iir.Complex_fromReal = Complex_init_0;
  package$iir.Complex = Complex;
  package$iir.IIRFilter = IIRFilter;
  Object.defineProperty(PassbandType, 'LOWPASS', {
    get: PassbandType$LOWPASS_getInstance
  });
  Object.defineProperty(PassbandType, 'BANDPASS', {
    get: PassbandType$BANDPASS_getInstance
  });
  Object.defineProperty(PassbandType, 'HIGHPASS', {
    get: PassbandType$HIGHPASS_getInstance
  });
  package$iir.PassbandType = PassbandType;
  package$iir.SecondOrderSection = SecondOrderSection;
  package$iir.ThiranAllpass = ThiranAllpass;
  Kotlin.defineModule('oregondsp', _);
  return _;
}(module.exports, require('kotlin')));

//# sourceMappingURL=oregondsp.js.map
